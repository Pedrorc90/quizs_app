{
  "questions": [
    {
      "number": 1,
      "question": "1. Fill in the blanks: The ___________________ keyword is used in method declarations, whereas the ___________________ keyword is used to send an exception to the surrounding process.",
      "choices": [
        "A. throwing, catch",
        "B. throws, throw",
        "C. catch, throw",
        "D. throws, catch",
        "E. throw, throws",
        "F. catch, throwing"
      ]
    },
    {
      "number": 2,
      "question": "2. What is the output of the following application?",
      "code": "package paper;\nimport java.io.Closeable;\npublic class PrintCompany {\n   class Printer implements Closeable {     // r1\n      public void print() {\n         System.out.println(\"This just in!\");\n      }\n      public void close() {}\n   }\n   public void printHeadlines() {\n      try {Printer p = new Printer()} {     // r2\n         p.print();\n      }\n   }\n   public static void main(String[] headlines) {\n      new PrintCompany().printHeadlines();  // r3\n   } }",
      "choices": [
        "A. This just in!",
        "B. The code does not compile because of line r1.",
        "C. The code does not compile because of line r2.",
        "D. The code does not compile because of line r3.",
        "E. The code does not compile for a different reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 3,
      "question": "3. What is the result of compiling and executing the following application?",
      "code": "package mind;\nimport java.io.*;\npublic class Remember {\n   public static void think() throws IOException {  // k1\n      try {\n         throw Exception();\n      } catch (RuntimeException r) {}               // k2\n   }\n   public static void main(String[] ideas) throws Exception {\n      think();\n   } }",
      "choices": [
        "A. The code compiles and runs without printing anything.",
        "B. The code compiles, but a stack trace is printed at runtime.",
        "C. The code does not compile because of line k1.",
        "D. The code does not compile because of line k2.",
        "E. None of the above."
      ]
    },
    {
      "number": 4,
      "question": "4. Given the following keywords, in which order could they be used? (Choose two.)",
      "choices": [
        "A. try, finally",
        "B. catch, try, finally",
        "C. try, catch, catch, finally",
        "D. finally, catch, try",
        "E. try, finally, catch",
        "F. try, catch, finally, finally"
      ]
    },
    {
      "number": 5,
      "question": "5. Assuming -g:vars is used when the code is compiled to include debug information, what is the output of the following code snippet?",
      "code": "13: String cogsworth = null;\n14: Integer lumiere  = null;\n15: Object mrsPotts = null;\n16: if(lumiere> cogsworth.length()) {\n17:    System.out.println(mrsPotts.toString());\n18: }",
      "choices": [
        "A. A NullPointerException that does not include any variable names in the stack trace",
        "B. A NullPointerException naming cogsworth in the stack trace",
        "C. A NullPointerException naming lumiere in the stack trace",
        "D. A NullPointerException naming mrsPotts in the stack trace",
        "E. A NullPointerException naming cogsworth and lumiere in the stack trace",
        "F. None of the above"
      ]
    },
    {
      "number": 6,
      "question": "6. What is the output of the following application?",
      "code": "package park;\nclass LostBallException extends Exception {}\npublic class Ball {\n   public void toss() throws LostBallException {\n      var windUp = new int[1];\n      System.out.println(windUp[1]);\n   }\n   public static void main(String[] bouncy) {\n      try {\n         new Ball().toss();\n      } catch (Throwable e) {\n         System.out.print(\"Caught!\");\n      }\n   } }",
      "choices": [
        "A. 0",
        "B. Caught!",
        "C. The code does not compile because LostBallException is not handled or declared in the main() method.",
        "D. The code does not compile because ArrayIndexOutOfBoundsException is not handled or declared in the toss() method.",
        "E. The code does not compile for a different reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 7,
      "question": "7. Assuming Scanner is a valid class that implements AutoCloseable, what is the expected output of the following code?",
      "code": "try (Scanner s = new Scanner(System.in)) {\n   System.out.print(1);\n   s.nextLine();\n   System.out.print(2);\n} catch (IllegalArgumentException | NullPointerException x) {\n   s.nextLine();\n   System.out.print(3);\n} finally {\n   s.nextLine();\n   System.out.print(4);\n}\nSystem.out.print(5);",
      "choices": [
        "A. 1245",
        "B. 125",
        "C. 1234 followed by a stack trace",
        "D. 124 followed by a stack trace",
        "E. Does not compile",
        "F. None of the above"
      ]
    },
    {
      "number": 8,
      "question": "8. How many constructors in WhaleSharkException compile in the following class?",
      "code": "package friendly;\npublic class WhaleSharkException extends Exception {\n   public WhaleSharkException() {\n      super(\"Friendly shark!\");\n   }\n   public WhaleSharkException(String message) {\n      super(new Exception(new WhaleSharkException()));\n   }\n   public WhaleSharkException(Exception cause) {}\n}",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three"
      ]
    },
    {
      "number": 9,
      "question": "9. What is the output of the following application?",
      "code": "package game;\npublic class Football {\n   public static void main(String officials[]) {\n      try {\n         System.out.print('W');\n         throw new ArrayIndexOutOfBoundsException();\n      } catch (RuntimeException r) {\n         System.out.print('X');\n         throw r;\n      } catch (Exception e) {\n         System.out.print('Y');\n      } finally {\n         System.out.print('Z');\n      }\n   } }",
      "choices": [
        "A. WXY",
        "B. WXZ",
        "C. WXY followed by a stack trace",
        "D. WXZ followed by a stack trace",
        "E. WZ followed by a stack trace",
        "F. None of the above"
      ]
    },
    {
      "number": 10,
      "question": "10. Which of the following types are not recommended to catch in your application? (Choose two.)",
      "choices": [
        "A. Exception",
        "B. CheckedException",
        "C. Throwable",
        "D. RuntimeException",
        "E. UncheckedException",
        "F. Error"
      ]
    },
    {
      "number": 11,
      "question": "11. What is the output of the following program?",
      "code": "package buffet;\nclass Garden implements AutoCloseable {\n   private final int g;\n   Garden(int g) { this.g = g; }\n   public void close() throws Exception {\n      System.out.print(g);\n   } }\npublic class Salad {\n   public static void main(String[] u) throws Exception {\n      var g = new Garden(5);\n      try (g;\n            var h = new Garden(4);\n            var i = new Garden(2)) {\n      } finally {\n         System.out.println(9);\n      }\n      g = null;\n   } }",
      "choices": [
        "A. 2459",
        "B. 9245",
        "C. 5429",
        "D. 9542",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 12,
      "question": "12. How many of these custom exceptions are unchecked exceptions?",
      "code": "class ColoringException extends IOException {}\nclass CursiveException extends WritingException {}\nclass DrawingException extends IllegalStateException {}\nclass SketchingException extends DrawingException {}\nclass WritingException extends Exception {}",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five"
      ]
    },
    {
      "number": 13,
      "question": "13. How many lines of text does the following program print?",
      "code": "package lighting;\nimport java.io.IOException;\npublic class Light {\n   public static void main(String[] v) throws Exception {\n      try {\n         new Light().turnOn();\n      } catch (RuntimeException v) {  // y1\n         System.out.println(v);\n         throw new IOException();     // y2\n      } finally {\n         System.out.println(\"complete\");\n      }\n   }\n   public void turnOn() throws IOException {\n      new IOException(\"Not ready\");   // y3\n   } }",
      "choices": [
        "A. One.",
        "B. Two.",
        "C. The code does not compile because of line y1.",
        "D. The code does not compile because of line y2.",
        "E. The code does not compile because of line y3.",
        "F. None of the above."
      ]
    },
    {
      "number": 14,
      "question": "14. Which statements about try-with-resources are true? (Choose three.)",
      "choices": [
        "A. If more than one resource is used, the resources are closed in the order they were created.",
        "B. Parentheses are used for the resource declaration section, even if more than one resource is used.",
        "C. If the try block and close() method both throw an exception, then the one thrown by the close() method is suppressed.",
        "D. A resource may be declared before it is used in a try-with-resources statement.",
        "E. Resources declarations are separated by commas.",
        "F. A catch block is required."
      ]
    },
    {
      "number": 15,
      "question": "15. How many lines of text does the following program print?",
      "code": "package bee;\nclass SpellingException extends RuntimeException {}\npublic class SpellChecker {\n   public final static void main(String[] participants) {\n      try {\n         if(!\"cat\".equals(\"kat\")) {\n            new SpellingException();\n         }\n      } catch (SpellingException | NullPointerException e) {\n         System.out.println(\"Spelling problem!\");\n      } catch (Exception e) {\n         System.out.println(\"Unknown Problem!\");\n      } finally {\n         System.out.println(\"Done!\");\n      } } }",
      "choices": [
        "A. One.",
        "B. Two.",
        "C. Three.",
        "D. The code does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 16,
      "question": "16. Which of the following exception types must be handled or declared by the method in which they are thrown? (Choose three.)",
      "choices": [
        "A. FileNotFoundException",
        "B. ClassCastException",
        "C. Error",
        "D. IOException",
        "E. NullPointerException",
        "F. Exception"
      ]
    },
    {
      "number": 17,
      "question": "17. What is the output of the following application?",
      "code": "package bed;\npublic class Sleep {\n   public static void snore() {\n      try {\n         String sheep[] = new String[3];\n         System.out.print(sheep[3]);\n      } catch (RuntimeException | Error e) {\n         System.out.print(\"Awake!\");\n         throw e;                              // x1\n      } finally {\n         throw new Exception();                // x2\n      }\n   }\n   public static void main(String[] sheep) {\n      new Sleep().snore();                     // x3\n   } }",
      "choices": [
        "A. Awake!",
        "B. Awake! followed by a stack trace",
        "C. Does not compile because of line x1",
        "D. Does not compile because of line x2",
        "E. Does not compile because of line x3",
        "F. None of the above"
      ]
    },
    {
      "number": 18,
      "question": "18. What is the output of the following code?",
      "code": "class ProblemException extends Exception {\n   ProblemException(Exception e) { super(e); }\n}\nclass MajorProblemException extends ProblemException {\n   MajorProblemException(String message) { super(message); }\n}\npublic class Unfortunate {\n   public static void main(String[] args) throws Exception {\n      try {\n         System.out.print(1);\n         throw new MajorProblemException(\"Uh oh\");\n      } catch (ProblemException | RuntimeException e) {\n         System.out.print(2);\n         try {\n            throw new MajorProblemException(\"yikes\");\n         } finally {\n            System.out.print(3);       \n         }\n      } finally {\n         System.out.print(4);\n      } } }",
      "choices": [
        "A. 123",
        "B. 123 followed by an exception stack trace",
        "C. 1234",
        "D. 1234 followed by an exception stack trace",
        "E. The code does not compile.",
        "F. None of the above"
      ]
    },
    {
      "number": 19,
      "question": "19. Which statements best describe how a class that implements the AutoCloseable interface should be written? (Choose two.)",
      "choices": [
        "A. The close() method is optional since the AutoCloseable interface defines a default implementation.",
        "B. The close() method should avoid modifying data after it has been run once.",
        "C. The close() method should not throw any exceptions.",
        "D. The close() method should throw an exception if there is a problem closing the resource.",
        "E. The close() method should return a status code."
      ]
    },
    {
      "number": 20,
      "question": "20. Which of the following diagrams of java.lang classes shows the inheritance model properly?",
      "choices": [
        "A. [diagram A]",
        "B. [diagram B]",
        "C. [diagram C]",
        "D. [diagram D]"
      ]
    },
    {
      "number": 21,
      "question": "21. Which exception classes, when inserted into the blank in the Problems class, allow the code to compile?",
      "code": "class MissingMoneyException {}\nclass MissingFoodException {}\npublic class Problems {\n   public void doIHaveAProblem() \n         throws MissingMoneyException, MissingFoodException {\n      System.out.println(\"No problems\");\n   }\n   public static void main(String[] s) throws _________________ {\n      try {\n         final Problems p = new Problems();\n         p.doIHaveAProblem();\n      } catch (Exception e) {\n         throw e;\n      } } }",
      "choices": [
        "A. Exception",
        "B. RuntimeException",
        "C. MissingFoodException",
        "D. MissingMoneyException, MissingFoodException",
        "E. MissingMoneyException",
        "F. None of the above"
      ]
    },
    {
      "number": 22,
      "question": "22. Which statements about Closeable and AutoCloseable are true? (Choose two.)",
      "choices": [
        "A. AutoCloseable extends Closeable.",
        "B. Closeable extends AutoCloseable.",
        "C. The close() method in a class that implements AutoCloseable cannot throw an IOException.",
        "D. The close() method in a class that implements Closeable cannot throw an Exception.",
        "E. There is no difference; one was added for backward compatibility.",
        "F. Both have a generic return type."
      ]
    },
    {
      "number": 23,
      "question": "23. Which expressions, when inserted into the blank in the following class, allow the code to compile? (Choose two.)",
      "code": "package sun;\nimport java.io.*;\npublic class Beach {\n   class TideException extends Exception {}\n   public void surf() throws RuntimeException {\n      try {\n         throw new TideException();\n      } catch (______________________) {}\n   }\n}",
      "choices": [
        "A. Exception a | RuntimeException f",
        "B. IllegalStateException | TideException t",
        "C. TideException | IOException i",
        "D. TideException | Exception x",
        "E. Error e",
        "F. Exception z"
      ]
    },
    {
      "number": 24,
      "question": "24. Which of the following are the best scenarios in which to use and catch an exception? (Choose two.)",
      "choices": [
        "A. The computer caught fire.",
        "B. A network connection goes down.",
        "C. A caller passes invalid data to a method.",
        "D. The code does not compile.",
        "E. A method finishes sooner than expected.",
        "F. The program runs out of memory.",
        "G. A search returned no results."
      ]
    },
    {
      "number": 25,
      "question": "25. Which statement about the following program is correct?",
      "code": "1:package dogpark;\n2:public class Fetch {\n3:   public int play(String name) throws RuntimeException {\n4:      try {\n5:         throw new RuntimeException(name);\n6:      } catch (Throwable e) {\n7:         throw new RuntimeException(e);\n8:      }\n9:   }\n10:   public static final void main(String[] ball) \n11:         throws RuntimeException {\n12:      new Fetch().play(\"Webby\");\n13:      new Fetch().play(\"Georgette\");\n14:   } }",
      "choices": [
        "A. One exception is thrown to the caller at runtime.",
        "B. Two exceptions are thrown to the caller at runtime.",
        "C. More than two exceptions are thrown to the caller at runtime.",
        "D. The class does not compile because of the play() method.",
        "E. The class does not compile because of the main() method.",
        "F. None of the above."
      ]
    },
    {
      "number": 26,
      "question": "26. What is the output of the following application?",
      "code": "package body;\nimport java.io.IOException;\nclass Organ {\n   public void operate() throws IOException {\n      throw new RuntimeException(\"Not supported\");\n   }\n}\npublic class Heart extends Organ {\n   public void operate() throws Exception {\n      System.out.print(\"beat\");\n   }\n   public static void main(String[] c) throws Exception {\n      try {\n         new Heart().operate();\n      } finally {\n         System.out.print(\"!\");\n      }\n   } }",
      "choices": [
        "A. beat",
        "B. beat!",
        "C. Not supported",
        "D. The code does not compile.",
        "E. The code compiles, but a stack trace is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 27,
      "question": "27. Which of the following are true of using a try-with-resources statement? (Choose two.)",
      "choices": [
        "A. It shortens the amount of code a developer must write.",
        "B. It is possible to manually close a resource before the end of the try block.",
        "C. Associated catch blocks are run before the declared resources have been closed.",
        "D. It is only compatible with all classes that implement the Close interface.",
        "E. It is only compatible with all classes that implement the AutoClose interface.",
        "F. It cannot be used with a finally block."
      ]
    },
    {
      "number": 28,
      "question": "28. What is the output of the following application?",
      "code": "package zoo;\nclass BigCat {\n   void roar(int level) throws RuntimeException {\n      if(level<3) throw new IllegalArgumentException();\n      System.out.print(\"Roar!\");\n   } }\npublic class Lion extends BigCat {\n   public void roar() { System.out.print(\"Roar!!!\"); }\n   @Override void roar(int sound) throws IllegalStateException {\n      System.out.print(\"Meow\");\n   }\n   public static void main(String[] cubs) {\n      final BigCat kitty = new Lion();\n      kitty.roar(2);\n   } }",
      "choices": [
        "A. Meow",
        "B. Roar!",
        "C. Roar!!!",
        "D. MeowRoar!",
        "E. A stack trace is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 29,
      "question": "29. What is the result of compiling and executing the following class?",
      "code": "package wind;\npublic class Storm {\n   public static void main(String[] rain) throws Exception {\n      var weatherTracker = new AutoCloseable() {\n         public void close() throws RuntimeException {\n            System.out.println(\"Thunder\");\n         }\n      };\n      try (weatherTracker) {\n         System.out.println(\"Tracking\");\n      } catch (Exception e) {\n         System.out.println(\"Lightning\");\n      } finally {\n         System.out.println(\"Storm gone\");\n         weatherTracker.close();\n      }\n   } }",
      "choices": [
        "A. It prints one line.",
        "B. It prints two lines.",
        "C. It prints three lines.",
        "D. It prints four lines.",
        "E. It does not compile due to an error in the declaration of the weatherTracker resource.",
        "F. It does not compile for a different reason.",
        "G. None of the above."
      ]
    },
    {
      "number": 30,
      "question": "30. How many of the following are valid exception declarations?",
      "code": "class Error extends Exception {}\nclass _X extends IllegalArgumentException {}\nclass 2BeOrNot2Be extends RuntimeException {}\nclass NumberException<Integer> extends NumberFormatException {}\ninterface Worry implements NumberFormatException {}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five"
      ]
    },
    {
      "number": 31,
      "question": "31. If a try statement has catch blocks for both ClassCastException and RuntimeException, then which of the following statements is correct?",
      "choices": [
        "A. The catch blocks for these two exception types can be declared in any order.",
        "B. A try statement cannot be declared with these two catch block types because they are incompatible.",
        "C. The catch block for ClassCastException must appear before the catch block for RuntimeException.",
        "D. The catch block for RuntimeException must appear before the catch block for ClassCastException.",
        "E. None of the above."
      ]
    },
    {
      "number": 32,
      "question": "32. Assuming Scanner is a valid class that implements AutoCloseable, what is the expected output of the following application?",
      "code": "package castles;\nimport java.util.Scanner;\npublic class Fortress {\n   public void openDrawbridge() throws Exception {  // p1\n      try {\n         throw new Exception(\"Circle\");             // p2\n      } catch (Exception | Error e) {\n         System.out.print(\"Opening!\");\n      } finally {\n         System.out.print(\"Walls\");\n      }\n   }\n   public static void main(String[] moat) {\n      try (var e = new Scanner(System.in)) {\n         new Fortress().openDrawbridge();           // p3\n      }\n   } }",
      "choices": [
        "A. Opening!Walls",
        "B. The code does not compile because of line p1.",
        "C. The code does not compile because of line p2.",
        "D. The code does not compile because of line p3.",
        "E. The code compiles, but a stack trace is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 33,
      "question": "33. What is the output of the following application?",
      "code": "package game;\npublic class BasketBall {\n   public static void main(String[] dribble) {\n      try {\n         System.out.print(1);\n         throw new ClassCastException();\n      } catch (ArrayIndexOutOfBoundsException ex) {\n         System.out.print(2);\n      } catch (Throwable ex) {\n         System.out.print(3);\n      } finally {\n         System.out.print(4);\n      }\n      System.out.print(5);\n   } }",
      "choices": [
        "A. 145",
        "B. 1345",
        "C. 1235",
        "D. The code does not compile.",
        "E. The code compiles but throws an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 34,
      "question": "34. Assuming -g:vars is used when the code is compiled to include debug information, what is the output of the following code snippet?",
      "code": "41:String mode = null;\n42:int grade = (Integer)null;\n43:Integer average = null;\n44:if(grade>= average && Integer.parseInt(mode)> 0) {\n45:   System.out.println(\"You passed!\");\n46:}",
      "choices": [
        "A. A NullPointerException naming mode in the stack trace",
        "B. A NullPointerException naming grade in the stack trace",
        "C. A NullPointerException naming average in the stack trace",
        "D. A NullPointerException naming grade, average, and mode in the stack trace",
        "E. None of the above"
      ]
    },
    {
      "number": 35,
      "question": "35. What is the output of the following application?",
      "code": "package signlanguage;\nimport java.io.Closeable;\nclass ReadSign implements Closeable {\n   public void close() {}\n   public String get() { return \"Hello\"; } }\nclass MakeSign implements AutoCloseable {\n   public void close() {}\n   public void send(String message) {\n      System.out.print(message);\n   } }\npublic class Translate {\n   public static void main(String[] hands) {\n      try (ReadSign r = new ReadSign();\n         MakeSign w = new MakeSign();) {\n         w.send(r.get());\n      }\n   } }",
      "choices": [
        "A. Hello",
        "B. The code does not compile because of the ReadSign class.",
        "C. The code does not compile because of the MakeSign class.",
        "D. The code does not compile because of the try-with-resources statement.",
        "E. None of the above."
      ]
    },
    {
      "number": 36,
      "question": "36. What is the output of the following application?",
      "code": "package what;\nclass FunEvent implements AutoCloseable {\n   private final int value;\n   FunEvent(int value) { this.value = value; }\n   public void close() {\n      System.out.print(value);\n   }\n}\npublic class Happening {\n   public static void main(String[] lots) {\n      FunEvent e = new FunEvent(1);\n      try (e; var f = new FunEvent(8)) {\n         System.out.print(\"2\");\n         throw new ArithmeticException();\n      } catch (Exception x) {\n         System.out.print(\"3\");\n      } finally {\n         System.out.print(\"4\");\n      }\n   } }",
      "choices": [
        "A. 24",
        "B. 21834",
        "C. 23418",
        "D. 23481",
        "E. 28134",
        "F. The code does not compile."
      ]
    },
    {
      "number": 37,
      "question": "37. What is the output of the following application?",
      "code": "package office;\nimport java.io.*;\npublic class Printer {\n   public void print() {\n      try {\n         throw new FileNotFoundException();\n      } catch (Exception | RuntimeException e) {\n         System.out.print(\"Z\");\n      } catch (Throwable f) {\n         System.out.print(\"X\");\n      } finally {\n         System.out.print(\"Y\");\n      }\n   }\n   public static void main(String[] ink) {\n      new Printer().print();\n   } }",
      "choices": [
        "A. Y",
        "B. XY",
        "C. ZY",
        "D. The code does not compile.",
        "E. The code compiles, but a stack trace is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 38,
      "question": "38. What is the output of the following program?",
      "code": "class ProblemException extends Exception {\n   ProblemException(Exception e) { super(e); }\n}\nclass MajorProblemException extends ProblemException {\n   MajorProblemException(Exception e) { super(e); }\n}\npublic class Unfortunate {\n   public static void main(String[] args) throws Exception {\n      try {\n         System.out.print(1);\n         throw new MajorProblemException(\n            new IllegalStateException());\n      } catch (ProblemException | RuntimeException e) {\n         System.out.print(2);\n         try {\n            throw new MajorProblemException(e);\n         } finally {\n            System.out.print(3);       \n         }\n      } finally {\n         System.out.print(4);\n      } } }",
      "choices": [
        "A. 123",
        "B. 123 followed by an exception stack trace",
        "C. 1234",
        "D. 1234 followed by an exception stack trace",
        "E. Does not compile",
        "F. None of the above"
      ]
    },
    {
      "number": 39,
      "question": "39. What is the output of the following application?",
      "code": "1:  package robots.are.real;\n2:  public class Computer {\n3:     public void compute() throws Exception {\n4:        throw new NullPointerException(\"Does not compute!\");\n5:     }\n6:     public static void main(String[] b) throws Exception {\n7:        try {\n8:           new Computer().compute();\n9:        } catch (RuntimeException e) {\n10:          System.out.print(\"zero\");\n11:          throw e;\n12:       } catch (Exception e) {\n13:          System.out.print(\"one\");\n14:          throw e;\n15:       } } }",
      "choices": [
        "A. zero",
        "B. one",
        "C. zero followed by a stack trace",
        "D. one followed by a stack trace",
        "E. Does not compile",
        "F. None of the above"
      ]
    },
    {
      "number": 40,
      "question": "40. Given the following class diagram, which two classes are missing in the hierarchy at positions 1 and 2?",
      "image": "chapter_4_40.png",
      "choices": [
        "A. IOException at position 1, Exception at position 2",
        "B. Exception at position 1, RuntimeException at position 2",
        "C. IllegalArgumentException at position 1, RuntimeException at position 2",
        "D. IllegalStateException at position 1, RuntimeException at position 2",
        "E. Exception at position 1, FileNotFoundException at position 2",
        "F. None of the above"
      ]
    },
    {
      "number": 41,
      "question": "41. What is the output of the following application?",
      "code": "package vortex;\nclass TimeException extends Exception {}\nclass TimeMachine implements AutoCloseable {\n   int v;\n   public TimeMachine(int v) {this.v = v;}\n   public void close() throws Exception {\n      System.out.print(v);\n   } }\npublic class TimeTraveler {\n   public static void main(String[] twelve) {\n      try (var timeSled = new TimeMachine(1);\n           var delorean = new TimeMachine(2);\n           var tardis = new TimeMachine(3)) {\n      } catch (TimeException e) {\n         System.out.print(4);\n      } finally {\n         System.out.print(5);\n      } } }",
      "choices": [
        "A. 1235",
        "B. 3215",
        "C. 5123",
        "D. 5321",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 42,
      "question": "42. Which of the following are common reasons to add a checked exception to a method signature? (Choose three.)",
      "choices": [
        "A. To alert developers that the state of the JVM has been corrupted",
        "B. To force a caller to handle or declare potential problems",
        "C. To ensure that exceptions never cause the application to terminate",
        "D. To notify the caller of potential types of problems",
        "E. To give the caller a chance to recover from a problem",
        "F. To annoy other developers"
      ]
    },
    {
      "number": 43,
      "question": "43. Which statement about the following application is correct?",
      "code": "package highway;\nimport java.io.*;\nclass CarCrash extends Error {\n   CarCrash(Exception e) {}                               // w1\n}\npublic class Car {\n   public static void main(String[] s) throws Exception { // w2\n      try {\n         throw new IOException(\"Auto-pilot error\");\n      } catch (IOException | CarCrash e) {                // w3\n         throw e;\n      } catch (FileNotFoundException a) {                 // w4\n         throw a;\n      } } }",
      "choices": [
        "A. The code does not compile because of line w1.",
        "B. The code does not compile because of line w2.",
        "C. The code does not compile because of line w3.",
        "D. The code does not compile because of line w4.",
        "E. The code compiles and prints a stack trace at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 44,
      "question": "44. Which of the following exception classes must be handled or declared in the method in which they are thrown? (Choose three.)",
      "choices": [
        "A. Happy",
        "B. Dopey",
        "C. Sleepy",
        "D. Sneezy",
        "E. Doc",
        "F. Grumpy"
      ]
    },
    {
      "number": 45,
      "question": "45. What is the output of the following application?",
      "code": "package pond;\nimport java.io.*;\nabstract class Duck {\n   protected int count;\n   public abstract int getDuckies() throws IOException;\n}\npublic class Ducklings extends Duck {\n   private int age;\n   public Ducklings(int age) { this.age = age; }\n   public int getDuckies() { return this.age/count; }\n   public static void main(String[] pondInfo) throws Exception {\n      var itQuacks = new Ducklings(5);\n      System.out.print(itQuacks.getDuckies());\n   } }",
      "choices": [
        "A. 0",
        "B. 1",
        "C. 5",
        "D. The code does not compile.",
        "E. The code compiles but throws an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 46,
      "question": "46. Which statements about the following line of code are correct? (Choose three.)\nthrow new IllegalArgumentException();",
      "choices": [
        "A. The method where this is called must declare a compatible exception.",
        "B. The code where this is called can include a try-with-resources block that handles this exception.",
        "C. This exception should not be handled or declared.",
        "D. The code where this is called can include a try/catch block that handles this exception.",
        "E. This exception should be thrown only at the start of a method.",
        "F. This exception does not need to be handled by the method in which it is called."
      ]
    },
    {
      "number": 47,
      "question": "47. What is the output of the following application?",
      "code": "package storage;\nimport java.io.*;\npublic class Backup {\n   public void performBackup() {\n      try {\n         throw new IOException(\"Disk not found\");  // z1\n      } catch (Exception e) {\n         try {\n            throw new FileNotFoundException(\"File not found\");\n         } catch (FileNotFoundException e) {       // z2\n            System.out.print(\"Failed\");\n         } } }\n   public static void main(String[] files) {\n      new Backup().performBackup();                // z3\n   } }",
      "choices": [
        "A. Failed",
        "B. The application compiles, but a stack trace is printed at runtime.",
        "C. The code does not compile because of line z1.",
        "D. The code does not compile because of line z2.",
        "E. The code does not compile because of line z3.",
        "F. None of the above."
      ]
    },
    {
      "number": 48,
      "question": "48. What is the output of the following?\npackage com.tps;\nimport java.io.IOException;\npublic class IncidentReportException extends RuntimeException {\n   public static void main(String[] args) throws Exception {\n      try {\n         throw new IncidentReportException(new IOException());\n      } catch (RuntimeException e) {\n         System.out.println(e.getCause());\n      } } }",
      "choices": [
        "A. com.tps.IncidentReportException",
        "B. java.lang.IOException",
        "C. The code does not compile because IOException is a checked exception.",
        "D. The code does not compile due to the declaration of the IncidentReportException object.",
        "E. None of the above."
      ]
    },
    {
      "number": 49,
      "question": "49. Which expressions, when inserted into the blank in the following class, allow the code to compile? (Choose two.)",
      "code": "package music;\nimport java.sql.*;\npublic class Bells {\n   class Player implements AutoCloseable {\n      @Override public void close() throws RingException {}\n   }\n   class RingException extends Exception {\n      public RingException(String message) {}\n   }\n   public static void main(String[] notes) throws Throwable {\n      try (Player p = null) {\n         throw new Exception();\n      } catch (Exception e) {\n      } catch (_____________________________ q) {\n      } } }",
      "choices": [
        "A. Error",
        "B. IllegalStateException",
        "C. RingException",
        "D. SQLException",
        "E. Throwable",
        "F. RuntimeException"
      ]
    },
    {
      "number": 50,
      "question": "50. Which statement about the following program is true?",
      "code": "package tag;\nclass MissedCallException extends Exception {}\npublic class Phone {\n   static void makeCall() throws RuntimeException {\n      throw new ArrayIndexOutOfBoundsException(\"Call\");\n   }\n   public static void main(String[] messages) {\n      try {\n         makeCall();\n      } catch (MissedCallException e) {\n         throw new RuntimeException(\"Voicemail\");\n      } finally {\n         throw new RuntimeException(\"Text\");\n      } } }",
      "choices": [
        "A. An exception is printed at runtime with Call in the message.",
        "B. An exception is printed at runtime with Voicemail in the message.",
        "C. An exception is printed at runtime with Text in the message.",
        "D. The code does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 51,
      "question": "51. If a try statement has catch blocks for both IllegalArgumentException and NullPointerException, then which of the following statements is correct?",
      "choices": [
        "A. The catch blocks for these two exception types can be declared in any order.",
        "B. A try statement cannot be declared with these two catch block types because they are incompatible.",
        "C. The catch block for IllegalArgumentException must appear before the catch block for NullPointerException.",
        "D. The catch block for NullPointerException must appear before the catch block for IllegalArgumentException.",
        "E. None of the above."
      ]
    },
    {
      "number": 52,
      "question": "52. What is the output of the following application?",
      "code": "package furniture;\nclass Chair {\n   public void sit() throws IllegalArgumentException {\n      System.out.print(\"creak\");\n      throw new RuntimeException();\n   }\n}\npublic class Stool extends Chair {\n   public void sit() throws RuntimeException {\n      System.out.print(\"thud\");\n   }\n   public static void main(String[] c) throws Exception {\n      try {\n         new Stool().sit();\n      } finally {\n         System.out.print(\"?\");\n      } } }",
      "choices": [
        "A. creak",
        "B. thud",
        "C. thud?",
        "D. The code does not compile.",
        "E. The code compiles, but a stack trace is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 53,
      "question": "53. What is the output of the following application?",
      "code": "import java.io.*;\nimport java.sql.*;\npublic class DatabaseHelper {\n   static class MyDatabase implements Closeable {\n      public void close() throws SQLException {\n         System.out.print(\"2\");\n      }\n      public void write(String data) {}\n      public String read() {return null;}\n   }\n   public static void main(String[] files) throws Exception {\n      try (MyDatabase myDb = new MyDatabase()) {\n         // TODO: Decide what to read/rite\n      } finally {\n         System.out.print(\"1\");\n      } } }",
      "choices": [
        "A. 12",
        "B. 21",
        "C. The code does not compile because of the MyDatabase nested class.",
        "D. The code does not compile because of the try-with-resources statement.",
        "E. The code does not compile for a different reason."
      ]
    },
    {
      "number": 54,
      "question": "54. What constructors are capable of being called on a custom exception class that directly extends the Exception class?",
      "choices": [
        "A. One that takes a single Exception",
        "B. One that takes a single String",
        "C. Both of these",
        "D. Neither of these"
      ]
    },
    {
      "number": 55,
      "question": "55. What is the result of compiling and running the following application?",
      "code": "package dinner;\npublic class Pizza {   \n   Exception order(RuntimeException e) {          // h1\n      throw e;                                    // h2\n   }   \n   public static void main(String[] u) {\n      var p = new Pizza();\n      try {\n         p.order(new IllegalArgumentException()); // h3\n      } catch(RuntimeException e) {               // h4\n         System.out.print(e);\n      } } }",
      "choices": [
        "A. java.lang.IllegalArgumentException is printed.",
        "B. The code does not compile because of line h1.",
        "C. The code does not compile because of line h2.",
        "D. The code does not compile because of line h3.",
        "E. The code does not compile because of line h4.",
        "F. The code compiles, but a stack trace is printed at runtime."
      ]
    },
    {
      "number": 56,
      "question": "56. Given an application that hosts a website, which of the following would most likely result in a java.lang.Error being thrown? (Choose two.)",
      "choices": [
        "A. A user tries to sign in too many times.",
        "B. Two users try to register an account at the same time.",
        "C. An order update page calls itself infinitely.",
        "D. The application temporarily loses connection to the network.",
        "E. A user enters their password incorrectly.",
        "F. The connections to a database are never released and keep accumulating."
      ]
    },
    {
      "number": 57,
      "question": "57. How many lines of text does the following program print?",
      "code": "package tron;\nclass DiskPlayer implements AutoCloseable {\n   public void close() {}\n}\npublic class LightCycle {\n   public static void main(String[] bits) {\n      try (DiskPlayer john = new DiskPlayer()) {\n         System.out.println(\"ping\");\n         john.close();\n      } finally {\n         System.out.println(\"pong\");\n         john.close();\n      }\n      System.out.println(\"return\");\n   } }",
      "choices": [
        "A. One.",
        "B. Two.",
        "C. Three.",
        "D. The code does not compile because of the DiskPlayer class.",
        "E. The code does not compile for a different reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 58,
      "question": "58. What is the output of the following?",
      "code": "package com.tps;\nimport java.io.IOException;\npublic class OfficeException extends RuntimeException {\n   public OfficeException(Exception e) {\n      super(e);\n   }\n   public static void main(String[] args) throws Exception {\n      try {\n         throw new OfficeException(new IOException());\n      } catch (RuntimeException e) {\n         System.out.println(e.getCause());\n      } } }",
      "choices": [
        "A. com.tps.OfficeException",
        "B. java.lang.IOException",
        "C. The code does not compile because IOException is a checked exception.",
        "D. The code does not compile due to the declaration of OfficeException.",
        "E. None of the above."
      ]
    },
    {
      "number": 59,
      "question": "59. Given the following application, what is the name of the class printed at line e1?",
      "code": "package canyon;\nfinal class FallenException extends Exception {}\nfinal class HikingGear implements AutoCloseable {\n   @Override public void close() throws Exception {\n      throw new FallenException();\n   } }\npublic class Cliff {\n   public final void climb() throws Exception {\n      try (HikingGear gear = new HikingGear()) {\n         throw new RuntimeException();\n      } }\n   public static void main(String[] rocks) {\n      try {\n         new Cliff().climb();\n      } catch (Throwable t) {\n         System.out.println(t);  // e1\n      } } }",
      "choices": [
        "A. java.lang.RuntimeException",
        "B. canyon.FallenException",
        "C. The code does not compile.",
        "D. The code compiles, but the answer cannot be determined until runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 60,
      "question": "60. Given the following application, which specific type of exception will be printed in the stack trace at runtime?",
      "code": "package carnival;\npublic class WhackAnException {\n   public static void main(String[] hammer) {\n      try {\n         throw new ClassCastException();\n      } catch (IllegalArgumentException e) {\n         throw new IllegalArgumentException();\n      } catch (RuntimeException e) {\n         throw new NullPointerException();\n      } finally {\n         throw new RuntimeException();\n      } } }",
      "choices": [
        "A. ClassCastException",
        "B. IllegalArgumentException",
        "C. NullPointerException",
        "D. RuntimeException",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    }
  ]
}