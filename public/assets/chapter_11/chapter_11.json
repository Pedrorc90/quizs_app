{
  "questions": [
    {
      "number": 1,
      "question": "Which of the following are considered locales? (Choose three.)",
      "choices": [
        "A. Cultural region",
        "B. Local address",
        "C. City",
        "D. Time zone region",
        "E. Political region",
        "F. Geographical region"
      ]
    },
    {
      "number": 2,
      "question": "What is the result of the following?\n LocalDateTime pi = LocalDateTime.of(2022, 3, 14, 1, 59);\n var formatter = DateTimeFormatter.ofPattern(\"M.ddhhmm\");\n System.out.println(formatter.format(pi));",
      "choices": [
        "A. 2.140159",
        "B. 3.140159",
        "C. 59.140102",
        "D. 59.140103",
        "E. The code does not compile.",
        "F. The code compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 3,
      "question": "Assuming the key green is in all five of the files referenced in the options, which file will the following code use for the resource bundle?\n Locale.setDefault(new Locale(\"en\", \"US\"));\n var rb = ResourceBundle.getBundle(\"Colors\", new Locale(\"fr\"));\n System.out.print(rb.getString(\"green\"));",
      "choices": [
        "A. Colors_default.properties",
        "B. Colors.properties",
        "C. Colors_en.properties",
        "D. Colors_US.properties",
        "E. Colors_en_US.properties"
      ]
    },
    {
      "number": 4,
      "question": "Assuming the following method is called with a double value of 1_900_000.0, which values are printed? (Choose two.)\n public void payBill(double t) {\n var nf1 = NumberFormat.getCompactNumberInstance(\n Locale.getDefault(), Style.LONG);\n var nf2 = NumberFormat.getCompactNumberInstance();\n\n System.out.println(nf1.format(t));\n System.out.println(nf2.format(t));\n }",
      "choices": [
        "A. 1M",
        "B. 1.9 million",
        "C. 2M",
        "D. 1.900M",
        "E. 2 million",
        "F. 1 million"
      ]
    },
    {
      "number": 5,
      "question": "What is the output of the following code snippet?\n var d = LocalDateTime.parse(\"2022-01-21T12:00:00\", DateTimeFormatter.ISO_LOCAL_DATE);\n System.out.print(d.format(DateTimeFormatter.ISO_LOCAL_TIME));",
      "choices": [
        "A. 00:00:00",
        "B. 12:00:00",
        "C. 2022-01-21",
        "D. 2022-01-22",
        "E. The code does not compile.",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 6,
      "question": "Fill in the blank with the option that allows the code snippet to compile and print a message without throwing an exception at runtime.\n var x = LocalDate.of(2022, 3, 1);\n var y = LocalDateTime.of(2022, 3, 1, 5, 55);\n var f = DateTimeFormatter.ofPattern(\"MMMM' at 'h' o'clock'\");\n System.out.print(_________________);",
      "choices": [
        "A. f.formatDate(x)",
        "B. f.formatDate(y)",
        "C. f.format(x)",
        "D. f.format(y)",
        "E. The code does not compile regardless of what is placed in the blank.",
        "F. None of the above."
      ]
    },
    {
      "number": 7,
      "question": "What does the following program print?\n import java.time.*;\n import java.time.format.*;\n\n public class PolarBear {\n public static void main(String[] args) {\n LocalDate polarBearDay = LocalDate.of(2022, 2, 27);\n var formatter = DateTimeFormatter.ofPattern(\"yyyy dd MMM\");\n System.out.println(polarBearDay.format(formatter));\n } }",
      "choices": [
        "A. 2022 27 Jan",
        "B. 2022 27 Feb",
        "C. 2022 Jan 27",
        "D. 2022 Feb 27",
        "E. None of the above"
      ]
    },
    {
      "number": 8,
      "question": "Which of the following are valid locale formats? (Choose two.)",
      "choices": [
        "A. hi",
        "B. IN_hi",
        "C. hi_IN",
        "D. HI_IN",
        "E. in_hi",
        "F. IN"
      ]
    },
    {
      "number": 9,
      "question": "Assuming the key indigo is in all five of the files referenced in the options, which file will the following code use for the resource bundle?\n Locale loc = new Locale(\"fr\", \"CH\");\n Locale.setDefault(new Locale(\"it\", \"CH\"));\n ResourceBundle rb = ResourceBundle.getBundle(\"Colors\", loc);\n rb.getString(\"Indigo\");",
      "choices": [
        "A. Colors_default.properties",
        "B. Colors_en_US.properties",
        "C. Colors_CH.properties",
        "D. Colors_en.properties",
        "E. Colors_es.properties",
        "F. None of the above"
      ]
    },
    {
      "number": 10,
      "question": "For currency, the United States uses the $ symbol, the UK uses the £ symbol, and Germany uses the € symbol. Given this information, what is the expected output of the following code snippet?\n Locale.setDefault(Locale.US);\n Locale.setDefault(Category.FORMAT, Locale.GERMANY);\n System.out.print(NumberFormat.getCurrencyInstance(Locale.UK).format(1.1));",
      "choices": [
        "A. $1.10",
        "B. 1,10€",
        "C. £1.10",
        "D. The code does not compile.",
        "E. An exception is thrown at runtime.",
        "F. The output cannot be determined without knowing the locale of the system where it will be run."
      ]
    },
    {
      "number": 11,
      "question": "Which correctly fills in the blank to print 2022-01-15?\n LocalDate hatDay = LocalDate.of(2022, Month.JANUARY, 15);\n DateFormatter f = DateFormatter.ISO_DATE;\n System.out.println(____________________________________);",
      "choices": [
        "A. f.format(hatDate)",
        "B. hatDay.format(f)",
        "C. Both of the above",
        "D. Neither of the above"
      ]
    },
    {
      "number": 12,
      "question": "Given the following four properties files, what does this code print?\n Locale.setDefault(new Locale(\"en\"));\n var rb = ResourceBundle.getBundle(\"Cars\", new Locale(\"de\", \"DE\"));\n var r1 = rb.getString(\"engine\");\n var r2 = rb.getString(\"horses\");\n var r3 = rb.getString(\"country\");\n System.out.print(r1+ \" \" + r2 + \" \" + r3);",
      "choices": [
        "A. null null null",
        "B. engine 241 US",
        "C. moteur 45 US",
        "D. engine 241 earth",
        "E. moteur 241 earth",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 13,
      "question": "Given the four properties files in Question 12, what does this code print?\n Locale.setDefault(new Locale(\"en\", \"US\"));\n var rb = ResourceBundle.getBundle(\"Cars\", new Locale(\"fr\", \"FR\"));\n var s1 = rb.getString(\"country\");\n var s2 = rb.getString(\"horses\");\n var s3 = rb.getString(\"engine\");\n System.out.print(s1+ \" \" + s2 + \" \" + s3);",
      "choices": [
        "A. France null engine",
        "B. France 241 moteur",
        "C. France 45 moteur",
        "D. France 241 engine",
        "E. France 45 engine",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 14,
      "question": "Given the four properties files in Question 12, what does this code print?\n Locale.setDefault(new Locale(\"ja\",\"JP\"));\n var rb = ResourceBundle.getBundle(\"Cars\", new Locale(\"fr\", \"FR\"));\n var t1 = rb.getString(\"engine\");\n var t2 = rb.getString(\"road\");\n var t3 = rb.getString(\"country\");\n System.out.print(t1+ \" \" + t2 + \" \" + t3);",
      "choices": [
        "A. moteur autoroute France",
        "B. engine autoroute France",
        "C. engine highway France",
        "D. moteur highway France",
        "E. moteur highway US",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 15,
      "question": "Which of the following correctly define a Locale instance? (Choose three.)",
      "choices": [
        "A. Locale.get(\"it\")",
        "B. new Locale(\"it\")",
        "C. Locale.get(Locale.ITALIAN)",
        "D. new Locale.Builder().setLanguage(\"it\").build()",
        "E. Locale.of(\"it\")",
        "F. Locale.ITALIAN"
      ]
    },
    {
      "number": 16,
      "question": "Assuming the key turquoise is in all five of the files referenced in the options, which file will the following code use for the resource bundle?\n Locale loc = new Locale(\"zh\", \"CN\");\n Locale.setDefault(new Locale(\"en\", \"US\"));\n ResourceBundle rb = ResourceBundle.getBundle(\"Colors\", loc);\n rb.getString(\"turquoise\");",
      "choices": [
        "A. Colors_en.properties",
        "B. Colors_CN.properties",
        "C. Colors.properties",
        "D. Colors_default.properties",
        "E. Colors_en_CN.properties",
        "F. None of the above"
      ]
    },
    {
      "number": 17,
      "question": "What format pattern would you pass to a DateTimeFormatter so it creates hour and minute output such as 02:33?",
      "choices": [
        "A. HH:MM",
        "B. HH:mm",
        "C. hh:MM",
        "D. hh:mm",
        "E. None of the above"
      ]
    },
    {
      "number": 18,
      "question": "Assuming the following method is called with a double value of 123_456.789, which value is printed?\n public void printReceipt(double t) {\n var formatter = NumberFormat.getCompactNumberInstance(Locale.getDefault(), Style.SHORT);\n System.out.print(formatter.format(t));\n }",
      "choices": [
        "A. 123,456.789",
        "B. 123.456 thousand",
        "C. 123.456K",
        "D. 124K",
        "E. 123 thousand",
        "F. 123K"
      ]
    },
    {
      "number": 19,
      "question": "For what values of pattern will the following print <02.1> <06.9> <10,00>? (Choose two.)\n String pattern = \"_________________\";\n var message = DoubleStream.of(2.1, 6.923, 1000)\n .mapToObj(v -> new DecimalFormat(pattern).format(v))\n .collect(Collectors.joining(\"> <\"));\n System.out.print(\"<\" + message + \">\");",
      "choices": [
        "A. ##,00.##",
        "B. ##,00.#",
        "C. 0,00.#",
        "D. #,00.#",
        "E. 0,00.0",
        "F. #,##.#"
      ]
    },
    {
      "number": 20,
      "question": "Which of the following are not valid Locale formats? (Choose two.)",
      "choices": [
        "A. nl_BE",
        "B. fr_CA",
        "C. uk_ua",
        "D. CR",
        "E. no",
        "F. ro_RO"
      ]
    },
    {
      "number": 21,
      "question": "What is the result of running this code?\n 12: LocalDate pieDay = LocalDate.of(2022, Month.JANUARY, 23);\n 13: LocalTime midnight = LocalTime.of(0, 0);\n 14: LocalDateTime pieTime = LocalDateTime.of(pieDay, midnight);\n 15:\n 16: DateTimeFormatter f = DateTimeFormatter\n 17:    .ofLocalizedDate(FormatStyle.SHORT);\n 18: f.format(pieDay);\n 19: f.format(pieTime);\n 20: f.format(midnight);",
      "choices": [
        "A. The code runs successfully.",
        "B. The code throws an exception on line 18.",
        "C. The code throws an exception on line 19.",
        "D. The code throws an exception on line 20.",
        "E. The code does not compile."
      ]
    },
    {
      "number": 22,
      "question": "For currency, the United States uses the $ symbol, the UK uses the £ symbol, and Germany uses the € symbol. Given this information, what is the expected output of the following code snippet?\n Locale.setDefault(Locale.US);\n Locale.setDefault(Category.FORMAT, Locale.GERMANY);\n Locale.setDefault(Category.DISPLAY, Locale.UK);\n System.out.print(NumberFormat.getCurrencyInstance()\n    .format(6.95));",
      "choices": [
        "A. $6.95",
        "B. 6,95 €",
        "C. £6.95",
        "D. The code does not compile.",
        "E. An exception is thrown at runtime.",
        "F. The output cannot be determined without knowing the locale of the system where it will be run."
      ]
    },
    {
      "number": 23,
      "question": "What is the output of the following code snippet?\n var x = LocalDate.of(2022, 3, 1);\n var y = LocalDateTime.of(2022, 1, 1, 2, 55);\n var f = DateTimeFormatter.ofPattern(\"'yyyy-MM'\");\n System.out.print(f.format(x) + \" \" + f.format(y));",
      "choices": [
        "A. 2022-03 2022-01",
        "B. 2022-01 2022-03",
        "C. 2022-02 2022-00",
        "D. yyyy-MM yyyy-MM",
        "E. The code does not compile.",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 24,
      "question": "Given the following two properties files, what does the loadPod() method output?\n container.properties\n name=generic\n number=2\n \n container_en.properties\n name=Ship\n type=container\n \n void loadPod() {\n    new Locale.Builder()\n      .setLanguage(\"en\").build();\n    var rb = ResourceBundle.getBundle(\"container\");\n    String name = rb.getString(\"name\");\n    String type = rb.getString(\"type\");\n    System.out.print(name + \" \" + type);\n }",
      "choices": [
        "A. Ship container",
        "B. generic container",
        "C. generic null",
        "D. The output cannot be determined without knowing the locale of the system where it will be run.",
        "E. An exception is thrown at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 25,
      "question": "Given the two properties files from Question 24, what does the following method output?\n void loadContainer() {\n    Locale.setDefault(new Locale(\"en\"));\n    var rb = ResourceBundle.getBundle(\"container\");\n    String name = rb.getString(\"name\");\n    String type = rb.getString(\"type\");\n    System.out.print(name + \" \" + type);\n }",
      "choices": [
        "A. Ship container",
        "B. generic container",
        "C. generic null",
        "D. The output cannot be determined without knowing the locale of the system where it will be run.",
        "E. An exception is thrown at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 26,
      "question": "Given the two properties files from Question 24, what does the following method output?\n void loadControlPlane() {\n    Locale.setDefault(new Locale(\"en_US\"));\n    var rb = ResourceBundle.getBundle(\"container\");\n    String name = rb.getString(\"name\");\n    String type = rb.getString(\"type\");\n    System.out.print(name + \" \" + type);\n }",
      "choices": [
        "A. Ship container",
        "B. generic container",
        "C. generic null",
        "D. The output cannot be determined without knowing the locale of the system where it will be run.",
        "E. An exception is thrown at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 27,
      "question": "Which correctly fills in the blank to print 2022-01-15?\n LocalDate hatDay = LocalDate.of(2022, Month.JANUARY, 15);\n DateTimeFormatter f = DateTimeFormatter.ISO_DATE;\n System.out.println(____________________________________);",
      "choices": [
        "A. f.format(hatDay)",
        "B. hatDay.format(f)",
        "C. f.formatDate(hatDay)",
        "D. hatDay.formatDate(f)",
        "E. f.format(hatDay) and hatDay.format(f)",
        "F. f.formatDate(hatDay) and hatDay.formatDate(f)"
      ]
    },
    {
      "number": 28,
      "question": "Assuming the Forest.properties file is the only resource file available, what is the output of calling the hike() method?\n Forest.properties\n trees=evergreen {0}\n animals=squirrels\n \n static void hike() {\n    Locale.setDefault(new Locale.Builder()\n       .setLanguage(\"en\").build());\n    var rb = ResourceBundle\n       .getBundle(\"Forest\", new Locale(\"fr\"));\n    System.out.print(MessageFormat.format(\"trees\",\"pretty\"));\n }",
      "choices": [
        "A. trees",
        "B. trees pretty",
        "C. trees {0}",
        "D. trees null",
        "E. The code does not compile.",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 29,
      "question": "What does the following print?\n import java.time.*;\n import java.time.format.*;\n \n public class Cat {\n    public static void main(String[] args) {\n       LocalDate catDay = LocalDate.of(2022, 10, 29);\n       var formatter = DateTimeFormatter\n          .ofPattern(\"Holiday: yyyy dd MMM\");\n       System.out.println(catDay.format(formatter));\n    } }",
      "choices": [
        "A. Holiday: 2022 29 Sept",
        "B. Holiday: 2022 29 Oct",
        "C. The code does not compile.",
        "D. The code compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 30,
      "question": "Which of the following is not an expected output printed by the following code?\n double p = 1_909.2;\n var nf1 = NumberFormat.getCompactNumberInstance(Locale.getDefault());\n var nf2 = NumberFormat.getCompactNumberInstance(\n    Locale.getDefault(), Style.SHORT);\n var nf3 = NumberFormat.getCompactNumberInstance(\n    Locale.getDefault(), Style.LONG);\n System.out.println(nf1.format(p));\n System.out.println(nf2.format(p));\n System.out.println(nf3.format(p));",
      "choices": [
        "A. 1909.2",
        "B. 2K",
        "C. 2 thousand",
        "D. All of the above will be printed.",
        "E. None of the above, as the code does not compile."
      ]
    }
  ]
}