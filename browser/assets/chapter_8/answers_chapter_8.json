{
  "answers": [
    {
      "number": 1,
      "answers": ["A"],
      "explanation": "The code compiles, making option E incorrect. The Thread.run() method is called instead of Thread.start(), so the program is single-threaded. The calls to interrupt() have no effect, and nothing is printed at runtime, making option A correct. If start() were used instead of run(), then the code would print How rude! once, as it only catches one InterruptedException."
    },
    {
      "number": 2,
      "answers": ["C"],
      "explanation": "The code does not compile because Callable must define a call() method, not a run() method, so option C is the correct answer. If the code was fixed to use the correct method name, then it would complete without issue, printing XXXXXXXXXXDone! at runtime. The f.get() call will block and wait for the results before moving on to the next iteration of the for loop."
    },
    {
      "number": 3,
      "answers": ["A", "D"],
      "explanation": "Option A is correct, as ExecutorService does not define nor inherit an overloaded method execute() that takes a Callable parameter. ExecutorService defines two shutdown methods, shutdown() and shutdownNow(), one of which is shown in option B. Option D is correct, as exit() does not exist and is not one of the shutdown methods. The ExecutorService interface defines the two submit() methods shown in options C and E. Because ExecutorService extends Executor, it also inherits the execute(Runnable) method presented in option F."
    },
    {
      "number": 4,
      "answers": ["F"],
      "explanation": "The code compiles and runs without issue. Even though the thread-safe AtomicBoolean is used, it is not used in a thread-safe manner. The flip() method first retrieves the value and then sets a new value. These two calls are not executed together in an atomic or synchronized manner. For this reason, the output could be true or false, with one or more of the flips possibly being lost, and making option F correct."
    },
    {
      "number": 5,
      "answers": ["C"],
      "explanation": "Option A is incorrect, although it would be correct if Executor were replaced with ExecutorService. Option B is also incorrect, but it would be correct if start() were replaced with run(). Option C is correct and is a common way to define an asynchronous task using a lambda expression. Option D is incorrect, as Runnable does not inherit a begin() method."
    },
    {
      "number": 6,
      "answers": ["B"],
      "explanation": "The code compiles and is thread-safe, since the call to step() is synchronized on the same object. The calls to interrupt() have no effect because the threads are never in a waiting state. For this reason, the output is always 10, making option B correct."
    },
    {
      "number": 7,
      "answers": ["A"],
      "explanation": "If the tryLock() method returns true, then a lock is acquired that must be released. That means the lockUp() method actually contains two calls to lock the object and only one call to unlock it. For this reason, the first thread to reach tryLock() obtains a lock that is never released. For this reason, Locked! is printed only once, and option A is correct. If the call to lock() inside the if statement were removed, then the expected output would be to print the statement five times."
    },
    {
      "number": 8,
      "answers": ["C", "D"],
      "explanation": "The class compiles and runs without throwing an exception, making option C correct and options A, B, and F incorrect. The class defines two values that are incremented by multiple threads in parallel. The first IntStream statement uses an atomic class to update a variable. Since updating an atomic numeric instance is thread-safe by design, the first number printed is always 100, making option D correct. The second IntStream statement uses an int with the pre-increment operator (++), which is not thread-safe. It is possible two threads could update and set the same value at the same time, a form of race condition, resulting in a value less than 500 and making option E incorrect."
    },
    {
      "number": 9,
      "answers": ["C"],
      "explanation": "CopyOnWriteArrayList makes a copy of the array every time it is modified, preserving the original list of values the iterator is using, even as the array is modified. For this reason, the for loop using copy1 does not throw an exception at runtime. On the other hand, the for loops using copy2 and copy3 both throw ConcurrentModificationException at runtime since neither allows modification while they are being iterated upon. Finally, the ConcurrentLinkedQueue used in copy4 completes without throwing an exception at runtime. For the exam, remember that the Concurrent classes order read/write access such that access to the class is consistent across all threads and processes, while the synchronized classes do not. Because exactly two of the for statements produce exceptions at runtime, option C is the correct answer."
    },
    {
      "number": 10,
      "answers": ["C"],
      "explanation": "Resource starvation is when a single active thread is perpetually unable to gain access to a shared resource. Livelock is a special case of resource starvation, in which two or more active threads are unable to gain access to shared resources, repeating the process over and over again. For these reasons, option C is the correct answer. Deadlock and livelock are similar, although in a deadlock situation the threads are stuck waiting, rather than being active or performing any work. Finally, a race condition is an undesirable result when two tasks that should be completed sequentially are completed at the same time."
    },
    {
      "number": 11,
      "answers": ["A"],
      "explanation": "Even though a parallel stream is used, the forEachOrdered() method forces the stream to operate in the order of its data source. The code compiles and runs without issue, printing 12345 every time and making option A correct. If forEach() were used instead, then the output would vary at runtime."
    },
    {
      "number": 12,
      "answers": ["E"],
      "explanation": "The class does not compile because the bosses.get() on line 8 throws a checked InterruptedException and a checked ExecutionException, neither of which is handled nor declared by the submitReports() method. For this reason, option E is correct."
    },
    {
      "number": 13,
      "answers": ["A", "B"],
      "explanation": "Options C, D, E, and F are all proper ways to obtain instances of ExecutorService. Remember that newSingleThreadExecutor() is equivalent to calling newFixedThreadPool(int) with a value of 1. The correct answers are options A and B, as neither of these methods exists."
    },
    {
      "number": 14,
      "answers": ["A"],
      "explanation": "The code compiles without issue but hangs indefinitely at runtime. The application defines a thread executor with a single thread and 12 submitted tasks. Because only one thread is available to work at a time, the first thread will wait endlessly on the call to await(). Since the CyclicBarrier requires four threads to release it, the application waits endlessly in a frozen condition. Since the barrier is never reached and the code hangs, the application will never output Ready, making option A the correct answer."
    },
    {
      "number": 15,
      "answers": ["E"],
      "explanation": "Trick question! ExecutorService does not contain any of these methods. To obtain an instance of a thread executor, you need to use the Executors factory class. For this reason, option E is the correct answer. If the question had instead asked which Executors method to use, then the correct answer would be option C."
    },
    {
      "number": 16,
      "answers": ["C"],
      "explanation": "Part of synchronizing access to a variable is ensuring that read/write operations are atomic or happen without interruption. For example, an increment operation requires reading a value and then immediately writing it. If any thread interrupts this process, then data could be lost. In this regard, option C shows proper synchronized access. Thread 2 reads a value and then writes it without interruption. Thread 1 then reads the new value and writes it. The rest of the answers are incorrect because one thread writes data to the variable in between another thread reading and writing to the same variable."
    },
    {
      "number": 17,
      "answers": ["A", "C", "F"],
      "explanation": "The increment operators on the first two numbers are not thread-safe, so the output could be 100 or a number less than 100, making options A and C correct. Remember, the volatile attribute does not guarantee thread safety. The last number printed is incremented in a thread-safe manner, making option F the other correct answer."
    },
    {
      "number": 18,
      "answers": ["F"],
      "explanation": "The code compiles and runs without issue. The two methods hare() and tortoise() are nearly identical, with one calling invokeAll() and the other calling invokeAny(). Calling the invokeAll() method causes the current thread to wait until all tasks are finished, while calling the invokeAny() method will cause the current thread to wait until at least one task is complete. Both ExecutorService methods operate synchronously, waiting for a result from one or more tasks, but each method call has been submitted to the thread executor as an asynchronous task. For this reason, both methods will take about one second to complete, and since either can finish first, the output will vary at runtime, making option F correct. Note that this program does not terminate, since the ExecutorService is not shut down."
    },
    {
      "number": 19,
      "answers": ["B", "D"],
      "explanation": "ConcurrentSkipList does not exist as a concurrent collection, making option A incorrect. ConcurrentSkipListSet implements the SortedSet interface, in which the elements are kept sorted, making option B correct. ConcurrentSkipListMap implements the SortedMap interface, in which the keys are kept sorted, making option D correct. The other options define structures that are ordered, but not sorted. Remember, if you see SkipList as part of a concurrent class name, it means it is sorted in some way."
    },
    {
      "number": 20,
      "answers": ["C"],
      "explanation": "The code compiles without issue, so options D and E are incorrect. The f1 declaration uses the version of submit() in ExecutorService, which takes a Runnable and returns a Future<?>, while the f2 declaration uses an overloaded version of submit(), which takes a Callable expression and returns a generic Future object. The call f1.get() waits until the task is finished and always returns null, since Runnable expressions have a void return type, so [Filing]null is printed first. The call to the f2.get() return then prints 3.14159. For these reasons, option C is the correct answer."
    },
    {
      "number": 21,
      "answers": ["C", "D"],
      "explanation": "The code compiles and runs without issue. While an AtomicLong is used, there are two calls on this variable, the first to retrieve the value and the second to set the new value. These two calls are not executed together in an atomic or synchronized manner. For this reason, the incrementBy10() method is not thread-safe, and option C is correct. That said, the code performs in a single-threaded manner at runtime because the call to get() in the main() method waits for each thread to finish. For this reason, the output is consistently 1000, making option D correct."
    },
    {
      "number": 22,
      "answers": ["D"],
      "explanation": "The synchronized block used in the getQuestion() method requires an object to synchronize on. Without it, the code does not compile, and option D is the correct answer."
    },
    {
      "number": 23,
      "answers": ["B"],
      "explanation": "Options A, D, and E include method names that do not exist in ScheduledExecutorService. The scheduleAtFixedRate() method creates a new task for the associated action at a set time interval, even if previous tasks for the same action are still active. In this manner, multiple threads working on the same action could be executing at the same time, making option B the correct answer. On the other hand, scheduleWithFixedDelay() waits until each task is completed before scheduling the next task, guaranteeing at most one thread working on the action is active in the thread pool."
    },
    {
      "number": 24,
      "answers": ["F"],
      "explanation": "The application compiles, so option D is incorrect. The stroke variable is thread-safe in the sense that no write is lost since all writes are wrapped in a synchronized method, making option E incorrect. The issue here is that the main() method reads the value of getStroke() while tasks may still be executing within the ExecutorService. The shutdown() method stops new tasks from being submitted but does not wait for previously submitted tasks to complete. Therefore, the result may output 0, 1000, or anything in between, making option F the correct answer. If the ExecutorService method awaitTermination() is called before the value of stroke is printed and enough time elapses, then the result would be 1000 every time."
    },
    {
      "number": 25,
      "answers": ["C"],
      "explanation": "A race condition is an undesirable result when two tasks that should be completed sequentially are completed at the same time. The result is often corruption of data in some way. If two threads are both modifying the same int variable and there is no synchronization, then a race condition can occur with one of the writes being lost. For this reason, option C is the correct answer. Option A is the description of resource starvation. Options D and E are describing livelock and deadlock, respectively, while option B is the potential result of either of those events occurring."
    },
    {
      "number": 26,
      "answers": ["B"],
      "explanation": "The class compiles without issue. The class attempts to create a synchronized version of a List<Integer>. The size() and addValue() methods help synchronize the read/write operations. Unfortunately, the getValue() method is not synchronized so the class is not thread-safe, and option B is the correct answer. It is possible that one thread could add to the data object while another thread is reading from the object, leading to an unexpected result."
    },
    {
      "number": 27,
      "answers": ["D"],
      "explanation": "The post-decrement operator (--) decrements a value but returns the original value. It is equivalent to the atomic getAndDecrement() method. The pre-increment operator (++) increments a value and then returns the new value. It is equivalent to the incrementAndGet() atomic operation. For these reasons, option D is the correct answer."
    },
    {
      "number": 28,
      "answers": ["F"],
      "explanation": "A List instance, which inherits the Collection interface, does not have a parallel() method. Instead, parallelStream() must be used, making option F correct. If the code was corrected to use parallelStream(), then the first and third streams would be consistently printed in the same order. Remember that the forEachOrdered() method forces parallel streams to run in sequential order. The order of the second operation would be unknown ahead of time, since it uses a parallel stream."
    },
    {
      "number": 29,
      "answers": ["C"],
      "explanation": "Line 13 does not compile because the execute() method has a return type of void, not Future. Line 15 does not compile because scheduleAtFixedRate() requires four arguments that include an initial delay and period value. For these two reasons, option C is the correct answer."
    },
    {
      "number": 30,
      "answers": ["B"],
      "explanation": "When a CyclicBarrier goes over its limit, the barrier count is reset to zero. The application defines a CyclicBarrier with a barrier limit of five threads. The application then submits 12 tasks to a cached executor service. In this scenario, a cached thread executor will use between five and 12 threads, reusing existing threads as they become available. In this manner, there is no worry about running out of available threads. The barrier will then trigger twice, printing five values for each of the sets of threads, for a total of ten W characters. For this reason, option B is the correct answer."
    },
    {
      "number": 31,
      "answers": ["D"],
      "explanation": "The application does not terminate successfully nor does it produce an exception at runtime, making options A and B incorrect. It hangs at runtime because the CyclicBarrier limit is 5, while the number of tasks submitted and awaiting activation is 12. This means that two of the tasks will be left over, stuck in a deadlocked state, waiting for the barrier limit to be reached but with no more tasks available to trigger it. For this reason, option D is the correct answer. If the number of tasks were a multiple of the barrier limit, such as 15 instead of 12, then the application would still hang because the ExecutorService is never shut down, and option C would be correct. The isShutdown() call in the application finally block does not trigger a shutdown. Instead, shutdown() should have been used."
    },
    {
      "number": 32,
      "answers": ["B"],
      "explanation": "First, the class uses a synchronized list, which is thread-safe and allows modification from multiple threads, making option E incorrect. The process generates a stream of numbers from 1 to 5 and sends them into a parallel stream where the map() is applied, possibly out of order. This results in elements being written to db in a random order. The stream then applies the forEachOrdered() method to its elements, which will force the parallel stream into a single-threaded state. At runtime, line p1 will print the results in order every time as 12345. On the other hand, since the elements were added to db in a random order, the output of line p2 is random and cannot be predicted ahead of time. Since the results may sometimes be the same, option B is the correct answer. Part of the reason that the results are indeterminate is that the question uses a stateful lambda expression, which based on your studies should be avoided!"
    },
    {
      "number": 33,
      "answers": ["C"],
      "explanation": "The Lock interface does not include an overloaded version of lock() that takes a timeout value and returns a boolean. For this reason, the code does not compile, and option C is correct. If tryLock(long,TimeUnit) had been used instead of lock(), then the program would have been expected to print 'TV Time' three times at runtime."
    },
    {
      "number": 34,
      "answers": ["B"],
      "explanation": "The for loops using copy1 and copy4 both throw a ConcurrentModificationException at runtime, since neither allows modification while they are being iterated upon. Next, CopyOnWriteArrayList makes a copy of the collection every time it is modified, preserving the original list of values the iterator is using. For this reason, the for loop using copy2 completes without throwing an exception or creating an infinite loop. On the other hand, the loop with copy3 enters an infinite loop at runtime. Each time a new value is inserted, the iterator is updated, and the process repeats. Since this is the only statement that produces an infinite loop, option B is correct."
    },
    {
      "number": 35,
      "answers": ["E"],
      "explanation": "The shutdown() method prevents new tasks from being added but allows existing tasks to finish. In addition to preventing new tasks from being added, the shutdownNow() method also attempts to stop all running tasks. Neither of these methods guarantees any task will be stopped, making option E the correct answer. Options C and D are incorrect because they name methods that do not exist in ExecutorService."
    },
    {
      "number": 36,
      "answers": ["E"],
      "explanation": "The program compiles and does not throw an exception at runtime. The class attempts to add and remove values from a single cookie variable in a thread-safe manner but fails to do so because the deposit() and withdrawal() methods synchronize on different objects. The instance method deposit() synchronizes on the bank object, while the static method withdrawal() synchronizes on the static Bank.class object. Since the compound assignment operators (+=) and (-=) are not thread-safe, it is possible for one call to modify the value of cookies while the other is already operating on it, resulting in a loss of information. For this reason, the output cannot be predicted, and option E is the correct answer. If the two methods were synchronized on the same object, then the cookies variable would be protected from concurrent modifications, printing 0 at runtime."
    },
    {
      "number": 37,
      "answers": ["A"],
      "explanation": "The code attempts to search for a matching element in an array using multiple threads. While it does not contain any compilation problems, it does contain an error. Despite creating Thread instances, it is not a multithreaded program. Calling run() on a Thread runs the process as part of the current thread. To be a multithreaded execution, it would need to instead call the start() method. For this reason, the code completes synchronously, waiting for each method call to return before moving on to the next and printing true at the end of the execution, making option A the correct answer. On the other hand, if start() had been used, then the application would be multithreaded but not thread-safe. The calls to update foundMatch are not synchronized, and even if they were, the result might not be available by the time print() in the main() method was called. For this reason, the result would not be known until runtime."
    },
    {
      "number": 38,
      "answers": ["D"],
      "explanation": "The forEachOrdered() method is available on streams, not collections. For this reason, line q1 does not compile, and option D is correct. If the forEach() method were used instead, then the code would compile with the values printed on line q1 varying at runtime and the values printed on line q2 being consistent."
    },
    {
      "number": 39,
      "answers": ["B", "C", "F"],
      "explanation": "The use of the volatile attribute in this program does not have any impact, as volatile does not guarantee thread-safety. The first operation is thread-safe because an AtomicInteger is used, making option B correct. The second operation is not thread-safe because ++ is used in an unsafe manner, making option C correct. The last operation is thread-safe because it is synchronized on the same object, making option F correct."
    },
    {
      "number": 40,
      "answers": ["B", "D"],
      "explanation": "The reduce() operation used is safe for both serial and parallel streams; therefore, the output for both operations is always 11, making options B and D correct."
    }
  ]
}