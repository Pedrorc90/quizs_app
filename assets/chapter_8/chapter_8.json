{
  "questions": [
    {
      "number": 1,
      "question": "1. How many times does the following code print How rude! at runtime?",
      "code": "public class Speaking {\n   void talk() {\n      try {\n         Thread.sleep(10_000);\n      } catch (InterruptedException e) {\n         System.out.println(\"How rude!\");\n      } }\n   public static void main(String[] args) {\n      var s = new Speaking();\n      var t = new Thread(() -> s.talk());\n      t.run();\n      t.interrupt();\n      t.interrupt();\n      t.interrupt();\n   } }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. The code does not compile.",
        "F. The code compiles but an exception is printed at runtime."
      ]
    },
    {
      "number": 2,
      "question": "2. What is the output of the following code snippet?",
      "code": "Callable c = new Callable() {\n   public Object run() {\n      System.out.print(\"X\");\n      return 10;\n   }\n};\nvar s = Executors.newScheduledThreadPool(1);\nfor(int i=0; i<10; i++) {\n   Future f = s.submit(c);\n   f.get();\n}\ns.shutdown();\nSystem.out.print(\"Done!\");",
      "choices": [
        "A. XXXXXXXXXXDone!",
        "B. Done!XXXXXXXXXX",
        "C. The code does not compile.",
        "D. The code hangs indefinitely at runtime.",
        "E. The code throws an exception at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 3,
      "question": "3. Which of the following methods is not available on an ExecutorService instance? (Choose two.)",
      "choices": [
        "A. execute(Callable)",
        "B. shutdownNow()",
        "C. submit(Runnable)",
        "D. exit()",
        "E. submit(Callable)",
        "F. execute(Runnable)"
      ]
    },
    {
      "number": 4,
      "question": "4. The following program simulates flipping a coin an even number of times. Assuming five seconds is enough time for all of the tasks to finish, what is the output of the following application?",
      "code": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\npublic class Luck {\n   private AtomicBoolean coin = new AtomicBoolean(false);\n   void flip() {\n      coin.getAndSet(!coin.get());\n   }\n   public static void main(String[] gamble) throws Exception {\n      var luck = new Luck();\n      ExecutorService s = Executors.newCachedThreadPool();\n      for(int i=0; i<1000; i++) {\n         s.execute(() -> luck.flip());\n      }\n      s.shutdown();\n      Thread.sleep(5000);\n      System.out.println(luck.coin.get());\n   } }",
      "choices": [
        "A. false",
        "B. true",
        "C. The code does not compile.",
        "D. The code hangs indefinitely at runtime.",
        "E. The code throws an exception at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 5,
      "question": "5. Which of the following is a recommended way to define an asynchronous task?",
      "choices": [
        "A. Create a Callable expression and pass it to an instance of an Executor.",
        "B. Create a class that extends Thread and override the start() method.",
        "C. Create a Runnable lambda expression and pass it to a Thread constructor.",
        "D. Create an anonymous Runnable class that overrides the begin() method.",
        "E. All of the above."
      ]
    },
    {
      "number": 6,
      "question": "6. Assuming five seconds is enough time for the threads in this program to complete, what is the expected result of executing the following program?",
      "code": "import java.util.*;\npublic class Dance {\n   int count = 0;\n   synchronized int step() { return count++; }\n   public static void main(String[] args) throws InterruptedException {\n      var waltz = new Dance();\n      var dancers = new ArrayList<Thread>();\n\n      for(int i=0; i<10; i++)\n         dancers.add(new Thread(() -> waltz.step()));\n      for(Thread dancer : dancers)\n         dancer.start();      \n      dancers.forEach(d -> d.interrupt());\n\n      Thread.sleep(5_000);\n      System.out.print(waltz.count);\n   } }",
      "choices": [
        "A. It always prints a number less than 10.",
        "B. It always prints 10.",
        "C. It may print 10 or a number less than 10.",
        "D. The code does not compile.",
        "E. The code compiles but an exception is printed at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 7,
      "question": "7. Given the following program, how many times is Locked! expected to be printed?",
      "code": "import java.util.concurrent.locks.*;\npublic class Padlock {\n   private Lock lock = new ReentrantLock();\n   public void lockUp() {\n      if (lock.tryLock()) {\n        lock.lock();\n         System.out.println(\"Locked!\");\n         lock.unlock();\n      }\n   }\n   public static void main(Stringâ€¦ unused) throws Exception {\n      var gate = new Padlock();\n      for(int i=0; i<5; i++) {\n         new Thread(() -> gate.lockUp()).start();\n         Thread.sleep(1_000);\n      } } }",
      "choices": [
        "A. One time.",
        "B. Five times.",
        "C. The code does not compile.",
        "D. The code hangs indefinitely at runtime.",
        "E. The code throws an exception at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 8,
      "question": "8. Which statements about the following application are correct? (Choose two.)",
      "code": "import java.util.concurrent.atomic.*;\nimport java.util.stream.*;\npublic class TicketTaker {\n   long ticketsSold;\n   final AtomicInteger ticketsTaken;\n   public TicketTaker() {\n      ticketsSold = 0;\n      ticketsTaken = new AtomicInteger(0);\n   }\n   public void performJob() {\n      IntStream.iterate(1, p -> p+1)\n         .parallel()\n         .limit(100)\n         .forEach(i -> ticketsTaken.getAndIncrement());\n      IntStream.iterate(1, q -> q+1)\n         .parallel()\n         .limit(500)\n         .forEach(i -> ++ticketsSold);\n      System.out.print(ticketsTaken+\" \"+ticketsSold);\n   }\n   public static void main(String[] matinee) {\n      new TicketTaker().performJob();\n   } }",
      "choices": [
        "A. The TicketTaker constructor does not compile.",
        "B. The performJob() method does not compile.",
        "C. The class compiles.",
        "D. The first number printed is consistently 100.",
        "E. The second number printed is consistently 500.",
        "F. A ConcurrentModificationException is thrown at runtime."
      ]
    },
    {
      "number": 9,
      "question": "9. Given the original array, how many of the following for statements result in an exception at runtime, assuming each is executed independently?",
      "code": "var original = List.of(1,2,3,4,5);\n\nvar copy1 = new CopyOnWriteArrayList<Integer>(original);\nfor(Integer w : copy1)\n   copy1.remove(w);\n\nvar copy2 = Collections.synchronizedList(original);\nfor(Integer w : copy2)\n   copy2.remove(w);\n\nvar copy3 = new ArrayList<Integer>(original);\nfor(Integer w : copy3)\n   copy3.remove(w);\n\nvar copy4 = new ConcurrentLinkedQueue<Integer>(original);\nfor(Integer w : copy4)\n   copy4.remove(w);",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. The code does not compile."
      ]
    },
    {
      "number": 10,
      "question": "10. Fill in the blanks: ______________ is a special case of ______________, in which two or more active threads try to acquire the same set of locks and are repeatedly unsuccessful.",
      "choices": [
        "A. Deadlock, livelock",
        "B. Deadlock, resource starvation",
        "C. Livelock, resource starvation",
        "D. Resource starvation, race conditions",
        "E. Resource starvation, livelock",
        "F. None of the above"
      ]
    },
    {
      "number": 11,
      "question": "11. What is the output of the following program?",
      "code": "import java.util.stream.*;\npublic class Bull {\n   void charge() {\n      IntStream.range(1,6)\n         .parallel()\n         .forEachOrdered(System.out::print);\n   }\n   public static void main(String[] args) {\n      var b = new Bull();\n      b.charge();\n   } }",
      "choices": [
        "A. 12345",
        "B. 54321",
        "C. The output cannot be determined ahead of time.",
        "D. The code does not compile.",
        "E. An exception is thrown at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 12,
      "question": "What is the output of the following application?",
      "code": " 3:  public class TpsReport {\n 4:     public void submitReports() {\n 5:        var s = Executors.newCachedThreadPool();\n 6:        Future bosses = s.submit(() -> System.out.print(\"1\"));\n 7:        s.shutdown();\n 8:        System.out.print(bosses.get());\n 9:     }\n 10:    public static void main(String[] memo) {\n 11:       new TpsReport().submitReports();\n 12:    } }\n",
      "choices": [
        "A. null",
        "B. 1null",
        "C. 1",
        "D. Line 6 does not compile.",
        "E. Line 8 does not compile.",
        "F. An exception is thrown at runtime."
      ]
    },
    {
      "number": 13,
      "question": "Which of the following static methods do not exist in the Executors class? (Choose two.)",
      "choices": [
        "A. newFixedScheduledThreadPool()",
        "B. newThreadPool()",
        "C. newFixedThreadPool(int)",
        "D. newSingleThreadExecutor()",
        "E. newScheduledThreadPool(int)",
        "F. newSingleThreadScheduledExecutor()"
      ]
    },
    {
      "number": 14,
      "question": "How many times does the following application print Ready at runtime?",
      "code": "package parade;\nimport java.util.concurrent.*;\npublic class CartoonCat {\n   private void await(CyclicBarrier c) {\n      try {\n         c.await();\n      } catch (Exception e) {}\n   }\n   public void march(CyclicBarrier c) {\n      var s = Executors.newSingleThreadExecutor();\n      for(int i=0; i<12; i++)\n         s.execute(() -> await(c));\n      s.shutdown();\n   }\n   public static void main(Stringâ€¦ strings) {\n      new CartoonCat().march(new CyclicBarrier(4,\n            () -> System.out.println(\"Ready\")));\n   } }\n",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Three",
        "D. The code does not compile.",
        "E. An exception is thrown at runtime."
      ]
    },
    {
      "number": 15,
      "question": "Let's say you needed a thread executor to create tasks for a CyclicBarrier that has a barrier limit of five threads. Which static method in ExecutorService should you use to obtain it?",
      "choices": [
        "A. newSingleThreadExecutor()",
        "B. newSingleThreadScheduledExecutor()",
        "C. newCachedThreadPool()",
        "D. newFixedThreadPool(2)",
        "E. None of the above"
      ]
    },
    {
      "number": 16,
      "question": "The following diagrams represent the order of read/write operations of two threads sharing a common variable. Each thread first reads the value of the variable from memory and then writes a new value of the variable back to memory. Which diagram demonstrates proper synchronization?",
      "choices": [
        "A. ",
        "B. ",
        "C. ",
        "D. "
      ]
    },
    {
      "number": 17,
      "question": "What is the output of the following program? (Choose three.)",
      "code": " import java.util.concurrent.atomic.*;\n import java.util.stream.*;\n public class Circus {\n    private static int seal = 0;\n    private static volatile int tiger = 0;\n    private static AtomicInteger lion = new AtomicInteger(0);\n    public static void main(String[] tent) {\n       Stream.iterate(0, x -> x + 1)\n          .parallel()\n          .limit(100)\n          .forEach(q -> {seal++; tiger++; lion.incrementAndGet();});\n       System.out.println(seal + \",\" + tiger + \",\"+ lion);\n    } }\n",
      "choices": [
        "A. The first number printed may be less than 100.",
        "B. The first number printed is always 100.",
        "C. The second number printed may be less than 100.",
        "D. The second number printed is always 100.",
        "E. The third number printed may be less than 100.",
        "F. The third number printed is always 100."
      ]
    },
    {
      "number": 18,
      "question": "What is the output of the following application?",
      "code": " import java.util.*;\n import java.util.concurrent.*;\n public class Race {\n    ExecutorService service = Executors.newFixedThreadPool(8);\n    public static int sleep() {\n       try { Thread.sleep(1000); } catch (Exception e) {}\n       return 1;\n    }\n    public void hare() {\n       try {\n          Callable<Integer> c = () -> sleep();\n          final var r = List.of(c,c,c);\n          var results = service.invokeAll(r);\n          System.out.println(\"Hare won the race!\");\n       } catch (Exception e) {e.printStackTrace();}\n    }\n    public void tortoise() {\n       try {\n          Callable<Integer> c = () -> sleep();\n          final var r = List.of(c,c,c);\n          Integer result = service.invokeAny(r);\n          System.out.println(\"Tortoise won the race!\");\n       } catch (Exception e) {e.printStackTrace();}\n    }\n    public static void main(String[] p) throws Exception {\n       var race = new Race();\n       race.service.execute(() -> race.hare());\n       race.service.execute(() -> race.tortoise());\n    } }\n",
      "choices": [
        "A. Hare won the race! is printed first.",
        "B. Tortoise won the race! is printed first.",
        "C. The code does not compile.",
        "D. The code hangs indefinitely at runtime.",
        "E. The code throws an exception at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 19,
      "question": "Which of the following concurrent collections is sorted? (Choose two.)",
      "choices": [
        "A. ConcurrentSkipList",
        "B. ConcurrentSkipListSet",
        "C. CopyOnWriteArrayList",
        "D. ConcurrentSkipListMap",
        "E. ConcurrentLinkedQueue",
        "F. LinkedBlockingQueue"
      ]
    },
    {
      "number": 20,
      "question": "What is the output of the following application?",
      "code": "package taxes;\nimport java.util.concurrent.*;\npublic class Accountant {\n   public static void completePaperwork() {\n      System.out.print(\"[Filing]\");\n   }\n   public static double getPi() {\n      return 3.14159;\n   }\n   public static void main(String[] args) throws Exception {\n      ExecutorService x = Executors.newSingleThreadExecutor();\n      Future<?> f1 = x.submit(() -> completePaperwork());\n      Future<Object> f2 = x.submit(() -> getPi());\n      System.out.print(f1.get()+\" \"+f2.get());\n      x.shutdown();\n   }\n}",
      "choices": [
        "A. [Filing]",
        "B. [Filing]3.14159",
        "C. [Filing]null 3.14159",
        "D. The declaration of f1 does not compile.",
        "E. The declaration of f2 does not compile.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 21,
      "question": "Assuming 10 seconds is enough time for all the tasks to finish, what statements about the following program are correct? (Choose two.)",
      "code": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\npublic class Clock {\n   private AtomicLong bigHand = new AtomicLong(0);\n   void incrementBy10() {\n      bigHand.getAndSet(bigHand.get() + 10);\n   }\n   public static void main(String[] c) throws Exception {\n      var smartWatch = new Clock();\n      ExecutorService s = Executors.newCachedThreadPool();\n      for(int i=0; i<100; i++) {\n         s.submit(() -> smartWatch.incrementBy10()).get();\n      }\n      s.shutdown();\n      s.awaitTermination(10, TimeUnit.SECONDS);\n      System.out.println(smartWatch.bigHand.get());\n   }\n}",
      "choices": [
        "A. The code does not compile.",
        "B. The incrementBy10() method is thread-safe.",
        "C. The incrementBy10() method is not thread-safe.",
        "D. The output is 1000 on every execution.",
        "E. The output cannot be determined ahead of time.",
        "F. The code hangs indefinitely at runtime."
      ]
    },
    {
      "number": 22,
      "question": "What is the most likely result of executing the following application?",
      "code": "package jokes;\nimport java.util.concurrent.*;\npublic class Riddle {\n   public void sleep() {\n      try { Thread.sleep(5000); } catch (Exception e) {}\n   }\n   public String getQuestion(Riddle r) {\n      synchronized {\n         sleep();\n         if(r != null) r.getAnswer(null);\n         return \"How many programmers does it take \"\n               + \"to change a light bulb?\";\n      } }\n   public synchronized String getAnswer(Riddle r) {\n      sleep();\n      if(r != null) r.getAnswer(null);\n      return \"None, that's a hardware problem\";\n   }\n   public static void main(Stringâ€¦ ununused) {\n      var r1 = new Riddle();\n      var r2 = new Riddle();\n      var s = Executors.newFixedThreadPool(2);\n      s.submit(() -> r1.getQuestion(r2));\n      s.execute(() -> r2.getAnswer(r1));\n      s.shutdown();\n   }\n}",
      "choices": [
        "A. A deadlock is produced at runtime.",
        "B. A livelock is produced at runtime.",
        "C. The application completes successfully.",
        "D. The code does not compile.",
        "E. The code hangs indefinitely at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 23,
      "question": "Which ScheduledExecutorService method can result in the same action being executed by two threads at the same time?",
      "choices": [
        "A. scheduleAtFixedDelay()",
        "B. scheduleAtFixedRate()",
        "C. scheduleWithFixedDelay()",
        "D. scheduleAtSameRate()",
        "E. scheduleWithRate()",
        "F. None of the above"
      ]
    },
    {
      "number": 24,
      "question": "What is the output of the following application?",
      "code": "package olympics;\nimport java.util.concurrent.*;\npublic class Athlete {\n   int stroke = 0;\n   public synchronized void swimming() {\n      stroke++;\n   }\n   private int getStroke() {\n      synchronized(this) { return stroke; }\n   }\n   public static void main(Stringâ€¦ laps) {\n      ExecutorService s = Executors.newFixedThreadPool(10);\n      Athlete a = new Athlete();\n      for(int i=0; i<1000; i++) {\n         s.execute(() -> a.swimming());\n      }\n      s.shutdown();\n      System.out.print(a.getStroke());\n   }\n}",
      "choices": [
        "A. A deadlock is produced at runtime.",
        "B. A livelock is produced at runtime.",
        "C. 1000",
        "D. The code does not compile.",
        "E. The result is unknown until runtime because stroke is not written in a thread-safe manner and a write may be lost.",
        "F. None of the above."
      ]
    },
    {
      "number": 25,
      "question": "Which of the following is most likely to be caused by a race condition?",
      "choices": [
        "A. A thread perpetually denied access to a resource",
        "B. A program hanging indefinitely",
        "C. An int variable incorrectly reporting the number of times an operation was performed",
        "D. Two threads actively trying to restart a blocked process that is guaranteed to always end the same way",
        "E. Two threads endlessly waiting on each other to release shared locks"
      ]
    },
    {
      "number": 26,
      "question": "Which statement about the following class is correct?",
      "code": "package my;\nimport java.util.*;\npublic class ThreadSafeList {\n   private List<Integer> data = new ArrayList<>();\n   public synchronized void addValue(int value) {\n      data.add(value);\n   }\n   public int getValue(int index) {\n      return data.get(index);\n   }\n   public int size() {\n      synchronized(ThreadSafeList.class) {\n         return data.size();\n      } }\n}",
      "choices": [
        "A. The code compiles and is thread-safe.",
        "B. The code compiles and is not thread-safe.",
        "C. The code does not compile because of the size() method.",
        "D. The code does not compile because of the getValue() method.",
        "E. The code does not compile for another reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 27,
      "question": "Which two method names, when filled into the print2() method, produce the same output as the print1() method? Assume the input arguments for each represent the same non-null numeric value.",
      "code": "public static synchronized void print1(int counter) {\n   System.out.println(counter--);\n   System.out.println(++counter);\n}\n\npublic static synchronized void print2(AtomicInteger counter) {\n   System.out.println(counter._________________);\n   System.out.println(counter._________________);\n}",
      "choices": [
        "A. decrementAndGet() and getAndIncrement()",
        "B. decrementAndGet() and incrementAndGet()",
        "C. getAndDecrement() and getAndIncrement()",
        "D. getAndDecrement() and incrementAndGet()",
        "E. None of the above"
      ]
    },
    {
      "number": 28,
      "question": "What is the result of executing the following application multiple times?",
      "code": "package bears;\nimport java.util.*;\npublic class Bounce {\n   public static void main(Stringâ€¦ legend) {\n      List.of(1,2,3,4).stream()\n         .forEach(System.out::println);\n      List.of(1,2,3,4).parallel()\n         .forEach(System.out::println);\n      List.of(1,2,3,4).parallel()\n         .forEachOrdered(System.out::println);\n   }\n}",
      "choices": [
        "A. Only the first stream prints the same order every time.",
        "B. Only the first and second streams print the same order every time.",
        "C. Only the first and third streams print the same order every time.",
        "D. All of the streams print the same order every time.",
        "E. None of the streams prints the same order every time.",
        "F. None of the above."
      ]
    },
    {
      "number": 29,
      "question": "How many lines of the following code snippet contain compilation errors?",
      "code": "11: ScheduledExecutorService t = Executors\n12:    .newSingleThreadScheduledExecutor();\n13: Future result = t.execute(System.out::println);\n14: t.invokeAll(null);\n15: t.scheduleAtFixedRate(() -> {return;},5,TimeUnit.MINUTES);",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. None of the above"
      ]
    },
    {
      "number": 30,
      "question": "How many times does the following application print W at runtime?",
      "code": "package crew;\nimport java.util.concurrent.*;\nimport java.util.stream.*;\npublic class Boat {\n   private void waitTillFinished(CyclicBarrier c) {\n      try {\n         c.await();\n         System.out.print(\"W\");\n      } catch (Exception e) {}\n   }\n   public void row(ExecutorService s) {\n      var cb = new CyclicBarrier(5);\n      IntStream.iterate(1, i-> i+1)\n         .limit(12)\n         .forEach(i -> s.submit(() -> waitTillFinished(cb)));\n   }\n   public static void main(String[] oars) {\n      ExecutorService service = null;\n      try {\n         service = Executors.newCachedThreadPool();\n         new Boat().row(service);\n      } finally {\n         service.isShutdown();\n      } }\n}",
      "choices": [
        "A. Zero.",
        "B. Ten.",
        "C. Twelve.",
        "D. The code does not compile.",
        "E. The output cannot be determined ahead of time.",
        "F. None of the above."
      ]
    },
    {
      "number": 31,
      "question": "Using the Boat class from the previous question, what is the final state of the application?",
      "choices": [
        "A. The application produces an exception at runtime.",
        "B. The application terminates successfully.",
        "C. The application hangs indefinitely because the ExecutorService is never shut down.",
        "D. The application hangs at runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 32,
      "question": "Given the following code snippet, what statement about the values printed on lines p1 and p2 is correct?",
      "code": "var db = Collections.synchronizedList(new ArrayList<>());\nIntStream.range(1,6)\n   .parallel()\n   .map(i -> {db.add(i); return i;})\n   .forEachOrdered(System.out::print);  // p1\nSystem.out.println();\ndb.forEach(System.out::print);          // p2",
      "choices": [
        "A. They are always the same.",
        "B. They are sometimes the same.",
        "C. They are never the same.",
        "D. The code does not compile.",
        "E. The code will produce a ConcurrentModificationException at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 33,
      "question": "Given the following program, how many times is TV Time expected to be printed? Assume 10 seconds is enough time for each task created by the program to complete.",
      "code": "import java.util.concurrent.*;\nimport java.util.concurrent.locks.*;\npublic class Television {\n   private static Lock myTurn = new ReentrantLock();\n   public void watch() {\n      try {\n         if (myTurn.lock(5, TimeUnit.SECONDS)) {\n            System.out.println(\"TV Time\");\n            myTurn.unlock();\n         }\n      } catch (InterruptedException e) {}\n   }\n   public static void main(String[] t) throws Exception {\n      var newTv = new Television();\n      for (int i = 0; i < 3; i++) {\n         new Thread(() -> newTv.watch()).start();\n         Thread.sleep(10*1000);\n      }\n   }\n}",
      "choices": [
        "A. One time.",
        "B. Three times.",
        "C. The code does not compile.",
        "D. The code hangs indefinitely at runtime.",
        "E. The code throws an exception at runtime.",
        "F. The output cannot be determined ahead of time."
      ]
    },
    {
      "number": 34,
      "question": "Given the original array, how many of the following for statements enter an infinite loop at runtime, assuming each is executed independently?",
      "code": "var original = new ArrayList<Integer>(List.of(1,2,3));\n\nvar copy1 = new ArrayList<Integer>(original);\nfor(Integer q : copy1)\n   copy1.add(1);\n\nvar copy2 = new CopyOnWriteArrayList<Integer>(original);\nfor(Integer q : copy2)\n   copy2.add(2);\n\nvar copy3 = new LinkedBlockingQueue<Integer>(original);\nfor(Integer q : copy3)\n   copy3.offer(3);\n\nvar copy4 = Collections.synchronizedList(original);\nfor(Integer q : copy4)\n   copy4.add(4);",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. The code does not compile."
      ]
    },
    {
      "number": 35,
      "question": "Which ExecutorService method guarantees all running tasks are stopped in an orderly fashion?",
      "choices": [
        "A. shutdown()",
        "B. shutdownNow()",
        "C. halt()",
        "D. shutdownAndTerminate()",
        "E. None of the above"
      ]
    },
    {
      "number": 36,
      "question": "Assuming 10 seconds is enough time for all of the tasks to finish, what is the output of the following application?",
      "code": "import java.util.concurrent.*;\npublic class Bank {\n   static int cookies = 0;\n   public synchronized void deposit(int amount) {\n      cookies += amount;\n   }\n   public static synchronized void withdrawal(int amount) {\n      cookies -= amount;\n   }\n   public static void main(String[] amount) throws Exception {\n      var teller = Executors.newScheduledThreadPool(50);\n      Bank bank = new Bank();\n      for(int i=0; i<25; i++) {\n         teller.submit(() -> bank.deposit(5));\n         teller.submit(() -> bank.withdrawal(5));\n      }\n      teller.shutdown();\n      teller.awaitTermination(10, TimeUnit.SECONDS);\n       System.out.print(bank.cookies);\n   } }",
      "choices": [
        "A. 0",
        "B. 125",
        "C. -125",
        "D. The code does not compile.",
        "E. The result is unknown until runtime.",
        "F. An exception is thrown."
      ]
    },
    {
      "number": 37,
      "question": "What is the output of the following application?",
      "code": "import java.util.*;\npublic class SearchList<T> {\n   private List<T> data;\n   private boolean foundMatch = false;\n   public SearchList(List<T> list) {\n      this.data = list;\n   }\n   public void exists(T v,int start, int end) {\n      if(end-start==0) {}\n      else if(end-start==1) {\n         foundMatch = foundMatch || v.equals(data.get(start));\n      } else {\n         final int middle = start + (end-start)/2;\n         new Thread(() -> exists(v,start,middle)).run();\n         new Thread(() -> exists(v,middle,end)).run();\n      }\n   }\n   public static void main(String[] a) throws Exception {\n      List<Integer> data = List.of(1,2,3,4,5,6);\n      SearchList<Integer> t = new SearchList<Integer>(data);\n      t.exists(5, 0, data.size());\n      System.out.print(t.foundMatch);\n   } }",
      "choices": [
        "A. true",
        "B. false",
        "C. The code does not compile.",
        "D. The result is unknown until runtime.",
        "E. An exception is thrown.",
        "F. None of the above."
      ]
    },
    {
      "number": 38,
      "question": "Given the following code snippet, what statement about the values printed on lines q1 and q2 is correct?",
      "code": "var mitchsWorkout = new CopyOnWriteArrayList<Integer>();\nList.of(1,5,7,9).stream().parallel()\n   .forEach(mitchsWorkout::add);\nmitchsWorkout\n   .forEachOrdered(System.out::print);  // q1\nList.of(1,5,7,9).stream().parallel()\n   .forEachOrdered(System.out::print);  // q2",
      "choices": [
        "A. They are always the same.",
        "B. They are sometimes the same.",
        "C. They are never the same.",
        "D. The code does not compile.",
        "E. The code will produce a ConcurrentModificationException at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 39,
      "question": "What is the output of the following program? (Choose three.)",
      "code": "import java.util.concurrent.atomic.*;\nimport java.util.stream.*;\npublic class Moon {\n   private volatile AtomicLong green = new AtomicLong(0);\n   private volatile int cheese = 0;\n   private volatile int rocket = 0;\n   private void takeOff() {\n      Stream.iterate(0, x -> x + 1).parallel().limit(1000).forEach(q -> {\n         green.getAndIncrement();\n         cheese++;\n         synchronized (this) {\n            ++rocket;\n         }\n      });\n      System.out.println(green + \",\" + cheese + \",\" + rocket);\n   }\n   public static void main(String[] tent) {\n      new Moon().takeOff();\n   } }",
      "choices": [
        "A. The first number printed may be less than 1000.",
        "B. The first number printed is always 1000.",
        "C. The second number printed may be less than 1000.",
        "D. The second number printed is always 1000.",
        "E. The third number printed may be less than 1000.",
        "F. The third number printed is always 1000."
      ]
    },
    {
      "number": 40,
      "question": "Assuming the two stream operators are compiled and executed independently, which statements are correct? (Choose two.)",
      "code": "var drink = List.of(\"coke\", \"soda\", \"pop\");\n \nSystem.out.print(drink.parallelStream()\n   .parallel()\n   .reduce(0, (c1, c2) -> c1 + c2.length(), (s1, s2) -> s1 + s2));\n \nSystem.out.print(drink.stream()\n   .reduce(0, (c1, c2) -> c1 + c2.length(), (s1, s2) -> s1 + s2));",
      "choices": [
        "A. The first number printed is sometimes 11.",
        "B. The first number printed is always 11.",
        "C. The second number printed is sometimes 11.",
        "D. The second number printed is always 11.",
        "E. The first stream operation does not compile.",
        "F. The second stream operation does not compile."
      ]
    }
  ]
}