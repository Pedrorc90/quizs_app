{
  "questions": [
    {
      "number": 1,
      "question": "1. How many lines would have to be changed for the following code to compile?",
      "code": "1: enum Color {\n2:    public static Color DEFAULT = BROWN;\n3:    BROWN, YELLOW, BLACK;\n4: }\n5: public record Pony {\n6:    String name;\n7:    static int age;\n8:    { age = 10;}\n9: }",
      "choices": [
        "Zero",
        "One",
        "Two",
        "Three",
        "Four or more"
      ]
    },
    {
      "number": 2,
      "question": "2. Which modifiers can be applied to a sealed subclass? (Choose three.)",
      "choices": [
        "A. nonsealed",
        "B. default",
        "C. sealed",
        "D. unsealed",
        "E. non-sealed",
        "F. closed",
        "G. final"
      ]
    },
    {
      "number": 3,
      "question": "3. What is the output of the following application?",
      "code": "package dnd;\nfinal class Story {\n   void recite(int chapter) throws Exception {}\n}\npublic class Adventure extends Story {\n   final void recite(final int chapter) {  // g1\n      switch(chapter) {                    // g2\n         case 2: System.out.print(9);\n         default: System.out.print(3);\n      }\n   }\n   public static void main(String… u) {\n      var bedtime = new Adventure();\n      bedtime.recite(2);\n   } }",
      "choices": [
        "A. 3",
        "B. 9",
        "C. 93",
        "D. The code does not compile because of line g1.",
        "E. The code does not compile because of line g2.",
        "F. None of the above."
      ]
    },
    {
      "number": 4,
      "question": "4. Which of the following lines of code are not permitted as the first line of a Java class file? (Choose two.)",
      "choices": [
        "A. import widget.*;",
        "B. // Widget Manager",
        "C. int facilityNumber;",
        "D. package sprockets;",
        "E. /** Author: Cid **/",
        "F. void produce() {}"
      ]
    },
    {
      "number": 5,
      "question": "5. Which of the following modifiers can be applied to an abstract method? (Choose two.)",
      "choices": [
        "A. final",
        "B. private",
        "C. public",
        "D. default",
        "E. protected",
        "F. concrete"
      ]
    },
    {
      "number": 6,
      "question": "6. What is the result of compiling and executing the following class?",
      "code": "public class ParkRanger {\n   final static int birds = 10;\n   public static void main(String[] data) {\n      var r = new ParkRanger();\n      var trees = 5f;\n      System.out.print(trees + r.birds);\n   }\n}",
      "choices": [
        "A. It compiles and outputs 5.",
        "B. It compiles and outputs 5.0.",
        "C. It compiles and outputs 15.",
        "D. It compiles and outputs 15.0.",
        "E. It does not compile.",
        "F. It compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 7,
      "question": "7. Fill in the blanks: The ___________________ access modifier allows access to everything the ___________________ access modifier does and more.",
      "choices": [
        "A. package, protected",
        "B. private, package",
        "C. private, protected",
        "D. private, public",
        "E. public, private",
        "F. None of the above"
      ]
    },
    {
      "number": 8,
      "question": "8. Which set of modifiers, when added to a default method within an interface, prevents it from being overridden by a class implementing the interface?",
      "choices": [
        "A. const",
        "B. final",
        "C. static",
        "D. private",
        "E. private static",
        "F. None of the above"
      ]
    },
    {
      "number": 9,
      "question": "9. Given the following application, fill in the missing values in the table starting from the top and going down.",
      "code": "package competition;\npublic class Robot {\n   static String weight = \"A lot\";\n   double ageMonths = 5, ageDays = 2;\n   private static boolean success = true;\n\n   public void compete() {\n      final String retries = \"1\";\n      // P1\n   }\n} Variable Type\",\n        \"Number of Variables Accessible at P1\",\n        \"Class\",\n        \"_____\\nInstance\",\n        \"_____\\nLocal\",\n        \"_____\"",
      "choices": [
        "A. 2, 0, 1",
        "B. 2, 2, 1",
        "C. 1, 0, 2",
        "D. 0, 2, 0",
        "E. 2, 1, 1",
        "F. The class does not compile."
      ]
    },
    {
      "number": 10,
      "question": "10. Given the following code, what values inserted, in order, into the blank lines allow the code to compile? (Choose two.)",
      "code": "_____________ agent;\npublic _____________ Banker {\n   private static _____________ getMaxWithdrawal() {\n      return 10;\n   }\n}",
      "choices": [
        "A. package, new, int",
        "B. package, class, long",
        "C. import, class, null",
        "D. //, class, int",
        "E. import, interface, void",
        "F. package, class, void"
      ]
    },
    {
      "number": 11,
      "question": "11. Which of the following are correct? (Choose two.)",
      "code": "public class Phone {\n   private int size;\n\n   // LINE X\n\n   public static void sendHome(Phone p, int newSize) {\n      p = new Phone(newSize);\n      p.size = 4;\n   }\n   public static final void main(String… params) {\n      final var phone = new Phone(3);\n      sendHome(phone,7);\n      System.out.print(phone.size);\n   }\n}",
      "choices": [
        "A. Insert this constructor at LINE X:\npublic static Phone create(int size) {\n   return new Phone(size);\n}",
        "B. Insert this constructor at LINE X:\npublic static Phone newInstance(int size) {\n   return new Phone();\n}",
        "C. Insert this constructor at LINE X:\npublic Phone(int size) {\n   size = this.size;\n}",
        "D. Insert this constructor at LINE X:\npublic void Phone(int size) {\n   size = this.size;\n}",
        "E. With the correct constructor, the output is 0.",
        "F. With the correct constructor, the output is 3.",
        "G. With the correct constructor, the output is 7."
      ]
    },
    {
      "number": 12,
      "question": "12. Given the following class structures, which lines can be inserted into the blank independently that would allow the class to compile? (Choose two.)",
      "code": "public class Dinosaur {\n   class Pterodactyl extends Dinosaur {}\n   public void roar() {\n      var dino = new Dinosaur();\n      ____________________________;\n   }\n}",
      "choices": [
        "A. dino.Pterodactyl()",
        "B. Dinosaur.new Pterodactyl()",
        "C. dino.new Pterodactyl()",
        "D. new Dino().new Pterodactyl()",
        "E. new Dinosaur().Pterodactyl()",
        "F. new Dinosaur.Pterodactyl()"
      ]
    },
    {
      "number": 13,
      "question": "13. What is the output of the Computer program?",
      "code": "class Laptop extends Computer {\n    public void startup() {\n        System.out.print(\"laptop-\");\n    }\n}\npublic class Computer {\n   public void startup() {\n      System.out.print(\"computer-\");\n   }\n   public static void main(String[] args) {\n      Computer computer = new Laptop();\n      Laptop laptop = new Laptop();\n      computer.startup();\n      laptop.startup();\n   }\n}",
      "choices": [
        "A. computer-laptop-",
        "B. laptop-computer-",
        "C. laptop-laptop-",
        "D. The code does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 14,
      "question": "14. How many lines does the following code output?",
      "code": "public class Cars {\n   private static void drive() {\n       {\n          System.out.println(\"zoom\");\n       }\n       System.out.println(\"fast\");\n   }\n   static { System.out.println(\"faster\"); }\n   public static void main(String[] args) {\n      drive();\n      drive();\n   }\n}",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. Five",
        "F. Six or more",
        "G. None of the above. The code does not compile."
      ]
    },
    {
      "number": 15,
      "question": "15. Which statements about static interface methods are correct? (Choose three.)",
      "choices": [
        "A. A static interface method can be final.",
        "B. A static interface method can be declared private.",
        "C. A static interface method can be declared with package access.",
        "D. A static interface method can be declared public.",
        "E. A static interface method can be declared protected.",
        "F. A static interface method can be declared without an access modifier."
      ]
    },
    {
      "number": 16,
      "question": "16. Not counting the Planet declaration, how many declarations compile? Assume they are all declared within the same .java file.",
      "code": "public abstract sealed class Planet permits Mercury, Venus, Earth {}\n \nnon-sealed class Venus {}\nnon-sealed class Mars extends Planet {}\nnon-sealed class Mercury {}\nabstract non-sealed class Earth {}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 17,
      "question": "17. What is the result of executing the following program?",
      "code": "public class Canine {\npublic String woof(int bark) {\nreturn \"1\"+bark.toString();\n}\npublic String woof(Integer bark) {\nreturn \"2\"+bark.toString();\n}\npublic String woof(Object bark) {\nreturn \"3\"+bark.toString();\n}\npublic static void main(String[] a) {\nSystem.out.println(woof((short)5));\n} }",
      "choices": [
        "A. 15",
        "B. 25",
        "C. 35",
        "D. One line does not compile.",
        "E. Two lines do not compile.",
        "F. The program compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 18,
      "question": "18. What statement best describes the notion of effectively final in Java?",
      "choices": [
        "A. A local variable that is marked final.",
        "B. A static variable that is marked final.",
        "C. A local variable whose primitive value or object reference does not change after it is initialized.",
        "D. A local variable whose primitive value or object reference does not change after a certain point in the method.",
        "E. None of the above."
      ]
    },
    {
      "number": 19,
      "question": "19. What is the output of the Turnip class?",
      "code": "interface GameItem {\n   int sell();\n}\nabstract class Vegetable implements GameItem {\n   public final int sell() { return 5; }\n}\npublic class Turnip extends Vegetable {\n   public final int sell() { return 3; }\n   public static void main(String[] expensive) {\n      System.out.print(new Turnip().sell());\n   }\n}",
      "choices": [
        "A. 3",
        "B. 5",
        "C. The code does not compile.",
        "D. The code compiles but throws an exception at runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 20,
      "question": "20. What is the output of the following application?",
      "code": "package holiday;\nenum DaysOff {\n   Thanksgiving, PresidentsDay, ValentinesDay\n}\npublic class Vacation {\n   public static void main(String[] unused) {\n      final DaysOff input = DaysOff.Thanksgiving;\n      switch(input) {\n         default:\n         case DaysOff.ValentinesDay:\n            System.out.print(\"1\");\n         case DaysOff.PresidentsDay:\n            System.out.print(\"2\");\n      }\n   } }",
      "choices": [
        "A. 1",
        "B. 2",
        "C. 12",
        "D. The code does not compile.",
        "E. The code compiles but throws an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 21,
      "question": "21. What is the output of the following program?",
      "code": "record Animal(boolean isMammal) {}\npublic record Panda(String name) extends Animal {\n   public Panda() {\n      this(\"TaiShan\");\n   }\n   public Panda {\n      this.name = name.toLowerCase();\n   }\n   public static void main(String[] args) {\n      System.out.print(new Panda().name());\n   } }",
      "choices": [
        "A. TaiShan",
        "B. taishan",
        "C. Exactly one line needs to be corrected for the program to compile.",
        "D. Exactly two lines need to be corrected for the program to compile.",
        "E. Three or more lines need to be corrected for the program to compile.",
        "F. The code compiles but prints an exception at runtime."
      ]
    },
    {
      "number": 22,
      "question": "22. Which statements about instance keywords are correct? (Choose two.)",
      "choices": [
        "A. The that keyword can be used to read public members in the direct parent class.",
        "B. The this keyword can be used to read all members declared within the class.",
        "C. The super keyword can be used to read all members declared in a parent class.",
        "D. The that keyword can be used to read members of another class.",
        "E. The this keyword can be used to read public members in the direct parent class.",
        "F. The super keyword can be used in static methods."
      ]
    },
    {
      "number": 23,
      "question": "23. Fill in the blanks: A class ____________ an interface and ______________ an abstract class. An interface ______________ another interface.",
      "choices": [
        "A. extends, extends, implements",
        "B. extends, implements, extends",
        "C. extends, implements, implements",
        "D. implements, extends, extends",
        "E. implements, extends, implements",
        "F. implements, implements, extends"
      ]
    },
    {
      "number": 24,
      "question": "24. Suppose you have the following code. Which of the images best represents the state of the references c1, c2, and c3, right before the end of the main() method, assuming garbage collection hasn't run? In the diagrams, each box represents a Chicken object with a number of eggs.",
      "code": "public class Chicken {\n   private Integer eggs = 2;\n   { this.eggs = 3; }\n   public Chicken(int eggs) {\n      this.eggs = eggs;\n   }\n   public static void main(String[] r) {\n      var c1 = new Chicken(1);\n      var c2 = new Chicken(2);\n      var c3 = new Chicken(3);\n      c1.eggs = c2.eggs;\n      c2 = c1;\n      c3.eggs = null;\n   }\n}",
      "image": "chapter_3_24.png",
      "choices": [
        "A. Option A",
        "B. Option B",
        "C. Option C",
        "D. Option D",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 25,
      "question": "25. What is the output of the following application?",
      "code": "package musical;\ninterface Speak { default int talk() { return 7; } }\ninterface Sing { default int talk() { return 5; } }\npublic class Performance implements Speak, Sing {\n   public int talk(String… x) {\n      return x.length;\n   }\n   public static void main(String[] notes) {\n      System.out.print(new Performance().talk());\n   } }",
      "choices": [
        "A. 7",
        "B. 5",
        "C. The code does not compile.",
        "D. The code compiles without issue, but the output cannot be determined until runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 26,
      "question": "26. What is the output of the following application?",
      "code": "package ai;\ninterface Pump { public abstract String toString(); }\ninterface Bend extends Pump { void bend(double tensileStrength); }\npublic class Robot {\n   public static final void apply(\n      Bend instruction, double input) {\n      instruction.bend(input);\n   }\n   public static void main(String… future) {\n      final Robot r = new Robot();\n      r.apply(x -> System.out.print(x+\" bent!\"), 5);\n   } }",
      "choices": [
        "A. 5 bent!",
        "B. 5.0 bent!",
        "C. The code does not compile because Bend is not a functional interface.",
        "D. The code does not compile because of the apply() method declaration.",
        "E. None of the above."
      ]
    },
    {
      "number": 27,
      "question": "27. Which statement is true about encapsulation while providing the broadest access allowed?",
      "choices": [
        "A. Variables are private and methods are private.",
        "B. Variables are private and methods are public.",
        "C. Variables are public and methods are private.",
        "D. Variables are public and methods are public.",
        "E. Variables are private and methods are protected.",
        "F. None of the above."
      ]
    },
    {
      "number": 28,
      "question": "28. Fill in the blanks: ____________ means the state of an object cannot be changed, while _____________ means that it can.",
      "choices": [
        "A. Encapsulation, factory method",
        "B. Immutability, mutability",
        "C. Rigidity, flexibility",
        "D. Static, instance",
        "E. Tightly coupled, loosely coupled",
        "F. None of the above"
      ]
    },
    {
      "number": 29,
      "question": "29. Which statement about the following interface is correct?",
      "code": "public interface Swimming {\n   String DEFAULT = \"Diving!\";      // k1\n   abstract int breath();\n   private static void stroke() {\n      if(breath()==1) {             // k2\n         System.out.print(\"Go!\");\n      } else {\n         System.out.print(dive());  // k3\n      } }\n   static String dive() {\n      return DEFAULT;               // k4\n   } }",
      "choices": [
        "A. The code compiles without issue.",
        "B. The code does not compile because of line k1.",
        "C. The code does not compile because of line k2.",
        "D. The code does not compile because of line k3.",
        "E. The code does not compile because of line k4.",
        "F. None of the above."
      ]
    },
    {
      "number": 30,
      "question": "30. Which is the first line to fail to compile?",
      "code": "class Tool {\n   private void repair() {}            // r1\n   void use() {}                       // r2\n}\nclass Hammer extends Tool {\n   private int repair() { return 0; } // r3\n   private void use() {}              // r4\n   public void bang() {}              // r5\n}",
      "choices": [
        "A. r1",
        "B. r2",
        "C. r3",
        "D. r4",
        "E. r5",
        "F. None of the above"
      ]
    },
    {
      "number": 31,
      "question": "31. Which modifier can be applied to an abstract interface method?",
      "choices": [
        "A. final",
        "B. interface",
        "C. protected",
        "D. volatile",
        "E. sealed",
        "F. None of the above"
      ]
    },
    {
      "number": 32,
      "question": "32. What is the output of the Plant program?",
      "code": "class Bush extends Plant {\nString type = \"bush\";\n}\npublic class Plant {\nString type = \"plant\";\npublic static void main(String[] args) {\nPlant w1 = new Bush();\nBush w2 = new Bush();\nPlant w3 = w2;\nSystem.out.print(w1.type+\",\"+w2.type+\",\"+w3.type);\n} }",
      "choices": [
        "A. plant,bush,plant",
        "B. plant,bush,bush",
        "C. bush,plant,bush",
        "D. bush,bush,bush",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 33,
      "question": "33. The following Organ class is included, unmodified, in a larger program at runtime. At most, how many classes can inherit from Organ (excluding Organ itself)?",
      "code": "package body;\npublic sealed class Organ {\n   sealed class Heart extends Organ {}\n   final class Lung extends Organ {}\n   static non-sealed class Stomach extends Organ {}\n   final class Valentine extends Heart {}\n}",
      "choices": [
        "A. None",
        "B. Three",
        "C. Four",
        "D. Five",
        "E. One of the nested classes does not compile.",
        "F. Two or more of the nested classes do not compile.",
        "G. The number cannot be determined with the information given."
      ]
    },
    {
      "number": 34,
      "question": "34. What is the correct order of statements for a Java class file?",
      "choices": [
        "A. import statements, package statement, class declaration",
        "B. package statement, class declaration, import statements",
        "C. class declaration, import statements, package statement",
        "D. package statement, import statements, class declaration",
        "E. import statements, class declaration, package statement",
        "F. class declaration, package statement, import statements"
      ]
    },
    {
      "number": 35,
      "question": "35. Which are true of the following code? (Choose three.)",
      "code": "class Penguin {\n   private enum Baby { EGG }\n   static class Chick { \n      enum Baby { EGG }\n   }\n   public static void main(String[] args) {\n      boolean match = false;\n      Baby egg = Baby.EGG;\n      switch (egg) {\n         case EGG:\n            match = true;\n      }\n   } }",
      "choices": [
        "A. It compiles as is.",
        "B. It does not compile as is.",
        "C. Removing private on line 2 would create an additional compiler error.",
        "D. Removing private on line 2 would not create an additional compiler error.",
        "E. Removing the static modifier on line 3 would create an additional compiler error.",
        "F. Removing the static modifier on line 3 would not create an additional compiler error."
      ]
    },
    {
      "number": 36,
      "question": "36. Which are true of the following? (Choose two.)",
      "code": "package beach;\npublic class Sand {\n   private static int numShovels;\n   private int numRakes;\n \n   public static int getNumShovels() {\n      return numShovels;\n   }\n   public static int getNumRakes() {\n      return numRakes;\n   }\n   public Sand() {\n      System.out.print(\"a\");\n   }\n   public void Sand() {\n      System.out.print(\"b\");\n   }\n   public void run() {\n      new Sand();\n      Sand();\n   }\n   public static void main(String… args) {\n      new Sand().run();\n   } }",
      "choices": [
        "A. The code compiles.",
        "B. Exactly one line doesn't compile.",
        "C. Exactly two lines don't compile.",
        "D. If the code compiles or if any constructors/methods that do not compile are removed, the remaining code prints a.",
        "E. If the code compiles or if any constructors/methods that do not compile are removed, the remaining code prints ab.",
        "F. If the code compiles or if any constructors/methods that do not compile are removed, the remaining code prints aab."
      ]
    },
    {
      "number": 37,
      "question": "37. Which of the following class types cannot be marked abstract?",
      "choices": [
        "A. static nested class",
        "B. Local class",
        "C. Anonymous class",
        "D. Member inner class",
        "E. Sealed class",
        "F. All of the above can be marked abstract."
      ]
    },
    {
      "number": 38,
      "question": "38. Fill in the blanks: The ___________________ access modifier allows access to everything the ___________________ access modifier does and more. (Choose three.)",
      "choices": [
        "A. package, protected",
        "B. package, public",
        "C. protected, package",
        "D. protected, public",
        "E. public, package",
        "F. public, protected"
      ]
    },
    {
      "number": 39,
      "question": "39. Which is the first line containing a compiler error?",
      "code": "var var = \"var\";               // line x1\nvar title = \"Weather\";         // line x2\nvar hot = 100, var cold = 20;  // line x3\nvar f = 32, int c = 0;         // line x4",
      "choices": [
        "A. x1",
        "B. x2",
        "C. x3",
        "D. x4",
        "E. None of the above"
      ]
    },
    {
      "number": 40,
      "question": "40. How many of the following members of the Telephone interface are public?",
      "code": "public interface Telephone {\n   static int call() { return 1; }\n   default void dial() {}\n   long answer();\n   String home = \"555-555-5555\";\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. The code does not compile."
      ]
    },
    {
      "number": 41,
      "question": "41. Which best describes what the new keyword does?",
      "choices": [
        "A. Creates a copy of an existing object and treats it as a new one.",
        "B. Creates a new primitive.",
        "C. Instantiates a new object.",
        "D. Switches an object reference to a new one.",
        "E. The behavior depends on the class implementation."
      ]
    },
    {
      "number": 42,
      "question": "42. How many lines will not compile?",
      "code": "11: public class PrintShop {\n12:    public void printVarargs(String… names) {\n13:       System.out.println(Arrays.toString(names));\n14:    }\n15:    public void printArray(String[] names) {\n16:       System.out.println(Arrays.toString(names));\n17:    }\n18:    public void stormy() {\n19:       printVarargs(\"Arlene\");\n20:       printVarargs(new String[]{\"Bret\"});\n21:       printVarargs(null);\n22:       printArray (\"Cindy\");\n23:       printArray (new String[]{\"Don\"});\n24:       printArray (null);\n25:    } }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five"
      ]
    },
    {
      "number": 43,
      "question": "43. How do you change the value of an instance variable in an immutable class?",
      "choices": [
        "A. Call the setter method.",
        "B. Remove the final modifier and set the instance variable directly.",
        "C. Create a new instance with an inner class.",
        "D. Use a method other than option A, B, or C.",
        "E. You can't."
      ]
    },
    {
      "number": 44,
      "question": "44. What is the minimum number of lines that need to be removed to make this code compile?",
      "code": "@FunctionalInterface\npublic interface Play {\n   public static void baseball() {}\n   private static void soccer() {}\n   default void play() {}\n   void fun();\n}",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. The code compiles as is."
      ]
    },
    {
      "number": 45,
      "question": "45. Fill in the blanks: A class that defines an instance variable with the same name as a variable in the parent class is referred to as ___________________ a variable, while a class that defines a static method with the same signature as a static method in a parent class is referred to as ___________________ a method.",
      "choices": [
        "A. hiding, overriding",
        "B. overriding, hiding",
        "C. masking, masking",
        "D. hiding, masking",
        "E. replacing, overriding",
        "F. hiding, hiding"
      ]
    },
    {
      "number": 46,
      "question": "46. Which statements about records are correct? (Choose two.)",
      "choices": [
        "A. A record is implicitly public.",
        "B. A record can extend other classes.",
        "C. A record can implement interfaces.",
        "D. A record can contain multiple regular constructors.",
        "E. A record can contain multiple compact constructors.",
        "F. A record is always immutable."
      ]
    },
    {
      "number": 47,
      "question": "47. What change is needed to make Secret well encapsulated?",
      "code": "import java.util.*;\npublic class Secret {\n   private int number = new Random().nextInt(10);\n   public boolean guess(int candidate) {\n      return number == candidate;\n   } }",
      "choices": [
        "A. Change number to use a protected access modifier.",
        "B. Change number to use a public access modifier.",
        "C. Declare a private constructor.",
        "D. Declare a public constructor.",
        "E. Remove the guess method.",
        "F. None. It is already well encapsulated."
      ]
    },
    {
      "number": 48,
      "question": "48. What is the output of the following application?",
      "code": "interface Toy { String play(); }\npublic class Gift {\n   public static void main(String[] matrix) {\n      abstract class Robot {}\n      class Transformer extends Robot implements Toy {\n         public String name = \"GiantRobot\";\n         public String play() {return \"DinosaurRobot\";}  // y1\n      }\n      Transformer prime = new Transformer () {\n         public String play() {return name;}             // y2\n      };\n      System.out.print(prime.play() + \" \" + name);\n   } }",
      "choices": [
        "A. GiantRobot",
        "B. GiantRobot DinosaurRobot",
        "C. DinosaurRobot",
        "D. The code does not compile because of line y1.",
        "E. The code does not compile because of line y2.",
        "F. None of the above."
      ]
    },
    {
      "number": 49,
      "question": "49. What is the output of the following application?",
      "code": "package space;\npublic class Bottle {\n   public static class Ship {\n      private enum Sail {          // w1\n         TALL {protected int getHeight() {return 100;}},\n         SHORT {protected int getHeight() {return 2;}};\n         protected abstract int getHeight();\n      }\n      public Sail getSail() {\n         return Sail.TALL;\n      } }\n   public static void main(String[] stars) {\n      var bottle = new Bottle();\n      Ship q = bottle.new Ship();  // w2\n      System.out.print(q.getSail());\n   } }",
      "choices": [
        "A. TALL",
        "B. The code does not compile because of line w1.",
        "C. The code does not compile because of line w2.",
        "D. The code does not compile for another reason.",
        "E. The code compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 50,
      "question": "50. Which of the following is not a valid order for elements within a class?",
      "choices": [
        "A. Constructor, instance variables, method declarations",
        "B. Instance variables, static initializer constructor, method declarations",
        "C. Method declarations, instance variables, constructor",
        "D. Instance initializer, constructor, instance variables, constructor",
        "E. None of the above"
      ]
    },
    {
      "number": 51,
      "question": "51. Which line of code, inserted at line p1, causes the application to print 5?",
      "code": "package games;\npublic class Jump {\n   private int rope = 1;\n   protected boolean outside;\n   public Jump() {\n      // line p1\n      outside = true;\n   }\n   public Jump(int rope) {\n      this.rope = outside ? rope : rope+1;\n   }   \n   public static void main(String[] bounce) {\n      System.out.print(new Jump().rope);\n   } }",
      "choices": [
        "A. this(4);",
        "B. new Jump(4);",
        "C. this(5);",
        "D. rope = 4;",
        "E. super(4);",
        "F. super(5);"
      ]
    },
    {
      "number": 52,
      "question": "52. Which of the following are not reasons to use encapsulation when designing a class? (Choose two.)",
      "choices": [
        "A. Improve security.",
        "B. Increase concurrency and improve performance.",
        "C. Maintain class data integrity of data elements.",
        "D. Prevent users from modifying the internal attributes of a class.",
        "E. Prevent variable state from changing.",
        "F. Promote usability by other developers."
      ]
    },
    {
      "number": 53,
      "question": "53. Which is not a true statement given this diagram? Assume all classes are public.",
      "image": "chapter_3_53.png",
      "choices": [
        "A. Instance methods in the Blanket class can call the Flashlight class's turnOn().",
        "B. Instance methods in the Flashlight class can call the Flashlight class's replaceBulb().",
        "C. Instance methods in the Phone class can call the Blanket class's wash().",
        "D. Instance methods in the Tent class can call the Tent class's pitch().",
        "E. Instance methods in the Tent class can call the Blanket class's wash().",
        "F. All of the statements are true."
      ]
    },
    {
      "number": 54,
      "question": "54. Given the diagram in the previous question, how many of the classes shown in the diagram can call the display() method?",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 55,
      "question": "55. Which of the following statements are correct? (Choose two.)",
      "choices": [
        "A. Java allows multiple inheritance using two abstract classes.",
        "B. Java allows multiple inheritance using two interfaces.",
        "C. Java does not allow multiple inheritance.",
        "D. An interface can extend another interface.",
        "E. An interface can extend a record.",
        "F. An interface can implement another interface."
      ]
    },
    {
      "number": 56,
      "question": "56. Which changes, taken together, would make the Tree class immutable? (Choose three.)",
      "code": "1:  public class Tree {\n2:     String species;\n3:     public Tree(String species) {\n4:        this.species = species;\n5:     }\n6:     public String getSpecies() {\n7:        return species;\n8:     }\n9:     private final void setSpecies(String newSpecies) {\n10:       species = newSpecies;\n11:    } }",
      "choices": [
        "A. Make all constructors private.",
        "B. Change the access level of species to private.",
        "C. Change the access level of species to protected.",
        "D. Remove the setSpecies() method.",
        "E. Mark the Tree class final.",
        "F. Make a defensive copy of species in the Tree constructor."
      ]
    },
    {
      "number": 57,
      "question": "57. What is the output of the following application?",
      "code": "package ocean;\nabstract interface CanSwim {\n   public void swim(final int distance);\n}\npublic class Turtle {\n   final int distance = 2;\n   public static void main(String[] seaweed) {\n      final int distance = 3;\n      CanSwim seaTurtle = {\n         final int distance = 5;\n         @Override\n         public void swim(final int distance) {\n            System.out.print(distance);\n         }\n      };\n      seaTurtle.swim(7);\n   } }",
      "choices": [
        "A. 2",
        "B. 3",
        "C. 5",
        "D. 7",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 58,
      "question": "58. What is the output of the following application?",
      "code": "package pet;\npublic class Puppy {\n   public static int wag = 5;   // q1\n   public void Puppy(int wag) { // q2\n      this.wag = wag;\n   }\n   public static void main(String[] tail) {\n      System.out.print(new Puppy(2).wag); // q3\n   } }",
      "choices": [
        "A. 2",
        "B. 5",
        "C. The first line with a compiler error is line q1.",
        "D. The first line with a compiler error is line q2.",
        "E. The first line with a compiler error is line q3."
      ]
    },
    {
      "number": 59,
      "question": "59. Given the following method signature used in a class, which classes can call it?",
      "code": "void run(String government)",
      "choices": [
        "A. Classes in other packages",
        "B. Classes in the same package",
        "C. Subclasses in a different package",
        "D. All classes",
        "E. None of the above"
      ]
    },
    {
      "number": 60,
      "question": "60. Which is the first declaration to not compile?",
      "code": "package desert;\n \ninterface CanBurrow {\n   public abstract void burrow();\n}\n \n@FunctionalInterface interface HasHardShell\n   extends CanBurrow {} \n \nabstract class Tortoise implements HasHardShell {\n   public abstract int toughness();\n}\n \npublic class DesertTortoise extends Tortoise {\n   public int toughness() { return 11; }\n}",
      "choices": [
        "A. CanBurrow",
        "B. HasHardShell",
        "C. Tortoise",
        "D. DesertTortoise",
        "E. All of the declarations compile."
      ]
    },
    {
      "number": 61,
      "question": "61. Which is the first line to not compile?",
      "code": "interface Building {\n   default Double getHeight() { return 1.0; }         // m1\n}\ninterface Office {\n   public default String getHeight() { return null; } // m2\n}\nabstract class Tower implements Building, Office {}   // m3\npublic class Restaurant extends Tower {}              // m4",
      "choices": [
        "A. Line m1",
        "B. Line m2",
        "C. Line m3",
        "D. Line m4",
        "E. None of the above"
      ]
    },
    {
      "number": 62,
      "question": "62. What is the output of the following code snippet?",
      "code": "public class Nature {\n  public static void main(String[] seeds) {\n     record Tree() {}\n     var tree = \"pine\";\n     int count = 0;\n     if (tree.equals(\"pine\")) {\n        int height = 55;\n        count = count + 1;\n     }\n     System.out.print(height + count);\n   } }",
      "choices": [
        "A. 1",
        "B. 55",
        "C. 56",
        "D. It does not compile because a record cannot be nested in a method.",
        "E. It does not compile because a record must have at least one value passed in.",
        "F. It does not compile for another reason."
      ]
    },
    {
      "number": 63,
      "question": "63. Which of the following are valid comments in Java? (Choose three.)",
      "choices": [
        "A. /****** TODO */",
        "B. # Fix this bug later",
        "C. ‘ Error closing pod bay doors",
        "D. / Invalid record /",
        "E. /* Page not found */",
        "F. // IGNORE ME"
      ]
    },
    {
      "number": 64,
      "question": "64. Which of the following pairs of modifiers can both be applied to a method? (Choose three.)",
      "choices": [
        "A. private and final",
        "B. abstract and final",
        "C. static and private",
        "D. private and abstract",
        "E. abstract and static",
        "F. static and protected"
      ]
    },
    {
      "number": 65,
      "question": "65. Given the following class, what should be inserted into the two blanks to ensure the class data is properly encapsulated?",
      "code": "package storage;\npublic class Box {\n   public String stuff;\n   _________________ String  _________________() {\n      return stuff;\n   }\n \n   public void setStuff(String stuff) {\n      this.stuff = stuff;\n   } }",
      "choices": [
        "A. private and getStuff",
        "B. private and isStuff",
        "C. public and getStuff",
        "D. public and isStuff",
        "E. default and getStuff",
        "F. None of the above"
      ]
    },
    {
      "number": 66,
      "question": "66. How many rows of the following table contain an error?",
      "code": "Interface member\nMembership type\nRequires method body?\nstatic method\nClass\nYes\nprivate non-static method\nClass\nYes\nabstract method\nInstance\nNo\ndefault method\nInstance\nNo\nprivate static method\nClass\nYes",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 67,
      "question": "67. Fill in the blanks: ___________________ is used to call a constructor in the parent class, while ___________________ is used to reference a member of the parent class.",
      "choices": [
        "A. super, this()",
        "B. super, super()",
        "C. super(), this",
        "D. super(), super",
        "E. None of the above"
      ]
    },
    {
      "number": 68,
      "question": "68. Which of the following declarations can be inserted into the blank and have the class compile?",
      "code": "public sealed class Toy {\n  ___________________________  extends Toy {}\n}",
      "choices": [
        "A. nonsealed class Book",
        "B. abstract class Robot",
        "C. class ActionFigure",
        "D. record Doll()",
        "E. interface Game",
        "F. non-sealed class Ball",
        "G. None of the above, because Toy does not include a permits clause"
      ]
    },
    {
      "number": 69,
      "question": "69. What is the output of the Watch program?",
      "code": "1:  class SmartWatch extends Watch {\n2:     private String getType() { return \"smart watch\"; }\n3:     public String getName(String suffix) {\n4:        return getType() + suffix;\n5:     } }\n6:  public class Watch {\n7:     private String getType() { return \"watch\"; }\n8:     public String getName(String suffix) {\n9:        return getType() + suffix;\n10:    }\n11:    public static void main(String[] args) {\n12:       var watch = new Watch();\n13:       var smartWatch = new SmartWatch();\n14:       System.out.print(watch.getName(\",\"));\n15:       System.out.print(smartWatch.getName(\"\"));\n16:    } }",
      "choices": [
        "A. smart watch,watch",
        "B. watch,smart watch",
        "C. watch,watch",
        "D. The code does not compile",
        "E. An exception is printed at runtime",
        "F. None of the above"
      ]
    },
    {
      "number": 70,
      "question": "70. What is the output of the Movie program?",
      "code": "package theater;\nclass Cinema {\n   private String name = \"Sequel\";\n   public Cinema(String name) {\n      this.name = name;\n   } }\npublic class Movie extends Cinema {\n   private String name = \"adaptation\";\n   public Movie(String movie) {\n      this.name = \"Remake\";\n   }\n   public static void main(String[] showing) {\n      System.out.print(new Movie(\"Trilogy\").name);\n   } }",
      "choices": [
        "A. Sequel",
        "B. Trilogy",
        "C. Remake",
        "D. Adaptation",
        "E. null",
        "F. None of the above"
      ]
    },
    {
      "number": 71,
      "question": "71. Which statement best describes this class?",
      "code": "import java.util.*;\npublic final class Ocean {\n   private final List<String> algae;\n   private final double wave;\n   private int sun;\n   public Ocean(double wave) {\n      this.wave = wave;\n      this.algae = new ArrayList<>();\n   }\n   public int getSun() {\n      return sun;\n   }\n   public void setSun(int sun) {\n      sun = sun;\n   }\n   public double getWave() {\n      return wave;\n   }\n   public List<String> getAlgae() {\n      return new ArrayList<String>(algae);\n   } }",
      "choices": [
        "A. It can be serialized.",
        "B. It is well encapsulated.",
        "C. It is immutable.",
        "D. It is both well encapsulated and immutable.",
        "E. None of the above, as the code does not compile."
      ]
    },
    {
      "number": 72,
      "question": "72. Given the file Magnet.java shown, which of the marked lines can you independently insert the line var color; into and still have the code compile?",
      "code": "// line a1\npublic class Magnet {\n   // line a2\n   public void attach() {\n      // line a3\n   }\n   // line a4\n}",
      "choices": [
        "A. a2",
        "B. a3",
        "C. a2 and a3",
        "D. a1, a2, a3, and a4",
        "E. None of the above"
      ]
    },
    {
      "number": 73,
      "question": "73. Which of the following results is not a possible output of this program?",
      "code": "package sea;\nenum Direction { north, south, east, west; };\npublic class Ship {\n   public static void main(String[] compass) {\n      System.out.print(Direction.valueOf(compass[0]));\n   } }",
      "choices": [
        "A. WEST is printed.",
        "B. south is printed.",
        "C. An ArrayIndexOutOfBoundsException is thrown at runtime.",
        "D. An IllegalArgumentException is thrown at runtime.",
        "E. All of the above are possible."
      ]
    },
    {
      "number": 74,
      "question": "74. What is the output of the following application?",
      "code": "package radio;\npublic class Song {\n   public void playMusic() {\n      System.out.print(\"Play!\");\n   }\n   private static void playMusic() {\n      System.out.print(\"Music!\");\n   }\n   private static void playMusic(String song) {\n      System.out.print(song);\n   }\n   public static void main(String[] tracks) {\n      new Song().playMusic();\n   } }",
      "choices": [
        "A. Play!",
        "B. Music!",
        "C. The code does not compile.",
        "D. The code compiles, but the answer cannot be determined until runtime."
      ]
    },
    {
      "number": 75,
      "question": "75. Which of the following statements about overriding a method are correct? (Choose three.)",
      "choices": [
        "A. The return types must be covariant.",
        "B. The access modifier of the method in the child class must be the same as or narrower than the method in the superclass.",
        "C. The return types must be the same.",
        "D. A checked exception declared by the method in the parent class must be declared by the method in the child class.",
        "E. A checked exception declared by a method in the child class must be the same as or narrower than the exception declared by the method in the parent class.",
        "F. The access modifier of the method in the child class must be the same as or broader than the method in the superclass."
      ]
    },
    {
      "number": 76,
      "question": "76. How many lines of the following code do not compile?",
      "code": "10: interface Flavor {\n11:    public default void happy() {\n12:       printFlavor(\"Rocky road\");\n13:    }\n14:    private static void excited() {\n15:       printFlavor(\"Peanut butter\");\n16:    }\n17:    private void printFlavor(String f) {\n18:       System.out.println(\"Favorite Flavor is: \"+f);\n19:    }\n20:    public static void sad() {\n21:       printFlavor(\"Butter pecan\");\n22:    }\n23: }\n24: public class IceCream implements Flavor {\n25:    @Override public void happy() {\n26:       printFlavor(\"Cherry chocolate chip\");\n27:    } }",
      "choices": [
        "A. None, they all compile.",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five or more"
      ]
    },
    {
      "number": 77,
      "question": "77. What is the output of the following program?",
      "code": "1:  public record Disco(int beats) {\n2:     public Disco(String beats) {\n3:        this(20);\n4:     }\n5:     public Disco {\n6:        beats = 10;\n7:     }\n8:     public int getBeats() {\n9:        return beats;\n10:    }\n11:    public static void main(String[] args) {\n12:       System.out.print(new Disco(30).beats());\n13:    } }",
      "choices": [
        "A. 10",
        "B. 20",
        "C. 30",
        "D. Exactly one line needs to be corrected for the program to compile.",
        "E. Exactly two lines need to be corrected for the program to compile.",
        "F. Three or more lines need to be corrected for the program to compile.",
        "G. The code compiles but prints an exception at runtime."
      ]
    },
    {
      "number": 78,
      "question": "78. Which of the following words are modifiers that are implicitly applied to all interface variables? (Choose three.)",
      "choices": [
        "A. const",
        "B. final",
        "C. abstract",
        "D. static",
        "E. public",
        "F. constant"
      ]
    },
    {
      "number": 79,
      "question": "79. Given the following method, what is the first line that does not compile?",
      "code": "public static void main(String[] args) {\n   int Integer = 0;        // k1\n   Integer int = 0;        // k2\n   Integer ++;             // k3\n   int++;                  // k4\n   int var = null;         // k5\n}",
      "choices": [
        "A. k1",
        "B. k2",
        "C. k3",
        "D. k4",
        "E. k5"
      ]
    },
    {
      "number": 80,
      "question": "80. What is the result of compiling and executing the following class?",
      "code": "public class Tolls {\n   private static int yesterday = 1;\n   int tomorrow = 10;\n \n   public static void main(String[] args) {\n      var tolls = new Tolls();\n      int today = 20, tomorrow = 40;  // line x\n      System.out.print(\n         today + tolls.tomorrow + tolls.yesterday); // line y\n   } }",
      "choices": [
        "A. The code does not compile due to line x.",
        "B. The code does not compile due to line y.",
        "C. 31",
        "D. 61",
        "E. None of the above."
      ]
    },
    {
      "number": 81,
      "question": "81. What is the output of the following application?",
      "code": "package weather;\npublic class Forecast {\n   public enum Snow {\n      BLIZZARD, SQUALL, FLURRY\n      @Override public String toString() { return \"Sunny\"; }\n   }\n   public static void main(String[] modelData) {\n      System.out.print(Snow.BLIZZARD.ordinal() + \" \");\n      System.out.print(Snow.valueOf(\"flurry\".toUpperCase()));\n   } }",
      "choices": [
        "A. 0 FLURRY",
        "B. 1 FLURRY",
        "C. 0 Sunny",
        "D. 1 Sunny",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 82,
      "question": "82. Which of the following is an invalid statement?",
      "choices": [
        "A. The first line of every constructor is a call to the parent constructor via the super() command.",
        "B. A class is not required to have a constructor explicitly defined.",
        "C. A constructor may pass arguments to the parent constructor.",
        "D. A final instance variable whose value is not set when it is declared or in an initialization block should be set by the constructor.",
        "E. All of the above are valid statements."
      ]
    },
    {
      "number": 83,
      "question": "83. What can fill in the blank so that the play() method can be called from all classes in the com.mammal and com.mammal.eland package, but not in the com.mammal.gopher package?",
      "code": "package com.mammal;\npublic class Enrichment {\n  _______  void play() {}\n}",
      "choices": [
        "A. Leave it blank",
        "B. private",
        "C. protected",
        "D. public",
        "E. None of the above"
      ]
    },
    {
      "number": 84,
      "question": "84. What is the output of the Rocket program?",
      "code": "package transport;\nclass Ship {\n   protected int weight = 3;\n   protected int height = 5;\n   public int getWeight() { return weight; }\n   public int getHeight() { return height; }\n}\npublic class Rocket extends Ship {\n   public int weight = 2;\n   public int height = 4;\n   public void printDetails() {\n      System.out.print(super.getWeight() + \",\" + this.height);\n   }\n   public static final void main(String[] fuel) {\n      new Rocket().printDetails();\n   } }",
      "choices": [
        "A. 2,5",
        "B. 3,4",
        "C. 5,2",
        "D. 3,5",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 85,
      "question": "85. Imagine you are working with another team to build an application. You are developing code that uses a class that the other team has not yet finished writing. You want to allow easy integration once the other team's code is complete. Which statements would meet this requirement? (Choose two.)",
      "choices": [
        "A. An abstract class is best.",
        "B. An interface is best.",
        "C. Either an abstract class or interface would meet the requirement.",
        "D. The methods should be protected.",
        "E. The methods should be public.",
        "F. The methods should be static."
      ]
    },
    {
      "number": 86,
      "question": "86. Fill in the blank with the line of code that allows the program to compile and print 10 at runtime.",
      "code": "interface Speak {\n   public default int getVolume() { return 20; }\n}\ninterface Whisper {\n   public default int getVolume() { return 10; } \n}\npublic class Debate implements Speak, Whisper {\n   public int getVolume() { return 30; }\n   public static void main(String[] a) {\n      var d = new Debate();\n      System.out.println(_________________);\n   } }",
      "choices": [
        "A. Whisper.d.getVolume()",
        "B. d.Whisper.getVolume()",
        "C. Whisper.super.getVolume()",
        "D. d.Whisper.super.getVolume()",
        "E. The code does not compile regardless of what is inserted into the blank.",
        "F. None of the above."
      ]
    },
    {
      "number": 87,
      "question": "87. Which of the following properties of an enum can be marked abstract?",
      "choices": [
        "A. The enum type definition",
        "B. An enum method",
        "C. An enum value",
        "D. An enum constructor",
        "E. None of the above"
      ]
    },
    {
      "number": 88,
      "question": "88. How many lines does the following code output?",
      "code": "public class Cars {\n   static {\n      System.out.println(\"static\");\n   }\n   private static void drive() {\n      System.out.println(\"fast\");\n   }\n   { System.out.println(\"faster\"); }\n   public static void main(String[] args) {\n      drive();\n      drive();\n   } }",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. Five",
        "F. None of the above. The code does not compile."
      ]
    },
    {
      "number": 89,
      "question": "89. What does the following program output?",
      "code": "public record Passenger(String firstName, String lastName) {\n   static String middleName;\n   @Override public String toString() {\n      return null;\n   }\n   @Override public String getFirstName() {\n      return null;\n   }\n   public static void main(String[] args) {\n      var p = new Passenger(\"John\", \"Colbert\");\n      System.out.println(p.getFirstName());\n   } }",
      "choices": [
        "A. john",
        "B. colbert",
        "C. null",
        "D. The code does not compile.",
        "E. The code compiles but prints an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 90,
      "question": "90. Suppose foo is a reference to an instance of a class Foo. Which of the following is not possible about the variable reference foo.bar?",
      "choices": [
        "A. bar is an instance variable.",
        "B. bar is a static variable.",
        "C. bar is a local variable.",
        "D. It can be used to read from bar.",
        "E. It can be used to write to bar.",
        "F. All of the above are possible."
      ]
    },
    {
      "number": 91,
      "question": "91. The following diagram shows two reference variables pointing to the same Bunny object in memory. The reference variable myBunny is of type Bunny, while unknownBunny is a valid but unknown data type. Which statements about the reference variables are true? Assume the instance methods and variables shown in the diagram are marked public. (Choose three.)",
      "code": "After question sometimes appears more text. If this text follows a pattern of \"choices\" introduce it into \"choices\", otherwise introduce it into the attribute \"code\" of type String",
      "image": "chapter_3_91.png",
      "choices": [
        "A. The reference type of unknownBunny must be Bunny or a supertype of Bunny.",
        "B. The reference type of unknownBunny cannot be cast to a reference type of Bunny.",
        "C. The reference type of unknownBunny must be Bunny or a subclass of Bunny.",
        "D. If the reference type of unknownBunny is Bunny, it has access to all of the same methods and variables as myBunny.",
        "E. The reference type of unknownBunny could be an interface, class, or abstract class.",
        "F. If the reference type of unknownBunny is Object, it has access to all of the same methods and variables as myBunny without a cast."
      ]
    },
    {
      "number": 92,
      "question": "92. Which of the following interface methods are inherited by classes that implement the interface? (Choose two.)",
      "choices": [
        "A. private methods",
        "B. private static methods",
        "C. default methods",
        "D. static methods",
        "E. abstract methods",
        "F. final methods"
      ]
    },
    {
      "number": 93,
      "question": "93. Which of these are functional interfaces?",
      "code": "interface Lion {\n   public void roar();\n   default void drink() {}\n   String toString();\n}\ninterface Tiger {\n   public void roar();\n   default void drink() {}\n   int hashCode();\n}",
      "choices": [
        "A. Lion",
        "B. Tiger",
        "C. Both Lion and Tiger",
        "D. Neither is a functional interface.",
        "E. The code does not compile."
      ]
    },
    {
      "number": 94,
      "question": "94. Given the following code, which lines when placed independently in the blank allow the code to compile and print bounce? (Choose two.)",
      "code": "public class TennisBall {\n   public TennisBall() {\n      System.out.println(\"bounce\");\n   }\n   public static void main(String[] slam) {\n       _____________________________________;\n   } }",
      "choices": [
        "A. var new = TennisBall",
        "B. TennisBall()",
        "C. var var = new TennisBall()",
        "D. new TennisBall",
        "E. new TennisBall()"
      ]
    },
    {
      "number": 95,
      "question": "95. How many of the public methods in the class compile?",
      "code": "public class Singing {\n   private void sing(String key) {}\n \n   public void sing_do(String key, String… harmonies) {\n     this.sing(key);\n   }\n   public void sing_re(int note, String… sound, String key) {\n      this.sing(key);\n   }\n   public void sing_me(String… keys, String… pitches) {\n      this.sing(key);\n   }\n   public void sing_fa(String key, String… harmonies) {\n      this.Singing.sing(key);\n   }\n   public void sing_so(int note, String… sound, \n      String key) {\n     this.Singing.sing(key);\n   }\n   public void sing_la(String… keys, String… pitches) {\n      this.Singing.sing(key);\n   } }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five",
        "G. Six"
      ]
    },
    {
      "number": 96,
      "question": "96. What is the output of the following application?",
      "code": "package world;\npublic class Matrix {\n   private int level = 1;\n   class Deep {\n      private int level = 2;\n      class Deeper {\n         private int level = 5;\n         public void printReality(int level) {\n            System.out.print(this.level+\" \");\n            System.out.print(Matrix.Deep.this.level+\" \");\n            System.out.print(Deep.this.level);\n         } } }\n   public static void main(String[] bots) {\n      Matrix.Deep.Deeper simulation = new Matrix()\n         .new Deep().new Deeper();\n      simulation.printReality(6);\n   } }",
      "choices": [
        "A. 1 1 2",
        "B. 5 2 2",
        "C. 5 2 1",
        "D. 6 2 2",
        "E. 6 2 1",
        "F. The code does not compile."
      ]
    },
    {
      "number": 97,
      "question": "97. Not counting the Time declaration, how many declarations compile? Assume they are all declared within the same .java file.",
      "code": "public sealed interface Time permits Hour, Minute, Second {}\n \nrecord Hour() implements Time {}\ninterface Minute extends Time {}\nnon-sealed class Second implements Time {}\nclass Micro extends Second {}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 98,
      "question": "98. Given that Integer and Long are direct subclasses of Number, what type can be used to fill in the blank in the following class to allow it to compile?",
      "code": "package orchestra;\ninterface MusicCreator { public Number play(); }\nabstract class StringInstrument {\n   public Long play() {return 3L;}\n}\npublic class Violin extends StringInstrument \n      implements MusicCreator {\n   public _________________ play() {\n      return null;\n   } }",
      "choices": [
        "A. Long",
        "B. Integer",
        "C. Long or Integer",
        "D. Long or Number",
        "E. Long, Integer, or Number",
        "F. None of the above"
      ]
    },
    {
      "number": 99,
      "question": "99. What is the output of the RightTriangle program?",
      "code": "package shapes;\nabstract class Triangle {\n   abstract String getDescription();\n}\nabstract class IsoRightTriangle extends RightTriangle { // g1\n   public String getDescription() { return \"irt\"; }\n}\npublic class RightTriangle extends Triangle {\n   protected String getDescription() { return \"rt\"; }  // g2\n   public static void main(String[] edges) {\n      final var shape = new IsoRightTriangle();        // g3\n      System.out.print(shape.getDescription());\n   } }",
      "choices": [
        "A. rt",
        "B. irt",
        "C. The code does not compile due to line g1.",
        "D. The code does not compile due to line g2.",
        "E. The code does not compile due to line g3.",
        "F. None of the above."
      ]
    },
    {
      "number": 100,
      "question": "100. What is the output of the following program?",
      "code": "interface Dog {\n   private void buryBone() { chaseTail(); }\n   private static void wagTail() { chaseTail(); }\n   public default String chaseTail() { return \"So cute!\"; }\n}\npublic class Puppy implements Dog {\n   public String chaseTail() throws IllegalArgumentException {\n      throw new IllegalArgumentException(\"Too little!\");\n   }\n   public static void main(String[] t) {\n      var p = new Puppy();\n      System.out.print(p.chaseTail());\n   } }",
      "choices": [
        "A. So cute!",
        "B. An exception is thrown with a Too little! message.",
        "C. A different exception is thrown.",
        "D. The code does not compile because buryBone() is not used.",
        "E. The code does not compile because chaseTail() cannot declare any exceptions in the Puppy class.",
        "F. None of the above."
      ]
    },
    {
      "number": 101,
      "question": "101. How do you force garbage collection to occur at a certain point?",
      "choices": [
        "A. Calling System.forceGc()",
        "B. Calling System.gc()",
        "C. Calling System.requireGc()",
        "D. Calling GarbageCollection.clean()",
        "E. None of the above"
      ]
    },
    {
      "number": 102,
      "question": "102. Which changes made to the following class would help to properly encapsulate the data in the class?",
      "code": "package shield;\npublic class Protect {\n   private String material;\n   protected int strength;\n \n   public int getStrength() {\n      return strength;\n   }\n   public void setStrength(int strength) {\n      this.strength = strength;\n   } }",
      "choices": [
        "A. Add a getter method for material.",
        "B. Add a setter method for material.",
        "C. Change the access modifier of material to protected.",
        "D. Change the access modifier of strength to private.",
        "E. None of the above."
      ]
    },
    {
      "number": 103,
      "question": "103. Which are true statements about referencing variables from a lambda? (Choose two.)",
      "choices": [
        "A. Instance and static variables can be used regardless of whether they are effectively final.",
        "B. Instance and local variables can be used regardless of whether they are effectively final.",
        "C. Instance variables and method parameters must be effectively final to be used.",
        "D. Local variables and method parameters must be effectively final to be used.",
        "E. Local and static variables can be used regardless of whether they are effectively final.",
        "F. Method parameters and static variables can be used regardless of whether they are effectively final."
      ]
    },
    {
      "number": 104,
      "question": "104. Which statement about the following classes is correct?",
      "code": "import java.util.*;\nfinal class Faucet {\n   private final String water;\n   private final List<Double> pipes;\n   public Faucet(String water, List<Double> pipes) {\n      this.water = water;\n      this.pipes = pipes;\n   }\n   public String getWater() { return water; }\n   public List<Double> getPipes() { return pipes; } }\n \npublic final class Spout {\n   private final String well;\n   private final List<Boolean> buckets;\n   public Spout(String well, List<Boolean> buckets) {\n      this.well = well;\n      this.buckets = new ArrayList<>(buckets);\n   }\n   public String getWell() { return well; }\n \n   public List<Boolean> getBuckets() {\n      return new ArrayList<>(buckets);\n   } }",
      "choices": [
        "A. Only Faucet is immutable.",
        "B. Only Spout is immutable.",
        "C. Both classes are immutable.",
        "D. Neither class is immutable.",
        "E. None of the above, as one of the classes does not compile."
      ]
    },
    {
      "number": 105,
      "question": "105. Given the following structure, which snippets of code evaluate to true? (Choose three.)",
      "code": "interface Friendly {}\nabstract class Dolphin implements Friendly {}\nclass Animal implements Friendly {}\nclass Whale extends Object {}\nclass Fish {}\nclass Coral extends Animal {}",
      "choices": [
        "A. new Coral() instanceof Friendly",
        "B. null instanceof Object",
        "C. new Coral() instanceof Object",
        "D. new Fish() instanceof Friendly",
        "E. new Whale() instanceof Object",
        "F. new Dolphin() instanceof Friendly"
      ]
    },
    {
      "number": 106,
      "question": "106. What is true of the following code?",
      "code": "public class Eggs {\n   enum Animal {\n      CHICKEN(21), PENGUIN(75);\n \n      private int numDays;\n      private Animal(int numDays) {\n         this.numDays = numDays;\n      }\n      public int getNumDays() {\n         return numDays;\n      }\n      public void setNumDays(int numDays) {\n         this.numDays = numDays;\n      } }\n   public static void main(String[] args) {\n       Animal chicken = Animal.CHICKEN;\n       chicken.setNumDays(20);\n       System.out.print(chicken.getNumDays());\n       System.out.print(\" \");\n       System.out.print(Animal.CHICKEN.getNumDays());\n       System.out.print(\" \");\n       System.out.print(Animal.PENGUIN.getNumDays());\n   } }",
      "choices": [
        "A. It prints 20 20 20.",
        "B. It prints 20 20 75.",
        "C. It prints 20 21 75.",
        "D. It prints 21 21 75.",
        "E. It does not compile due to setNumDays().",
        "F. It does not compile for another reason."
      ]
    },
    {
      "number": 107,
      "question": "107. What is the first line to not compile in this interface?",
      "code": "1: public interface Thunderstorm {\n2:    float rain = 1;\n3:    char getSeason() { return 'W'; }\n4:    boolean isWet();\n5:    private static void hail() {}\n6:    default String location() { return \"Home\"; }\n7:    private static int getTemp() { return 35; }\n8: }",
      "choices": [
        "A. Line 2",
        "B. Line 3",
        "C. Line 4",
        "D. Line 5",
        "E. Line 6",
        "F. Line 7",
        "G. All of the lines compile."
      ]
    },
    {
      "number": 108,
      "question": "108. What is the output of the following application?",
      "code": "package finance;\nenum Currency { DOLLAR, YEN, EURO }\nabstract class Provider {\n   protected Currency c = Currency.EURO;\n}\npublic class Bank extends Provider {\n   protected Currency c = Currency.DOLLAR;\n   public static void main(String[] pennies) {\n      int value = 0;\n      switch(new Bank().c) {\n         case 0:\n            value--; break;\n         case 1:\n            value++; break;\n      }\n      System.out.print(value);\n   } }",
      "choices": [
        "A. -1",
        "B. 0",
        "C. 1",
        "D. The Provider class does not compile.",
        "E. The Bank class does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 109,
      "question": "109. Which of the following cannot be declared within a record? (Choose two.)",
      "choices": [
        "A. An implementation of hashCode()",
        "B. Instance variables",
        "C. static initializers",
        "D. Nested classes",
        "E. static methods",
        "F. Constructors",
        "G. Instance initializers"
      ]
    },
    {
      "number": 110,
      "question": "110. Which is equivalent to var q = 4.0f;?",
      "choices": [
        "A. float q = 4.0f;",
        "B. Float q = 4.0f;",
        "C. double q = 4.0f;",
        "D. Double q = 4.0f;",
        "E. Object q = 4.0f;"
      ]
    },
    {
      "number": 111,
      "question": "111. Fill in the blanks: A class may be assigned to a(n) ___________________ reference variable automatically but requires an explicit cast when assigned to a(n) ___________________ reference variable.",
      "choices": [
        "A. subclass, outer class",
        "B. superclass, subclass",
        "C. concrete class, subclass",
        "D. subclass, superclass",
        "E. abstract class, static class"
      ]
    },
    {
      "number": 112,
      "question": "112. Which statement about functional interfaces is invalid?",
      "choices": [
        "A. A functional interface can have any number of static methods.",
        "B. A functional interface can have any number of default methods.",
        "C. A functional interface can have any number of private static methods.",
        "D. A functional interface can have any number of abstract methods.",
        "E. A functional interface can have any number of private methods.",
        "F. All of the above are correct."
      ]
    },
    {
      "number": 113,
      "question": "113. What are possible outputs of the following given that the comment on line X can be replaced by arbitrary code?",
      "code": "// Mandrill.java\npublic class Mandrill {\n   public int age;\n   public Mandrill(int age) {\n      this.age = age;\n   }\n   public String toString() {\n      return \"\" + age;\n   }\n}\n \n// PrintAge.java\npublic class PrintAge {\n   public static void main (String[] args) {\n      var mandrill = new Mandrill(5);\n \n      // line X\n \n      System.out.println(mandrill);\n   } }",
      "choices": [
        "A. 0",
        "B. 5",
        "C. Either 0 or 5",
        "D. Any int value",
        "E. Does not compile"
      ]
    },
    {
      "number": 114,
      "question": "114. How many of the String objects are eligible for garbage collection right before the end of the main() method?",
      "code": "public static void main(String[] ohMy) {\n   String animal1 = new String(\"lion\");\n   String animal2 = new String(\"tiger\");\n   String animal3 = new String(\"bear\");\n \n   animal3 = animal1;\n   animal2 = animal3;\n   animal1 = animal2;\n}",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. None of the above"
      ]
    },
    {
      "number": 115,
      "question": "115. Suppose Panther and Cub are interfaces and neither contains any default methods. Which statements are true? (Choose two.)",
      "image": "chapter_3_115.png",
      "choices": [
        "A. If Panther has a single abstract method, Cub is guaranteed to be a functional interface.",
        "B. If Panther has a single abstract method, Cub may be a functional interface.",
        "C. If Panther has a single abstract method, Cub cannot be a functional interface.",
        "D. If Panther has two abstract methods, Cub is guaranteed to be a functional interface.",
        "E. If Panther has two abstract methods, Cub may be a functional interface.",
        "F. If Panther has two abstract methods, Cub cannot be a functional interface."
      ]
    },
    {
      "number": 116,
      "question": "116. What does the following output?",
      "code": "1:  public class InitOrder {\n2:     public String first = \"instance\";\n3:     public InitOrder() {\n4:        first = \"constructor\";\n5:     }\n6:     { first = \"block\";  }\n7:     public void print() {\n8:        System.out.println(first);\n9:     }\n10:    public static void main(String… args) {\n11:       new InitOrder().print();\n12:    } }",
      "choices": [
        "A. block",
        "B. constructor",
        "C. instance",
        "D. The code does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 117,
      "question": "117. Which statement about the following interface is correct?",
      "code": "public interface Tree {\n   public static void produceSap() {\n      growLeaves();\n   }\n   public abstract int getNumberOfRings() {\n      return getNumberOfRings();\n   }\n   private static void growLeaves() {\n      produceSap();\n   }\n   public default int getHeight() {\n      return getHeight ();\n   } }",
      "choices": [
        "A. The code compiles.",
        "B. The method produceSap() does not compile.",
        "C. The method getNumberOfRings() does not compile.",
        "D. The method growLeaves() does not compile.",
        "E. The method getHeight() does not compile.",
        "F. The code does not compile because it contains a cycle."
      ]
    },
    {
      "number": 118,
      "question": "118. Which statements about a variable with a type of var are true? (Choose two.)",
      "choices": [
        "A. The variable can be assigned null at initialization without any type information.",
        "B. The variable can be assigned null after initialization.",
        "C. The variable can never be assigned null.",
        "D. Only primitives can be used with the variable.",
        "E. Only objects can be used with the variable.",
        "F. Either a primitive or an object can be used with the variable."
      ]
    },
    {
      "number": 119,
      "question": "119. Assume there is a class Bouncer with a protected variable. Methods in which class can access this variable?",
      "choices": [
        "A. Any subclass of Bouncer or any class in the same package as Bouncer",
        "B. Any superclass of Bouncer",
        "C. Only subclasses of Bouncer",
        "D. Only classes in the same package as Bouncer",
        "E. None of the above"
      ]
    },
    {
      "number": 120,
      "question": "120. What is the output of the following application?",
      "code": "package forest;\npublic class Woods {\n   static class Tree {}\n   public static void main(String[] leaves) {\n      int heat = 2;\n      int water = 10-heat;\n      final class Oak extends Tree {  // p1\n         public int getWater() {\n            return water;             // p2\n         }\n      }\n      System.out.print(new Oak().getWater());\n      water = 0;\n   } }",
      "choices": [
        "A. 8",
        "B. Line p1 contains a compiler error.",
        "C. Line p2 contains a compiler error.",
        "D. Another line of code contains a compiler error.",
        "E. None of the above."
      ]
    },
    {
      "number": 121,
      "question": "121. Which of the following can fill in the blank to make the code compile? (Choose two.)",
      "code": "interface Australian {}\ninterface Mammal {}\n___________________ Australian, Mammal {}",
      "choices": [
        "A. class Quokka extends",
        "B. class Quokka implements",
        "C. Neither A nor B. Only one interface can be implemented.",
        "D. interface Quokka extends",
        "E. interface Quokka implements",
        "F. Neither D nor E. Only one interface can be extended."
      ]
    },
    {
      "number": 122,
      "question": "122. What is true of the following method?",
      "code": "public void setColor(String color) {\n   color = color;\n}",
      "choices": [
        "A. It is a correctly implemented accessor method.",
        "B. It is a correctly implemented mutator method.",
        "C. It is an incorrectly implemented accessor method.",
        "D. It is an incorrectly implemented mutator method.",
        "E. None of the above."
      ]
    },
    {
      "number": 123,
      "question": "123. Which of the following statements about calling this() in a constructor are true? (Choose three.)",
      "choices": [
        "A. If arguments are provided to this(), then there must be a constructor in the class that can take those arguments.",
        "B. If arguments are provided to this(), then there must be a constructor in the superclass that can take those arguments.",
        "C. If the no-argument this() is called within a constructor, then the class must explicitly implement the no-argument constructor.",
        "D. If super() and this() are both used in the same constructor, super() must appear on the line immediately after this().",
        "E. If super() and this() are both used in the same constructor, this() must appear on the line immediately after super().",
        "F. If this() is used, it must be the first line of the constructor."
      ]
    },
    {
      "number": 124,
      "question": "124. What is the result of compiling and executing the following class?",
      "code": "public class RollerSkates {\n   static int wheels = 1;\n   int tracks = 5;\n   public static void main(String[] wheels) {\n      RollerSkates s = new RollerSkates();\n      int feet = 4, tracks = 15;\n      System.out.print(feet + tracks + s.wheels);\n   } }",
      "choices": [
        "A. The code does not compile.",
        "B. 4",
        "C. 5",
        "D. 10",
        "E. 20"
      ]
    },
    {
      "number": 125,
      "question": "125. Which statements about the following program are correct? (Choose two.)",
      "code": "package vessel;\nclass Problem extends Exception {}\nabstract class Danger {\n   protected abstract void isDanger() throws Problem; // m1\n}\npublic class SeriousDanger extends Danger { // m2\n   protected void isDanger() throws Exception { // m3\n      throw new RuntimeException(); // m4\n   }\n   public static void main(String[] w) throws Throwable { // m5\n      var sd = new SeriousDanger().isDanger(); // m6\n   } }",
      "choices": [
        "A. The code does not compile because of line m1.",
        "B. The code does not compile because of line m2.",
        "C. The code does not compile because of line m3.",
        "D. The code does not compile because of line m4.",
        "E. The code does not compile because of line m5.",
        "F. The code does not compile because of line m6."
      ]
    },
    {
      "number": 126,
      "question": "126. Which statements about top-level and member inner classes are correct? (Choose three.)",
      "choices": [
        "A. Both can be marked protected.",
        "B. Only top-level classes can be declared final.",
        "C. Both can declare constructors.",
        "D. Member inner classes cannot be marked private.",
        "E. Member inner classes can access private variables of the top-level class in which it is defined.",
        "F. Both can be marked abstract."
      ]
    },
    {
      "number": 127,
      "question": "127. What is required to define a valid Java class file?",
      "choices": [
        "A. A class declaration",
        "B. A package statement",
        "C. An import statement",
        "D. A class declaration and package statement",
        "E. A class declaration and at least one import statement",
        "F. The public modifier"
      ]
    },
    {
      "number": 128,
      "question": "128. How many objects are eligible for garbage collection right before the end of the main() method?",
      "code": "public class Person {\n   public Person youngestChild;\n\n   public static void main(String... args) {\n      Person elena = new Person();\n      Person janeice = new Person();\n      elena.youngestChild = janeice;\n      janeice = null;\n      Person zoe = new Person();\n      elena.youngestChild = zoe;\n      zoe = null;\n   } }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. The code does not compile."
      ]
    },
    {
      "number": 129,
      "question": "129. What is the output of the following application?",
      "code": "package race; \ninterface Drive {\n   int SPEED = 5;\n   default Integer getSpeed() { return SPEED; }\n}\ninterface Hover {\n   String MAX_SPEED = \"10\";\n   default String getSpeed() { return MAX_SPEED; }\n}\npublic class Car implements Drive, Hover {\n   @Override public Object getSpeed() { return 15; }\n   public static void main(String[] gears) {\n      System.out.print(new Car().getSpeed());\n   } }",
      "choices": [
        "A. 5",
        "B. 10",
        "C. 15",
        "D. The code does not compile.",
        "E. The code compiles but produces an exception at runtime.",
        "F. The answer cannot be determined with the information given."
      ]
    },
    {
      "number": 130,
      "question": "130. What is the output of the following application? (Choose two.)",
      "code": "public class ChooseWisely {\n   public ChooseWisely() { super(); }\n   public int choose(int choice) { return 5; }\n   public int choose(short choice) { return 2; }\n   public int choose(long choice) { return 11; }\n   public int choose(double choice) { return 6; }\n   public int choose(Float choice) { return 8; }\n   public static void main(String[] path) {\n      ChooseWisely c = new ChooseWisely();\n      System.out.println(c.choose(2f));\n      System.out.println(c.choose((byte)2+1));\n   } }",
      "choices": [
        "A. 2",
        "B. 3",
        "C. 5",
        "D. 6",
        "E. 8",
        "F. 11"
      ]
    },
    {
      "number": 131,
      "question": "131. How many lines of the following program do not compile?",
      "code": "public enum Color {\n   RED(1,2) { void toSpectrum() {} },\n   BLUE(2) { void toSpectrum() {} void printColor() {} },\n   ORANGE() { void toSpectrum() {} },\n   GREEN(4);\n   public Color(int… color) {}\n   abstract void toSpectrum();\n   final void printColor() {}\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. More than three"
      ]
    },
    {
      "number": 132,
      "question": "132. What is the output of the Square program?",
      "code": "package shapes;\nabstract class Trapezoid {\n   private int getEqualSides() {return 0;}\n}\nabstract class Rectangle extends Trapezoid {\n   public static int getEqualSides() {return 2;}  // x1\n}\npublic class Square extends Rectangle {\n   public int getEqualSides() {return 4;}         // x2\n   public static void main(String[] corners) {\n      final Square myFigure = new Square() {};       // x3\n      System.out.print(myFigure.getEqualSides());\n   } }",
      "choices": [
        "A. 0",
        "B. 2",
        "C. 4",
        "D. The code does not compile due to line x1.",
        "E. The code does not compile due to line x2.",
        "F. The code does not compile due to line x3."
      ]
    },
    {
      "number": 133,
      "question": "133. What can fill in the blank so that the play() method can be called from all classes in the com.mammal package but not the com.mammal.gopher package?",
      "code": "package com.mammal;\npublic class Enrichment {\n  _________ void play() {}\n}",
      "choices": [
        "A. Leave it blank",
        "B. private",
        "C. protected",
        "D. public",
        "E. None of the above"
      ]
    },
    {
      "number": 134,
      "question": "134. How many cells in the following table are incorrect?",
      "code": "Type             Allows abstract methods?    Allows constants?    Allows constructors?\nAbstract class        Yes                             Yes                         No\nConcrete class       Yes                             Yes                         Yes\nInterface                 Yes                             Yes                         Yes",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five",
        "G. Six"
      ]
    },
    {
      "number": 135,
      "question": "135. Which modifiers are permitted on a direct subclass of a sealed class? (Choose three.)",
      "choices": [
        "A. void",
        "B. default",
        "C. public",
        "D. private",
        "E. volatile",
        "F. final",
        "G. nonsealed"
      ]
    },
    {
      "number": 136,
      "question": "136. Which statements are true about a functional interface? (Choose three.)",
      "choices": [
        "A. It may contain any number of abstract methods.",
        "B. It must contain a single abstract method.",
        "C. It may contain any number of private methods.",
        "D. It must contain a single private method.",
        "E. It may contain any number of static methods.",
        "F. It must contain a single static method."
      ]
    },
    {
      "number": 137,
      "question": "137. What is a possible output of the following application?",
      "code": "package wrap;\npublic class Gift {\n   private final Object contents;\n   protected Object getContents() {\n      return contents;\n   }\n   protected void setContents(Object contents) {\n      this.contents = contents;\n   }\n   public void showPresent() {\n      System.out.print(\"Your gift: \"+contents);\n   }\n   public static void main(String[] treats) {\n      var gift = new Gift();\n      gift.setContents(gift);\n      gift.showPresent();\n   } }",
      "choices": [
        "A. Your gift: wrap.Gift@29ca2745",
        "B. Your gift: Your gift:",
        "C. It does not compile.",
        "D. It compiles but throws an exception at runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 138,
      "question": "138. How many lines would need to be corrected for the following code to compile?",
      "code": "1:  package animal;\n2:  interface CanFly {\n3:     public void fly() {}\n4:     int speed = 5;\n5:  }\n6:  final class Bird {\n7:     public int fly(int speed) {}\n8:  }\n9:  public class Eagle extends Bird implements CanFly {\n10:    public void fly() {}\n11: }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 139,
      "question": "139. What is the output of the following code?",
      "code": "public class Bunny {\n   static class Rabbit {\n      void hop() {\n         System.out.print(\"hop\");\n      }\n   }\n   static class FlemishRabbit extends Rabbit {\n      void hop() {\n         System.out.print(\"HOP\");\n      }\n    }\n    public static void main(String[] args) {\n       Rabbit r1 = new FlemishRabbit();\n       FlemishRabbit r2 = new FlemishRabbit();\n       r1.hop();\n       r2.hop();\n    } }",
      "choices": [
        "A. hophop",
        "B. HOPhop",
        "C. hopHOP",
        "D. HOPHOP",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 140,
      "question": "140. Which of the following are valid class declarations? (Choose three.)",
      "choices": [
        "A. class _ {}",
        "B. class river {}",
        "C. class Str3@m {}",
        "D. class Pond2$ {}",
        "E. class _var_ {}",
        "F. class 5Ocean {}"
      ]
    },
    {
      "number": 141,
      "question": "141. What is the output of the InfiniteMath program?",
      "code": "class Math {\n   public final double secret = 2;\n}\nclass ComplexMath extends Math {\n   public final double secret = 4;\n}\npublic class InfiniteMath extends ComplexMath {\n   public final double secret = 8;\n   public static void main(String[] numbers) {\n      Math math = new InfiniteMath();\n      System.out.print(math.secret);\n   } }",
      "choices": [
        "A. 2.0",
        "B. 4.0",
        "C. 8.0",
        "D. The code does not compile.",
        "E. The code compiles but prints an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 142,
      "question": "142. Given the following application, which diagram best represents the state of the mySkier, mySpeed, and myName variables in the main() method after the call to the slalom() method?",
      "code": "package slopes;\npublic class Ski {\n   private int age = 18;\n   private static void slalom(Ski racer,\n         int[] speed, String name) {\n      racer.age = 18;\n      name = \"Wendy\";\n      speed = new int[1];\n      speed[0] = 11;\n      racer = null;\n   }\n   public static void main(String[] mountain) {\n      final var mySkier = new Ski();\n      mySkier.age = 16;\n      final int[] mySpeed = new int[1];\n      final String myName = \"Rosie\";\n      slalom(mySkier, mySpeed, myName);\n   } }",
      "choices": [
        "A. ",
        "B. ",
        "C. ",
        "D. "
      ]
    },
    {
      "number": 143,
      "question": "143. What is the output of the following application?",
      "code": "package zoo;\npublic class Penguin {\n   private int volume = 1;\n   private class Chick {\n      private static int volume = 3;\n      void chick(int volume) {\n         System.out.print(\"Honk(\"+Penguin.this.volume+\")!\");\n      } }\n   public static void main(String… eggs) {\n      Penguin pen = new Penguin();\n      final Penguin.Chick littleOne = pen.new Chick();\n      littleOne.chick(5);\n   } }",
      "choices": [
        "A. Honk(1)!",
        "B. Honk(3)!",
        "C. Honk(5)!",
        "D. The code does not compile.",
        "E. The code compiles, but the output cannot be determined until runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 144,
      "question": "144. What is a possible output of the following program?",
      "code": "record Name(String v) {}\npublic record Fruit(Name n) {\n   public static void main(String[] vitamins) {\n      var x = new Name(\"Apple\");\n      System.out.println(new Fruit(x));\n   } }",
      "choices": [
        "A. Fruit@3f2f5b24",
        "B. Fruit[Apple]",
        "C. Fruit[Name[Apple]]",
        "D. Fruit[n=Apple]",
        "E. Fruit[n=Name[v=Apple]]",
        "F. Fruit[v=Apple]",
        "G. The code does not compile.",
        "H. None of the above."
      ]
    },
    {
      "number": 145,
      "question": "145. Fill in the blank with the line of code that allows the program to compile and print X at runtime.",
      "code": "interface Fruit {\n   public default char getColor() { return 'Z'; }\n}\ninterface Edible  {\n   public default char getColor() { return 'X'; } \n}\npublic class Banana implements Fruit, Edible {\n   public char getColor() { return _________________; }\n   public static void main(String[] a) {\n      var d = new Banana();\n      System.out.println(d.getColor());\n   } }",
      "choices": [
        "A. Edible.getColor()",
        "B. Edible.super.getColor()",
        "C. super.Edible.getColor()",
        "D. super.getColor()",
        "E. The code does not compile regardless of what is inserted into the blank.",
        "F. None of the above."
      ]
    },
    {
      "number": 146,
      "question": "146. Given the following two classes, each in a different package, which line inserted into the code allows the second class to compile?",
      "code": "package clothes;\npublic class Store {\n   public static String getClothes() { return \"dress\"; }\n}\n \npackage wardrobe;\n// INSERT CODE HERE\npublic class Closet {\n   public void borrow() {\n      System.out.print(\"Borrowing clothes: \"+getClothes());\n   } }",
      "choices": [
        "A. static import clothes.Store.getClothes;",
        "B. import clothes.Store.*;",
        "C. import static clothes.Store.getClothes;",
        "D. import static clothes.Store;",
        "E. None of the above"
      ]
    },
    {
      "number": 147,
      "question": "147. What is the output of the ElectricCar program?",
      "code": "package vehicles;\nclass Automobile {\n   private final String drive() { return \"Driving vehicle\"; }\n}\nclass Car extends Automobile {\n   protected String drive() { return \"Driving car\"; }\n}\npublic class ElectricCar extends Car {\n   public final String drive() { return \"Driving electric car\"; }\n   public static void main(String[] wheels) {\n      final Automobile car = new ElectricCar();\n      var v = (Car)car;\n      System.out.print(v.drive());\n   } }",
      "choices": [
        "A. Driving vehicle",
        "B. Driving electric car",
        "C. Driving car",
        "D. The code does not compile.",
        "E. The code compiles but produces a ClassCastException at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 148,
      "question": "148. Which statements about sealed classes are correct? (Choose three.)",
      "choices": [
        "A. A sealed class may be extended by another sealed class.",
        "B. In an unnamed module, a sealed class must include all its subclasses within the same file.",
        "C. A sealed class cannot contain nested classes.",
        "D. A sealed class can be declared abstract.",
        "E. A sealed class can be declared final.",
        "F. In an unnamed module, a sealed class must include all its subclasses within the same package."
      ]
    },
    {
      "number": 149,
      "question": "149. What is the output of the following program?",
      "code": "public class Music {\n   { System.out.print(\"do-\"); }\n   static { System.out.print(\"re-\"); }\n   { System.out.print(\"mi-\"); }\n   static { System.out.print(\"fa-\"); }\n   public Music() {\n      System.out.print(\"so-\");\n   }\n   public Music(int note) {\n      System.out.print(\"la-\");\n   }\n   public static void main(String[] sound) {\n      System.out.print(\"ti-\");\n      var play = new Music();\n   } }",
      "choices": [
        "A. re-fa-ti-do-mi-so-",
        "B. do-re-mi-fa-ti-so-",
        "C. ti-re-fa-do-mi-so-",
        "D. re-fa-la-mi-ti-do-",
        "E. do-re-mi-fa-so-ti",
        "F. The code does not compile.",
        "G. None of the above."
      ]
    },
    {
      "number": 150,
      "question": "150. Given the following class declaration, which options correctly declare a local variable containing an instance of the class?",
      "code": "public class Earth {\n   private abstract class Sky {\n      void fall() {\n         var e = _________________\n      } } }",
      "choices": [
        "A. new Sunset() extends Sky {};",
        "B. new Sky();",
        "C. new Sky() {}",
        "D. new Sky() { final static int blue = 1; };",
        "E. The code does not compile regardless of what is placed in the blank.",
        "F. None of the above."
      ]
    },
    {
      "number": 151,
      "question": "151. What is the output of the Encyclopedia program?",
      "code": "package paper;\nabstract class Book {\n   protected static String material = \"papyrus\";\n   public Book() {}\n   abstract String read() {}\n   public Book(String material) {this.material = material;}\n}\npublic class Encyclopedia extends Book {\n   public static String material = \"cellulose\";\n   public Encyclopedia() {super();}\n   public String read() { return \"Reading is fun!\"; }\n   public String getMaterial() {return super.material;}\n \n   public static void main(String[] pages) {\n      System.out.print(new Encyclopedia().read());\n      System.out.print(\"-\" + new Encyclopedia().getMaterial());\n   } }",
      "choices": [
        "A. Reading is fun!-papyrus",
        "B. Reading is fun!-cellulose",
        "C. null-papyrus",
        "D. null-cellulose",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 152,
      "question": "152. What does the following print?",
      "code": "interface Vehicle {}\nclass Bus implements Vehicle {}\npublic class Transport { \n   public static void main(String[] args) {\n      Vehicle vehicle = new Bus();\n      boolean n = null instanceof Bus;\n      boolean v = vehicle instanceof Vehicle;\n      boolean b = vehicle instanceof Bus;\n      System.out.println(n + \" \" + v + \" \" + b);\n  } }",
      "choices": [
        "A. false false false",
        "B. false false true",
        "C. false true true",
        "D. true false true",
        "E. true true false",
        "F. true true true"
      ]
    },
    {
      "number": 153,
      "question": "153. How many rows of the following table contain an error?",
      "code": "Interface member           Optional modifier(s)    Required modifier(s)\nPrivate method               private                          -\nDefault method              public                          default\nStatic method                public static                -\nAbstract method            public                           abstract",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 154,
      "question": "154. What is the output of the following program?",
      "code": "public class Dwarf {\n   private final String name;\n   public Dwarf() {\n      this(\"Bashful\");\n   }\n   public Dwarf(String name) {\n      name = \"Sleepy\";\n   }\n   public static void main(String[] sound) {\n      var d = new Dwarf(\"Doc\");\n      System.out.println(d.name);\n   } }",
      "choices": [
        "A. Sleepy",
        "B. Bashful",
        "C. Doc",
        "D. The code does not compile.",
        "E. An exception is thrown at runtime."
      ]
    },
    {
      "number": 155,
      "question": "155. What is the output of the following application?",
      "code": "package pocketmath;\ninterface AddNumbers {\n   int add(int x, int y);\n   static int subtract(int x, int y) { return x-y; }\n   default int multiply(int x, int y) { return x*y; }\n}\npublic class Calculator {\n   protected void calculate(AddNumbers n, int a, int b) {\n      System.out.print(n.add(a, b));\n   }\n   public static void main(String[] moreNumbers) {\n      final var ti = new Calculator() {};\n      ti.calculate((k,p) -> p+k+1, 2, 5);  // x1\n   } }",
      "choices": [
        "A. 0",
        "B. 7",
        "C. 8",
        "D. The code does not compile because AddNumbers is not a functional interface.",
        "E. The code does not compile because of line x1.",
        "F. The code does not compile for a different reason.",
        "G. None of the above."
      ]
    },
    {
      "number": 156,
      "question": "156. Which of the following variables are always in scope for the entire program once defined?",
      "choices": [
        "A. Package variables",
        "B. Class variables",
        "C. Instance variables",
        "D. Local variables",
        "E. Pseudo variables"
      ]
    },
    {
      "number": 157,
      "question": "157. What is the command to call one constructor from another constructor in the same class?",
      "choices": [
        "A. construct()",
        "B. parent()",
        "C. super()",
        "D. this()",
        "E. that()",
        "F. overthere()"
      ]
    },
    {
      "number": 158,
      "question": "158. Which of the following statements about no-argument constructors and inheritance are correct? (Choose two.)",
      "choices": [
        "A. The compiler cannot insert a no-argument constructor into an abstract class.",
        "B. If a parent class does not include a no-argument constructor, a child class cannot declare one.",
        "C. If a parent class only declares constructors that take at least one parameter, then a child class must declare at least one constructor.",
        "D. The no-argument constructor is sometimes inserted by the compiler.",
        "E. If a parent class declares a no-argument constructor, a child class must declare a no-argument constructor.",
        "F. If a parent class declares a no-argument constructor, a child class must declare at least one constructor."
      ]
    },
    {
      "number": 159,
      "question": "159. What is the result of executing the Grasshopper program?",
      "code": "// Hopper.java\npackage com.animals;\npublic class Hopper {\n   protected void hop() {\n      System.out.println(\"hop\");\n   }\n}\n\n// Grasshopper.java\npackage com.insect;\nimport com.animals.Hopper;\npublic class Grasshopper extends Hopper {\n   public void move() {\n      hop();  // p1\n   }\n   public static void main(String[] args) {\n      var hopper = new Grasshopper();\n      hopper.move();  // p2\n      hopper.hop();   // p3\n   } }",
      "choices": [
        "A. The code prints hop once.",
        "B. The code prints hop twice.",
        "C. The first compiler error is on line p1.",
        "D. The first compiler error is on line p2.",
        "E. The first compiler error is on line p3."
      ]
    },
    {
      "number": 160,
      "question": "160. What is the minimum number of lines that need to be removed to make this code compile?",
      "code": "@FunctionalInterface\npublic interface Play {\n   public static void baseball() {}\n   private static void soccer() {}\n   default void play() {}\n   void fun();\n   void game();\n   void toy();\n}",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. The code compiles as is."
      ]
    },
    {
      "number": 161,
      "question": "161. Which statement about the following classes is correct?",
      "code": "import java.util.*;\npublic class Flower {\n   private final String name;\n   private final List<Integer> counts;\n   public Flower(String name, List<Integer> counts) {\n      this.name = name;\n      this.counts = new ArrayList<>(counts);\n   }\n   public final String getName() { return name; }\n   public final List<Integer> getCounts() {\n      return new ArrayList<>(counts);\n   } }\n \nclass Plant {\n   private final String name;\n   private final List<Integer> counts;\n   public Plant(String name, List<Integer> counts) {\n      this.name = name;\n      this.counts = new ArrayList<>(counts);\n   }\n   public String getName() { return name; }\n   public List<Integer> getCounts() {\n      return new ArrayList<>(counts);\n   } }",
      "choices": [
        "A. Only Flower is immutable.",
        "B. Only Plant is immutable.",
        "C. Both classes are immutable.",
        "D. Neither class is immutable.",
        "E. None of the above, as one of the classes does not compile."
      ]
    },
    {
      "number": 162,
      "question": "162. What is the result of executing the Sounds program?",
      "code": "// Sheep.java\npackage com.mammal;\npublic class Sheep {\n   private void baa() {\n      System.out.println(\"baa!\");\n   }\n   private void speak() {\n      baa();\n   } }\n\n// Sounds.java\npackage com.animals;\nimport com.mammal.Sheep;\npublic class Sounds {\n   public static void main(String[] args) {\n      var sheep = new Sheep();\n      sheep.speak();\n   } }",
      "choices": [
        "A. The code runs and prints baa!.",
        "B. The Sheep class does not compile.",
        "C. The Sounds class does not compile.",
        "D. Neither class compiles.",
        "E. None of the above."
      ]
    },
    {
      "number": 163,
      "question": "163. What is the output of the following application?",
      "code": "package stocks;\npublic class Bond {\n   private static int price = 5;\n   public boolean sell() {\n      if(price<10) {\n         price++;\n         return true;\n      } else if(price>=10) {\n         return false;\n      } }\n   public static void main(String[] cash) {\n      new Bond().sell();\n      new Bond().sell();\n      new Bond().sell();\n      System.out.print(price);\n   } }",
      "choices": [
        "A. 5",
        "B. 6",
        "C. 7",
        "D. 8",
        "E. The code does not compile.",
        "F. The output cannot be determined with the information given."
      ]
    },
    {
      "number": 164,
      "question": "164. Given the following class declaration, what expression can be used to fill in the blank so that 88 is printed at runtime?",
      "code": "final public class Racecar {\n   final private int speed = 88;\n   final protected class Engine {\n      private final int speed = 100;\n      public final int getSpeed() {\n         return ________________________;\n      }\n   }\n   final Engine e = new Engine();\n   final public static void main(String[] feed) {\n      System.out.print(new Racecar().e.getSpeed());\n   } }",
      "choices": [
        "A. Racecar.speed",
        "B. this.speed",
        "C. this.Racecar.speed",
        "D. Racecar.Engine.this.speed",
        "E. Racecar.this.speed",
        "F. The code does not compile regardless of what is placed in the blank."
      ]
    },
    {
      "number": 165,
      "question": "165. Which statements about static initializers are correct? (Choose three.)",
      "choices": [
        "A. They cannot be used to create instances of the class they are contained in.",
        "B. They can assign a value to a static final variable.",
        "C. They are executed at most once per program.",
        "D. They are executed each time an instance of the class is created from a local cache of objects.",
        "E. They are executed each time an instance of the class is created using the new keyword.",
        "F. They may never be executed."
      ]
    },
    {
      "number": 166,
      "question": "166. What is the output of the BlueCar program?",
      "code": "package race;\nabstract class Car {\n   static { System.out.print(\"1\"); }\n   public Car(String name) {\n      super();\n      System.out.print(\"2\");\n   }\n   { System.out.print(\"3\"); } }\npublic class BlueCar extends Car {\n   { System.out.print(\"4\"); }\n   public BlueCar() {\n      super(\"blue\");\n      System.out.print(\"5\");\n   }\n   public static void main(String[] gears) {\n      new BlueCar();\n   } }",
      "choices": [
        "A. 23451",
        "B. 12345",
        "C. 14523",
        "D. 13245",
        "E. 23154",
        "F. The code does not compile.",
        "G. None of the above."
      ]
    },
    {
      "number": 167,
      "question": "167. The following Fish class is included, unmodified, in a larger program at runtime. As most, how many classes can inherit Fish (excluding Fish itself)?",
      "code": "public sealed class Fish {\n   final class Blobfish extends Clownfish {}\n   private non-sealed class Dory extends BlueTang {}\n   sealed class Clownfish extends Fish {}\n   sealed class BlueTang extends Fish {}\n   final class Swordfish extends Fish {}\n   private non-sealed class Nemo extends Clownfish {}\n}",
      "choices": [
        "A. None",
        "B. Four",
        "C. Five",
        "D. Six",
        "E. One of the nested classes does not compile.",
        "F. Two or more of the nested classes do not compile.",
        "G. The number cannot be determined with the information given."
      ]
    },
    {
      "number": 168,
      "question": "168. Given the following class declaration, which value cannot be inserted into the blank line that would allow the code to compile?",
      "code": "package mammal;\ninterface Pet {\n   public Object getDoggy();\n}\npublic class Canine implements Pet {\n   public __________ getDoggy() {\n      return this;\n   } }",
      "choices": [
        "A. Canine",
        "B. List",
        "C. Object",
        "D. Pet",
        "E. All of the above can be inserted.",
        "F. The code does not compile regardless of what is inserted into the blank."
      ]
    },
    {
      "number": 169,
      "question": "169. Which statement about the following interface is correct?",
      "code": "public interface Movie {\n   String pass = \"TICKET\";\n   private void buyPopcorn() {\n      purchaseTicket();\n   }\n   public static int getDrink() {\n      buyPopcorn();\n      return 32;\n   }\n   private static String purchaseTicket() {\n      getDrink();\n      return pass;\n   } }",
      "choices": [
        "A. The code compiles.",
        "B. The code contains an invalid constant.",
        "C. The method buyPopcorn() does not compile.",
        "D. The method getDrink() does not compile.",
        "E. The method purchaseTicket() does not compile.",
        "F. The code does not compile for a different reason."
      ]
    },
    {
      "number": 170,
      "question": "170. Which methods compile?",
      "code": "class YardWork {\n   private static int numShovels;\n   private int numRakes;\n   public int getNumShovels() {\n      return numShovels;\n   }\n   public int getNumRakes() {\n      return numRakes;\n   } }",
      "choices": [
        "A. Just getNumRakes()",
        "B. Just getNumShovels()",
        "C. Both methods",
        "D. Neither method"
      ]
    },
    {
      "number": 171,
      "question": "171. How many lines of the following class contain compilation errors?\n1: class Fly {\n2:    public Fly Fly() { return new Fly(); }\n3:    public void Fly(int kite) {}\n4:    public int Fly(long kite) { return 1; }\n5:    public static void main(String[] a) {\n6:       var f = new Fly();\n7:       f.Fly();\n8:    } }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. The answer cannot be determined with the information given."
      ]
    },
    {
      "number": 172,
      "question": "172. How many of the classes in the diagram can write code that references the sky() method?",
      "image": "chapter_3_172.png",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 173,
      "question": "173. For the diagram in Question 172, how many classes can write code that references the light variable?",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 174,
      "question": "174. Which of the following are the best reasons for creating a public static interface method? (Choose two.)",
      "choices": [
        "A. Allow static methods to access instance methods.",
        "B. Allow an interface to define a method at the class level.",
        "C. Provide an implementation that a class implementing the interface can override.",
        "D. Improve code reuse within the interface.",
        "E. Add backward compatibility to existing interfaces.",
        "F. Improve encapsulation of the interface."
      ]
    },
    {
      "number": 175,
      "question": "175. What is the output of the HighSchool application?",
      "code": "package edu;\nimport java.io.FileNotFoundException;\nabstract class School {\n   abstract Float getNumTeachers();\n   public int getNumStudents() {\n      return 10;\n   } }\npublic class HighSchool extends School {\n   final Float getNumTeachers() { return 4f; }\n   public int getNumStudents() throws FileNotFoundException {\n      return 20;\n   }\n   public static void main(String[] s) throws Exception {\n      var school = new HighSchool();\n      System.out.print(school.getNumStudents());\n   } }",
      "choices": [
        "A. 10",
        "B. 20",
        "C. 4.0",
        "D. One line of the program does not compile.",
        "E. Two lines of the program do not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 176,
      "question": "176. What is the output of the following application?",
      "code": "package track;\ninterface Run {\n   default CharSequence walk() {\n      return \"Walking and running!\";\n   } }\ninterface Jog {\n   default String walk() {\n      return \"Walking and jogging!\";\n   } }\npublic class Sprint implements Run, Jog {\n   public String walk() {\n      return \"Sprinting!\";\n   }\n   public static void main(String[] args) {\n      var s = new Sprint();\n      System.out.println(s.walk());\n   } }",
      "choices": [
        "A. Walking and running!",
        "B. Walking and jogging!",
        "C. Sprinting!",
        "D. The code does not compile.",
        "E. The code compiles but prints an exception at runtime.",
        "F. None of the above."
      ]
    },
    {
      "number": 177,
      "question": "177. What is true of these two interfaces?",
      "code": "interface Crawl {\n   abstract void wriggle();\n}\ninterface Dance {\n   public void wriggle();\n}",
      "choices": [
        "A. A concrete class can implement both interfaces, but must implement wriggle().",
        "B. A concrete class can implement both interfaces, but must not implement wriggle().",
        "C. A concrete class would only be able to implement both interfaces if the public modifier were removed but must implement wriggle().",
        "D. If the public modifier were removed, a concrete class could implement both interfaces, but must not implement wriggle().",
        "E. None of the above."
      ]
    },
    {
      "number": 178,
      "question": "178. Which of these are functional interfaces?",
      "code": "interface Lion {\n   public void roar();\n   default void drink() {}\n   boolean equals(Lion lion);\n}\ninterface Tiger {\n   public void roar();\n   default void drink() {}\n   String toString(String name);\n}\ninterface Bear {\n   void ohMy();\n   default void drink() {}\n}",
      "choices": [
        "A. Lion",
        "B. Tiger",
        "C. Bear",
        "D. Lion and Tiger",
        "E. Tiger and Bear",
        "F. Bear and Lion",
        "G. None of them",
        "H. All of them"
      ]
    },
    {
      "number": 179,
      "question": "179. How many lines of the following class contain a compiler error?",
      "code": "1:  public class Dragon {\n2:     boolean scaly;\n3:     static final int gold;   \n4:     Dragon protectTreasure(int value, boolean scaly) {\n5:        scaly = true;\n6:        return this;\n7:     }   \n8:     static void fly(boolean scaly) {\n9:        scaly = true;\n10:    }   \n11:    int saveTheTreasure(boolean scaly) {\n12:       return this.gold;\n13:    }   \n14:    static void saveTheDay(boolean scaly) {\n15:       this.gold = 0;\n16:    }\n17:    static { gold = 100; } }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. More than three"
      ]
    },
    {
      "number": 180,
      "question": "180. Which are requirements for a class to be immutable? (Choose three.)",
      "choices": [
        "A. A private constructor is provided.",
        "B. Any instance variables are private.",
        "C. Any instance variables are initialized in a constructor.",
        "D. Methods cannot be overridden.",
        "E. There are no mutator methods that modify instance variables.",
        "F. Any instance variables are marked final."
      ]
    },
    {
      "number": 181,
      "question": "181. Which statement about the following interface is correct?",
      "code": "public interface Planet {\n   int circumference;\n   public abstract void enterAtmosphere();\n   public default int getCircumference() {\n      enterAtmosphere();\n      return circumference;\n   }\n   private static void leaveOrbit() {\n      var earth = new Planet() {\n         public void enterAtmosphere() {}\n      };\n      earth.getCircumference();\n   } }",
      "choices": [
        "A. The code compiles.",
        "B. The method enterAtmosphere() does not compile.",
        "C. The method getCircumference() does not compile.",
        "D. The method leaveOrbit() does not compile.",
        "E. The code does not compile for a different reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 182,
      "question": "182. What is the output of the following program?",
      "code": "import java.time.*;\nimport java.time.temporal.*;\npublic record User(LocalDate creationDate) {\n   static LocalDate today = LocalDate.now();\n   public User {\n      creationDate = today;\n      creationDate = today;\n   }\n   public static void main(String[] p) {\n      LocalDate yesterday = LocalDate.now()\n         .minus(1, ChronoUnit.DAYS);\n      var u = new User(yesterday);\n      System.out.print(u.creationDate());\n   } }",
      "choices": [
        "A. null",
        "B. Today's date",
        "C. Yesterday's date",
        "D. An exception is thrown at runtime.",
        "E. Exactly one line needs to be corrected for the code to compile.",
        "F. Two or more lines need to be corrected for the code to compile.",
        "G. None of the above."
      ]
    },
    {
      "number": 183,
      "question": "183. Fill in the blanks: ___________________ methods always have the same name but a different list of parameters, while ___________________ methods always have the same name and the same return type.",
      "choices": [
        "A. Overloaded, overridden",
        "B. Inherited, overridden",
        "C. Overridden, overloaded",
        "D. Hidden, overloaded",
        "E. Overridden, hidden",
        "F. None of the above"
      ]
    },
    {
      "number": 184,
      "question": "184. What is the output of the following program?",
      "code": "public class Husky {\n   { this.food = 10; }\n   { this.toy = 2; }\n   private final int toy;\n   private static int food;\n   public Husky(int friend) {\n      this.food += friend++;\n      this.toy -= friend--;\n   }\n   public static void main(String… unused) {\n      var h = new Husky(2);\n      System.out.println(h.food+\",\"+h.toy);\n   } }",
      "choices": [
        "A. 12,-1",
        "B. 12,2",
        "C. 13,-1",
        "D. Exactly one line of this class does not compile.",
        "E. Exactly two lines of this class do not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 185,
      "question": "185. Suppose you have the following code. Which of the images best represents the state of the references right before the end of the main() method, assuming garbage collection hasn't run?",
      "code": "1:  public class Link {\n2:     private String name;\n3:     private Link next;\n4:     public Link(String name, Link next) {\n5:        this.name = name;\n6:        this.next = next;\n7:     }\n8:     public void setNext(Link next) {\n9:        this.next = next;\n10:    }\n11:    public Link getNext() {\n12:       return next;\n13:    }\n14:    public static void main(String… args) {\n15:       var apple = new Link(\"x\", null);\n16:       var orange = new Link(\"y\", apple);\n17:       var banana = new Link(\"z\", orange);\n18:       orange.setNext(banana);\n19:       banana.setNext(orange);\n20:       apple = null;\n21:       banana = null;\n22:    } }",
      "image": "chapter_3_185.png",
      "choices": [
        "A. Option A",
        "B. Option B",
        "C. Option C",
        "D. Option D",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 186,
      "question": "186. Which statement about a no-argument constructor is true?",
      "choices": [
        "A. The Java compiler will always insert a default no-argument constructor if you do not define a no-argument constructor in your class.",
        "B. For a class to call super() in one of its constructors, its parent class must explicitly implement a constructor.",
        "C. If a class extends another class that has only one constructor that takes a value, then the child class must explicitly declare at least one constructor.",
        "D. A class may contain more than one no-argument constructor.",
        "E. None of the above."
      ]
    },
    {
      "number": 187,
      "question": "187. Which variable declaration is the first line not to compile?",
      "code": "public class Complex {\n   class Building {}\n   final class House extends Building {}\n \n   public void convert() {\n      Building b1 =  new Building();\n      House h1 = new House();\n      Building b2 = new House();\n      Building b3 = (House) b1;\n      House h2 = (Building) h1;\n      Building b4 = (Building) b2;\n      House h3 = (House) b2;\n   } }",
      "choices": [
        "A. b2",
        "B. b3",
        "C. h2",
        "D. b4",
        "E. h3",
        "F. All of the lines compile."
      ]
    },
    {
      "number": 188,
      "question": "188. What is the output of the following application?",
      "code": "1:  interface Tasty {\n2:     default void eat() {\n3:        System.out.print(\"Spoiled!\");\n4:     } }\n5:  public class ApplePicking {\n6:     public static void main(String[] food) {\n7:        var apple = new Tasty() {\n8:           @Override\n9:           void eat() {\n10:             System.out.print(\"Yummy!\");\n11:          }\n12:       } \n13:    }\n14: }",
      "choices": [
        "A. Spoiled!",
        "B. Yummy!",
        "C. The application completes without printing anything.",
        "D. One line needs to be corrected for the program to compile.",
        "E. Two lines need to be corrected for the program to compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 189,
      "question": "189. Which of the following statements about functional interfaces is true?",
      "choices": [
        "A. It is possible to define a functional interface that returns two data types.",
        "B. It is possible to define a primitive functional interface that uses float, char, or short.",
        "C. All functional interfaces must take arguments or return a value.",
        "D. None of the primitive functional interfaces includes generic arguments.",
        "E. None of these statements is true."
      ]
    },
    {
      "number": 190,
      "question": "190. What is the result of executing the Tortoise program?",
      "code": "// Hare.java\npackage com.mammal;\npublic class Hare {\n   void init() {\n      System.out.print(\"init-\");\n   }\n   protected void race() {\n      System.out.print(\"hare-\");\n   } }\n \n// Tortoise.java\npackage com.reptile;\nimport com.mammal.Hare;\npublic class Tortoise {\n   protected void race(Hare hare) {\n      hare.init();    // x1\n      hare.race();    // x2\n      System.out.print(\"tortoise-\");\n    }\n    public static void main(String[] args) {\n       var tortoise = new Tortoise();\n       var hare = new Hare();\n       tortoise.race(hare);\n   } }",
      "choices": [
        "A. init-hare-tortoise",
        "B. init-hare",
        "C. The first line with a compiler error is line x1.",
        "D. The first line with a compiler error is line x2.",
        "E. The code does not compile due to a different line.",
        "F. The code throws an exception."
      ]
    },
    {
      "number": 191,
      "question": "191. How many lines of the following program do not compile?",
      "code": "interface Tool {\n   void use(int fun);\n}\nabstract class Childcare {\n   abstract void use(int fun);\n}\nfinal public class Stroller extends Childcare implements Tool {\n   final public void use(int fun) {\n      final int width = 5;\n      class ParkVisit {\n         final int getValue() { return width + fun; }\n      }\n      System.out.print(new ParkVisit().getValue());\n   } }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. More than three"
      ]
    },
    {
      "number": 192,
      "question": "192. What is the result of executing the Bush program?",
      "code": "// Evergreen.java\npackage tree;\npublic class Evergreen {\n   String leaves = \"Green \";\n   default void season() {\n      System.out.println(\"spring\");\n   }\n   default void bloom() {\n      season();\n   } }\n \n// Bush.java\npackage shrub;\nimport tree.Evergreen;\npublic class Bush {\n   public static void main(String[] args) {\n      var var = new Evergreen();\n      System.out.print(var.leaves);\n      var.bloom();\n   } }",
      "choices": [
        "A. The code runs and prints Green spring.",
        "B. The code runs and prints Green springspring.",
        "C. The Evergreen class does not compile.",
        "D. The Bush class does not compile.",
        "E. Neither class compiles."
      ]
    },
    {
      "number": 193,
      "question": "193. What is the output of the following program?",
      "code": "public sealed class Seasons {\n   final static class Spring extends Seasons {}\n   non-sealed class Summer extends Seasons {}\n   public static void main(String[] w) {\n      var t = new Spring();\n      final String m = switch (t) {\n         case Spring -> \"Flowers\";\n         case Summer -> \"Pool\";\n         default -> \"Snow\";\n      };\n      System.out.print(m);\n   } }",
      "choices": [
        "A. Flowers",
        "B. Pool",
        "C. Snow",
        "D. The Spring declaration does not compile.",
        "E. The Summer declaration does not compile.",
        "F. The main() method does not compile."
      ]
    },
    {
      "number": 194,
      "question": "194. What is the best reason for marking an existing static method private within an interface?",
      "choices": [
        "A. It allows the method to be overridden in a subclass.",
        "B. It hides the secret implementation details from another developer using the interface.",
        "C. It improves the visibility of the method.",
        "D. It ensures the method is not replaced with an overridden implementation at runtime.",
        "E. It allows the method to be marked abstract.",
        "F. Trick question! All static methods are implicitly private within an interface."
      ]
    },
    {
      "number": 195,
      "question": "195. What is the output of the following application?",
      "code": "package jungle;\npublic class RainForest extends Forest {\n   public RainForest(long treeCount) {\n      this.treeCount = treeCount+1;\n   }\n   public static void main(String[] birds) {\n      System.out.print(new RainForest(5).treeCount);\n   } }\nclass Forest {\n   public long treeCount;\n   public Forest(long treeCount) {\n      this.treeCount = treeCount+2;\n   } }",
      "choices": [
        "A. 5",
        "B. 6",
        "C. 7",
        "D. 8",
        "E. The code does not compile."
      ]
    },
    {
      "number": 196,
      "question": "196. What is the result of compiling and executing the following class?",
      "code": "package sports;\npublic class Bicycle {\n   String color = \"red\";\n   private void printColor(String color) {\n      color = \"purple\";\n      System.out.print(color);\n   }\n   public static void main(String[] rider) {\n      new Bicycle().printColor(\"blue\");\n   } }",
      "choices": [
        "A. red",
        "B. purple",
        "C. blue",
        "D. null",
        "E. It does not compile."
      ]
    },
    {
      "number": 197,
      "question": "197. Given that Short and Integer extend Number directly, what type can be used to fill in the blank in the following class to allow it to compile?",
      "code": "package band;\ninterface Horn {\n   public Integer play();\n}\nabstract class Woodwind {\n   public Short play() {\n      return 3;\n   } }\npublic final class Saxophone extends Woodwind implements Horn {\n   public _________________ play() {\n      return null;\n   } }",
      "choices": [
        "A. Object",
        "B. Integer",
        "C. Short",
        "D. Number",
        "E. None of the above"
      ]
    },
    {
      "number": 198,
      "question": "198. Which statements about abstract classes and methods are correct? (Choose three.)",
      "choices": [
        "A. An abstract class can be extended by a final class.",
        "B. An abstract method can be overridden by a final method.",
        "C. An abstract class can be extended by multiple classes directly.",
        "D. An abstract class can extend multiple classes directly.",
        "E. An abstract class cannot implement an interface.",
        "F. An abstract class can extend an interface."
      ]
    },
    {
      "number": 199,
      "question": "199. Given the following enum declaration, how many lines would need to be corrected for the code to compile?",
      "code": "public enum Proposition {\n   TRUE(1) { String getNickName() { return \"RIGHT\"; }},\n   FALSE(2) { public String getNickName() { return \"WRONG\"; }},\n   UNKNOWN(3) { public String getNickName() { return \"LOST\"; }}\n   public int value;\n   Proposition(int value) {\n      this.value = value;\n   }\n   public int getValue() {\n      return this.value;\n   }\n   protected abstract String getNickName();\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. More than three"
      ]
    },
    {
      "number": 200,
      "question": "200. What is the result of executing the HopCounter program?",
      "code": "// Hopper.java\npackage com.animals;\npublic class Hopper {\n   protected void hop() {\n      System.out.println(\"hop\");\n   } }\n \n// Grasshopper.java\npackage com.insect;\nimport com.animals.Hopper;\npublic class Grasshopper extends Hopper {\n   public void move() {\n      hop();  // p1\n   } }\n \n// HopCounter.java\npackage com.insect;\npublic class HopCounter {\n   public static void main(String[] args) {\n      var hopper = new Grasshopper();\n      hopper.move();  // p2\n      hopper.hop();   // p3\n   } }",
      "choices": [
        "A. The code prints hop once.",
        "B. The code prints hop twice.",
        "C. The first compiler error is on line p1.",
        "D. The first compiler error is on line p2.",
        "E. The first compiler error is on line p3.",
        "F. None of the above."
      ]
    },
    {
      "number": 201,
      "question": "201. Which of the following are not attributes common to both abstract classes and interfaces? (Choose two.)",
      "choices": [
        "A. They both can contain abstract methods.",
        "B. They both can contain default methods.",
        "C. They both can contain protected methods.",
        "D. They both can contain public methods.",
        "E. They both can contain static variables."
      ]
    },
    {
      "number": 202,
      "question": "202. Given the following class, which method signature could be successfully added to the class as an overloaded version of the findAverage() method? (Choose two.)",
      "code": "public class Calculations {\n   public Integer findAverage(int sum) { return sum; }\n}",
      "choices": [
        "A. public Long findAverage(int x)",
        "B. public Long findAverage(int x, int y)",
        "C. public Integer average(int x)",
        "D. private void findAverage(int x)",
        "E. public Integer findAverage(int… x) throws Exception",
        "F. private Integer findAverage(int x)"
      ]
    },
    {
      "number": 203,
      "question": "203. Which of the following is a valid method name in Java? (Choose two.)",
      "choices": [
        "A. Go_$Outside$2()",
        "B. have-Fun()",
        "C. new()",
        "D. 9enjoyTheWeather()",
        "E. $sprint()",
        "F. walk#()"
      ]
    },
    {
      "number": 204,
      "question": "204. Fill in the blanks: A functional interface must contain or inherit ______________ and may optionally include ______________.",
      "choices": [
        "A. at least one abstract method, the @Override annotation",
        "B. exactly one method, static methods",
        "C. exactly one abstract method, the @FunctionalInterface annotation",
        "D. at least one static method, at most one default method",
        "E. None of the above"
      ]
    },
    {
      "number": 205,
      "question": "205. Fill in the blank with the line of code that allows the program to compile and print 15 at runtime.",
      "code": "package love;\ninterface Sport {\n   private int play() { return 15; }\n}\ninterface Tennis extends Sport {\n   private int play() { return 30; }\n}\npublic class Game implements Tennis {\n   public int play() { return _________________; }\n   public static void main(String… ace) {\n      System.out.println(new Game().play());\n   } }",
      "choices": [
        "A. Sport.play()",
        "B. Sport.super.play()",
        "C. Sport.Tennis.play()",
        "D. Tennis.Sport.super.play()",
        "E. The code does not compile regardless of what is inserted into the blank.",
        "F. None of the above."
      ]
    },
    {
      "number": 206,
      "question": "206. What is the output of the following program?",
      "code": "public class MoreMusic {\n   {\n      System.out.print(\"do-\"); \n      System.out.print(\"re-\"); \n   }\n   public MoreMusic() {\n      System.out.print(\"mi-\");\n   }\n   public MoreMusic(int note) {\n      this(null);\n      System.out.print(\"fa-\");\n   }\n   public MoreMusic(String song) {\n      this(9);\n      System.out.print(\"so-\");\n   }\n   public static void main(String[] sound) {\n      System.out.print(\"la-\");\n      var play = new MoreMusic(1);\n   } }",
      "choices": [
        "A. la-do-re-mi-so-fa-",
        "B. la-do-re-mi-fa-",
        "C. do-re-mi-fa-so-la-",
        "D. fa-re-do-mi-so-",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 207,
      "question": "207. Given the following two classes in the same package, what is the result of executing the Hug program?",
      "code": "public class Kitten {\n   /** private **/ float cuteness;\n   /* public */ String name;\n   // default double age;\n   void meow() { System.out.println(name + \" - \"+cuteness); }\n}\n \npublic class Hug {\n   public static void main(String… friends) {\n      var k = new Kitten();\n      k.cuteness = 5;\n      k.name = \"kitty\";\n      k.meow();\n   } }",
      "choices": [
        "A. kitty - 5.0",
        "B. The Kitten class does not compile.",
        "C. The Hug class does not compile.",
        "D. The Kitten and Hug classes do not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 208,
      "question": "208. What is the output of the following application?",
      "code": "package prepare;\ninterface Ready {\n   static int first = 2;\n   final short DEFAULT_VALUE = 10;\n   GetSet go = new GetSet();            // n1\n}\npublic class GetSet implements Ready {\n   int first = 5;\n   static int second = DEFAULT_VALUE;   // n2\n   public static void main(String[] begin) {\n      var r = new Ready() {};\n      System.out.print(r.first);        // n3\n      System.out.print(\" \" + second);   // n4\n   } }",
      "choices": [
        "A. 2 10",
        "B. 5 10",
        "C. 5 2",
        "D. The code does not compile because of line n1.",
        "E. The code does not compile because of line n2.",
        "F. The code does not compile because of line n3.",
        "G. The code does not compile because of line n4."
      ]
    },
    {
      "number": 209,
      "question": "209. What is the result of executing the Tortoise program?",
      "code": "// Hare.java\npackage com.mammal;\npublic class Hare {\n   public void init() {\n      System.out.print(\"init-\");\n   }\n   protected void race() {\n      System.out.print(\"hare-\");\n   } }\n \n// Tortoise.java\npackage com.reptile;\nimport com.mammal.Hare;\n \npublic class Tortoise extends Hare {\n   protected void race(Hare hare) {\n      hare.init();    // x1\n      hare.race();    // x2\n      System.out.print(\"tortoise-\");\n    }\n    public static void main(String[] args) {\n       var tortoise = new Tortoise();\n       var hare = new Hare();\n       tortoise.race(hare);\n   } }",
      "choices": [
        "A. init-hare-tortoise",
        "B. init-hare",
        "C. The first line with a compiler error is line x1.",
        "D. The first line with a compiler error is line x2.",
        "E. The code does not compile due to a different line.",
        "F. The code throws an exception."
      ]
    },
    {
      "number": 210,
      "question": "210. What is the output of the following program?",
      "code": "interface Autobot {}\npublic record Transformer(Boolean matrix) implements Autobot {\n   public boolean isMatrix() {\n      return matrix;\n   }\n   abstract void transform() {}\n   public Transformer {\n      if(matrix == null)\n         throw new IllegalArgumentException();\n   }\n   public static void main(String[] u) {\n      var prime = new Transformer(null) {\n         public void transform() {}\n      };\n      System.out.print(prime.matrix());\n   } }",
      "choices": [
        "A. true",
        "B. false",
        "C. An exception is thrown at runtime.",
        "D. Exactly one line needs to be corrected for the code to compile.",
        "E. Two or more lines need to be corrected for the code to compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 211,
      "question": "211. What is the result of executing the Movie program?",
      "code": "// Story.java\npackage literature;\npublic abstract class Story {\n   private void tell() {\n      System.out.println(\"Once upon a time\");\n   }\n   public static void play() {\n      tell();\n   } }\n \n// Movie.java\npackage media;\nimport literature.Story;\npublic class Movie {\n   public static void main(String[] args) {\n      var story = new Story();\n      story.play();\n   } }",
      "choices": [
        "A. The code runs and prints Once upon a time.",
        "B. The code runs but does not print anything.",
        "C. The Story class does not compile.",
        "D. The Movie class does not compile.",
        "E. Neither class compiles."
      ]
    },
    {
      "number": 212,
      "question": "212. What is the output of the Helicopter program?",
      "code": "package flying;\nclass Rotorcraft {\n   protected final int height = 5;\n   abstract int fly();\n}\ninterface CanFly {}\npublic class Helicopter extends Rotorcraft implements CanFly {\n   private int height = 10;\n   protected int fly() {\n      return super.height;\n   }\n   public static void main(String[] unused) {\n      Helicopter h = (Helicopter)new Rotorcraft();\n      System.out.print(h.fly());\n   } }",
      "choices": [
        "A. 5",
        "B. 10",
        "C. The code does not compile.",
        "D. The code compiles but produces a ClassCastException at runtime.",
        "E. None of the above"
      ]
    },
    {
      "number": 213,
      "question": "213. Given the following program, what is the first line to fail to compile?",
      "code": "1: public class Electricity {\n2:    interface Power {}\n3:    public static void main(String[] light) {\n4:       class Source implements Power {};\n5:       final class Super extends Source {};\n6:       var start = new Super() {};\n7:       var end = new Source() { static boolean t = true; };\n8:    } }",
      "choices": [
        "A. Line 2",
        "B. Line 4",
        "C. Line 5",
        "D. Line 6",
        "E. Line 7",
        "F. All of the lines compile."
      ]
    },
    {
      "number": 214,
      "question": "214. What is the output of the following application?",
      "code": "package prepare;\npublic class Ready {\n   protected static int first = 2;\n   private static final short DEFAULT_VALUE = 10;\n   private static class GetSet {\n      int first = 5;\n      static int second = DEFAULT_VALUE;\n   }\n   private GetSet go = new GetSet();\n   public static void main(String[] begin) {\n      Ready r = new Ready();\n      System.out.print(r.go.first);\n      System.out.print(\", \"+r.go.second);\n   } }",
      "choices": [
        "A. 2, 5",
        "B. 5, 10",
        "C. 5, 5",
        "D. 2, 10",
        "E. The code does not compile because of the GetSet class declaration.",
        "F. The code does not compile for another reason."
      ]
    },
    {
      "number": 215,
      "question": "215. Which of the following are true about the following code? (Choose two.)",
      "code": "public class Values {\n   static _________  defaultValue = 8;\n   static _________ DEFAULT_VALUE;\n \n   public static void main(String[] args) {\n      System.out.println(\"\" + defaultValue + DEFAULT_VALUE);\n   } }",
      "choices": [
        "A. When you fill in both blanks with double, it prints 8.00.0.",
        "B. When you fill in both blanks with double, it prints 8.0.",
        "C. When you fill in both blanks with int, it prints 8.",
        "D. When you fill in both blanks with int, it prints 80.",
        "E. When you fill in both blanks with var, it prints 8.",
        "F. When you fill in both blanks with var, it prints 80."
      ]
    },
    {
      "number": 216,
      "question": "216. How many Gems objects are eligible for garbage collection right before the end of the main() method?",
      "code": "public record Gems(String name) {\n   public static void main(String… args) {\n      var g1 = Gems(\"Garnet\");\n      var g2 = Gems(\"Amethyst\");\n      var g3 = Gems(\"Pearl\");\n      var g4 = Gems(\"Steven\");\n      g2 = g3;\n      g3 = g2;\n      g1 = g2;\n      g4 = null;\n   } }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. The code does not compile."
      ]
    },
    {
      "number": 217,
      "question": "217. How many lines of the following program contain compilation errors?",
      "code": "package sky;\npublic class Stars {\n   private int inThe = 4;\n   public void Stars() {\n      super();\n   }\n   public Stars(int inThe) {\n      this.inThe = this.inThe;\n   }\n   public static void main(String[] endless) {\n      System.out.print(new sky.Stars(2).inThe);\n   } }",
      "choices": [
        "A. None",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 218,
      "question": "218. What is the output of the following application?",
      "code": "package sports;\nabstract class Ball {\n   protected final int size;\n   public Ball(int size) {\n      this.size = size;\n   } }\ninterface Equipment {}\npublic class SoccerBall extends Ball implements Equipment {\n   public SoccerBall() {\n      super(5);\n   }\n   public Ball get() { return this; }\n   public static void main(String[] passes) {\n      var equipment = (Equipment)(Ball)new SoccerBall().get();\n      System.out.print(((SoccerBall)equipment).size);\n   } }",
      "choices": [
        "A. 5",
        "B. 55",
        "C. The code does not compile due to an invalid cast.",
        "D. The code does not compile for a different reason.",
        "E. The code compiles but throws a ClassCastException at runtime."
      ]
    },
    {
      "number": 219,
      "question": "219. Which statement about the Elephant program is correct?",
      "code": "package stampede;\ninterface Long {\n   Number length();\n}\npublic class Elephant {\n   public class Trunk implements Long {\n      public Number length() { return 6; }   // k1\n   }\n   public class MyTrunk extends Trunk {      // k2\n      public Integer length() { return 9; }  // k3\n   }\n   public static void charge() {\n      System.out.print(new MyTrunk().length());\n   }\n   public static void main(String[] cute) {\n      new Elephant().charge();               // k4\n   } }",
      "choices": [
        "A. It compiles and prints 9.",
        "B. The code does not compile because of line k1.",
        "C. The code does not compile because of line k2.",
        "D. The code does not compile because of line k3.",
        "E. The code does not compile because of line k4.",
        "F. None of the above."
      ]
    },
    {
      "number": 220,
      "question": "220. What is the minimum number of lines that need to be removed for this code to compile?",
      "code": "1:  package figures;\n2:  public class Dolls {\n3:     public int num() { return 3.0; }\n4:     public int size() { return 5L; }\n5:\n6:     public void nested() { nested(2,true); }\n7:     public int nested(int w, boolean h) { return 0; }\n8:     public int nested(int level) { return level+1; }\n9:\n10:    public static void main(String[] outOfTheBox) {\n11:       System.out.print(new Dolls().nested());\n12:    } }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five or more"
      ]
    },
    {
      "number": 221,
      "question": "221. How many of these lines compile?",
      "code": "18: Comparator<String> c1 = (j, k) -> 0;\n19: Comparator<String> c2 = (String j, String k) -> 0;\n20: Comparator<String> c3 = (var j, String k) -> 0;\n21: Comparator<String> c4 = (var j, k) -> 0;\n22: Comparator<String> c5 = (var j, var k) -> 0;",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five"
      ]
    },
    {
      "number": 222,
      "question": "222. What is the output of the following code?",
      "code": "public class Bunny {\n   static interface Rabbit { }\n   static class FlemishRabbit implements Rabbit { }\n \n   private static void hop(Rabbit r) {\n      System.out.print(\"hop\");\n   }\n   private static void hop(FlemishRabbit r) {\n      System.out.print(\"HOP\");\n   }\n   public static void main(String[] args) {\n      Rabbit r1 = new FlemishRabbit();\n      FlemishRabbit r2 = new FlemishRabbit();\n      hop(r1);\n      hop(r2);\n   } }",
      "choices": [
        "A. hophop",
        "B. HOPhop",
        "C. hopHOP",
        "D. HOPHOP",
        "E. The code does not compile."
      ]
    },
    {
      "number": 223,
      "question": "223. Which is one of the lines output by this code?",
      "code": "10: var list = new ArrayList<Integer>();\n11: list.add(10);\n12: list.add(9);\n13: list.add(8);\n14:\n15: var num = 9;\n16: list.removeIf(x -> {int keep = num; return x != keep;});\n17: System.out.println(list);\n18:\n19: list.removeIf(x -> {int keep = num; return x == keep;});\n20: System.out.println(list);",
      "choices": [
        "A. []",
        "B. [8]",
        "C. [8, 10]",
        "D. [8, 9, 10]",
        "E. [10, 8]",
        "F. The code does not compile."
      ]
    },
    {
      "number": 224,
      "question": "224. What does this code output?",
      "code": "var babies = Arrays.asList(\"chick\", \"cygnet\", \"duckling\");\nbabies.replaceAll(x -> { var newValue = \"baby\";\n   return newValue; });\nSystem.out.println(babies);",
      "choices": [
        "A. [baby]",
        "B. [baby, baby, baby]",
        "C. [chick, cygnet, duckling]",
        "D. []",
        "E. None of the above.",
        "F. The code does not compile."
      ]
    },
    {
      "number": 225,
      "question": "225. Which statement best describes this class?",
      "code": "import java.util.*;\npublic final class Forest {\n   private final int flora;\n   private final List<String> fauna;\n   public Forest() {\n      this.flora = 5;\n      this.fauna = new ArrayList<>();\n   }\n   public int getFlora() {\n      return flora;\n   }\n   public List<String> getFauna() {\n      return fauna;\n   } }",
      "choices": [
        "A. It is serializable.",
        "B. It is well encapsulated.",
        "C. It is immutable.",
        "D. It is both well encapsulated and immutable.",
        "E. None of the above, as the code does not compile."
      ]
    },
    {
      "number": 226,
      "question": "226. What is the output of the following program?",
      "code": "public record Light(String type, float lumens) {\n   final static String DEFAULT_TYPE = \"PAR\";\n   public Light {\n      if(type == null)\n         throw new IllegalArgumentException();\n      else type = DEFAULT_TYPE;\n   }\n   public Light(String type) {\n      this.type = \"B\";\n      this.lumens = 10f;\n   }\n   public static void main(String[] p) {\n      final var bulb = new Light(\"A\", 300);\n      System.out.print(bulb.type());\n   } }",
      "choices": [
        "A. null",
        "B. A",
        "C. PAR",
        "D. An exception is thrown at runtime.",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 227,
      "question": "227. Which statement about the following code is correct?",
      "code": "public class Dress {\n   int size = 10;\n   default int getSize() {\n      display();\n      return size;\n   }\n   static void display() {\n      System.out.print(\"What a pretty outfit!\");\n   }\n   private int getLength() {\n      display();\n      return 15;\n   }\n   private static void tryOn() {\n      display();\n   } }",
      "choices": [
        "A. The code contains an invalid constant.",
        "B. The getSize() method does not compile.",
        "C. The getLength() method does not compile.",
        "D. The tryOn() method does not compile.",
        "E. The code compiles.",
        "F. None of the above."
      ]
    },
    {
      "number": 228,
      "question": "228. Which of the following are the best reasons for creating a private interface method? (Choose two.)",
      "choices": [
        "A. Add backward compatibility to existing interfaces.",
        "B. Provide an implementation that a class implementing the interface can override.",
        "C. Increase code reuse within the interface.",
        "D. Allow interface methods to be inherited.",
        "E. Improve encapsulation of the interface.",
        "F. Allow static methods to access instance methods."
      ]
    },
    {
      "number": 229,
      "question": "229. How many subclasses of Snack compile?",
      "code": "public abstract sealed class Snack permits Snack.Lollipop {\n   final static class Toast extends Snack {}\n   sealed static class Lollipop extends Snack {}\n   final class Treat extends Lollipop {}\n   abstract non-sealed class IceCream extends Snack {}\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Trick question! Snack does not compile."
      ]
    },
    {
      "number": 230,
      "question": "230. Given the following two classes, each in a different package, which line inserted into the code allows the second class to compile?",
      "code": "package commerce;\npublic class Bank {\n   public static void withdrawal(int amountInCents) {}\n   public static void deposit(int amountInCents) {}\n}\n \npackage employee;\n// INSERT CODE HERE\npublic class Teller {\n   public void processAccount(int deposit, int withdrawal) {\n      withdrawal(withdrawal);\n      deposit(deposit);\n   } }",
      "choices": [
        "A. import static commerce.Bank.*;",
        "B. import static commerce.Bank;",
        "C. static import commerce.Bank.*;",
        "D. static import commerce.Bank;",
        "E. None of the above"
      ]
    }
  ]
}