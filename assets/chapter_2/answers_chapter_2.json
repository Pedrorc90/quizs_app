{
  "answers": [
    {
      "number": 1,
      "answers": [
        "A", "E"
      ],
      "explanation": "The code compiles fine, making option A correct. Note that the length() method takes advantage of pattern matching to avoid a cast. Only the call with \"penguins\" has a matching type because it is a String. It enters the if statement, giving us option E."
    },
    {
      "number": 2,
      "answers": [
        "B","F"
      ],
      "explanation": "A switch statement supports the primitive types byte, short, char, and int and the wrapper classes Character, Byte, Short, and Integer. It also supports String and enumerated types. Finally, it permits var if it can be resolved to one of the previous types. Floating-point types like float and double are not supported; therefore, option B is correct. Object is also not supported since it could include any class, making option F correct as well."
    },
    {
      "number": 3,
      "answers": [
        "A", "B"
      ],
      "explanation": "Option A is correct because the compiler knows all possible values have been addressed. Option B is also correct because switch expressions only need to be complete if returning a value. We can rule out options C and E because a Boolean is not allowed in a switch. We can further rule out option D because Byte does not allow this shortcut."
    },
    {
      "number": 4,
      "answers": [
        "E"
      ],
      "explanation": "The code does not compile because parentheses, (), are used instead of braces, {}, making option E the correct answer."
    },
    {
      "number": 5,
      "answers": [
        "F"
      ],
      "explanation": "When getting this type of question, the best approach is to write down the values of the variables. Both start out as 0 on line 10. On the first iteration of the loop, n becomes 1, while m remains 0, so the clause in the if statement doesn't run. In the switch statement, the value of m remains 0, so it matches the first case. Since there is no break, the default block is also executed, and n is incremented twice and is now 3. Finally, m is incremented to 1.\nOn the second iteration of the loop, m goes from 1 to 2, and n goes from 3 to 6. On the third iteration, m goes from 2 to 3, and n goes from 6 to 8. On the fourth iteration m is 3 and the continue is executed with only n increasing in value by 1. This pattern continues with the loop never terminating, while n continues to increase by 1. Since the execution does not complete, option F is the correct answer."
    },
    {
      "number": 6,
      "answers": [
        "F"
      ],
      "explanation": "We can eliminate options B and C, as both of these are legal. Also, semicolon usage is fine within the switch expression, so option D is incorrect. The switch expression returns values of two different types, double and int, but since they both can be implicitly cast to the same type, double, option A is incorrect. This makes option F the answer."
    },
    {
      "number": 7,
      "answers": [
        "B", "D", "E"
      ],
      "explanation": "A for-each loop accepts arrays and classes that implement java.lang.Iterable, such as List. For these reasons, options B, D, and E are correct. Option A is incorrect because it is a primitive value. Options C and F are incorrect because StringBuilder and String do not implement Iterable."
    },
    {
      "number": 8,
      "answers": [
        "C", "D"
      ],
      "explanation": "A default statement inside a switch statement is optional and can be placed in any order within the switch's case statements, making options A and B incorrect and option C correct. Option D is also correct because a default statement does not take a parameter value. Options E and F are incorrect rules about switch statements."
    },
    {
      "number": 9,
      "answers": [
        "A"
      ],
      "explanation": "A while loop requires a boolean condition. While singer is a variable, it is not a boolean. Therefore, the code does not compile, and option A is correct."
    },
    {
      "number": 10,
      "answers": [
        "F"
      ],
      "explanation": "Line 24 is incorrect because break is not permitted here. Line 25 is incorrect because there should be a semicolon (;) after true. Line 26 does not compile as yield needs to be in a block. Line 27 is not allowed because you can't mix switch expression and switch statement syntax. Line 28 is the only branch that is correct. Finally, line 29 is missing the closing semicolon. This gives us five compiler errors and option F."
    },
    {
      "number": 11,
      "answers": [
        "A", "F"
      ],
      "explanation": "A traditional for loop gives you full control over the order of iteration. This means you can iterate through the array backward or forward. By contrast, with a for-each loop, the iteration order is determined for you. With an array, this means starting with index 0. Options A and F match this scenario."
    },
    {
      "number": 12,
      "answers": [
        "A", "D"
      ],
      "explanation": "Since pattern matching uses flow scoping and n cannot be guaranteed to exist, the statement with || does not compile, making option A one answer. The other answer is option D, since primitives cannot be used with instanceof. If the blank contained Integer n &&, the output would be zero."
    },
    {
      "number": 13,
      "answers": [
        "D"
      ],
      "explanation": "This code does not compile because it has two else statements as part of a single if statement. Notice that the second if statement is not connected to the last else statement. For this reason, option D is the correct answer."
    },
    {
      "number": 14,
      "answers": [
        "A", "E"
      ],
      "explanation": "The code compiles as is. Due to the break statement on line 27, the loop executes only once. It prints a single x, which means option A is the first correct answer. While the label on line 24 is present with lines 25 and 28 removed, it no longer points to a loop. This causes the code to not compile, and option E is the other correct answer."
    },
    {
      "number": 15,
      "answers": [
        "B"
      ],
      "explanation": "This code is correct. The default case is optional since there is no return value assigned. Since this is a switch expression, rather than a switch statement, the cases do not fall through and option B is the answer."
    },
    {
      "number": 16,
      "answers": [
        "A", "D"
      ],
      "explanation": "The method prints the elements of the array in the reverse order in which they are defined. Option A correctly accomplishes this using a different starting value for the loop. Options B and F do not compile, as they do not use the correct syntax in a for-each loop. Option C compiles and runs without issue, but prints the items in their natural ordering, as opposed to the reverse ordering. Option D is correct, as it increments in positive order but reverses the output within the body of the for loop. Finally, option E is incorrect. The first element read is circus[circus.length+1], which results in an ArrayIndexOutOfBoundsException."
    },
    {
      "number": 17,
      "answers": [
        "C"
      ],
      "explanation": "The first time through the loop, type is 1, and plastic- is output. The break statement then terminates the loop, with end bring printed. If the break keyword were removed, then this would be an infinite loop because type is not incremented between loop executions."
    },
    {
      "number": 18,
      "answers": [
        "F"
      ],
      "explanation": "The code does not compile because the switch statement is missing the case keyword for each value."
    },
    {
      "number": 19,
      "answers": [
        "A"
      ],
      "explanation": "First, determine whether the if statement's expression is executed. The expression 8 % 3 evaluates to 2. The right-hand side of the expression is evaluated next, since + has a higher precedence than >. Since 2 > 2 is false, the expression triceratops++ is not called. Notice there are no braces, {}, in the if statement. Despite the triceratops–– line being indented, it is not part of the if statement. Therefore, triceratops–– is always executed, resulting in a value of 2 for triceratops and making option A the correct answer."
    },
    {
      "number": 20,
      "answers": [
        "F"
      ],
      "explanation": "The value of a case statement must be a constant, a literal value, or a final variable. Since red is missing the final attribute, no variable type allows the code to compile, making option F the correct answer. If the final modifier were added to the declaration of red, then int or var would be correct. The other options use types that are incompatible with switch statements or with colorOfRainbow."
    },
    {
      "number": 21,
      "answers": [
        "C", "D"
      ],
      "explanation": "The code does not compile because of the else block. Since no variable named c is in scope, option C is one of the answers. The other answer is option D since the first if block is executed."
    },
    {
      "number": 22,
      "answers": [
        "D"
      ],
      "explanation": "Line 15 does not compile because the post-decrement operator can be applied only to variables, not values. Line 16 also does not compile because the label LOOP is out of scope after line 15. Finally, line 18 does not compile because trick is declared within the do/while loop and is out of scope after line 17. For these reasons, option D is the correct answer."
    },
    {
      "number": 23,
      "answers": [
        "C"
      ],
      "explanation": "If the code follows the arrow, then it prints each letter once, breaking out of the inner loop on every iteration. Since a break without a label applies to the innermost structure, break and break numbers are equivalent, and both of these two are correct answers. Likewise, continue and continue numbers are equivalent although wrong in this case since they resume operation of the inner loop. That leaves break letters and continue letters. In this case, break letters stops the outer loop after printing just one letter, so it is incorrect. On the other hand, continue letters exits the inner loop and returns control to the outer loop, which is the desired behavior. Since three statements are correct, option C is correct."
    },
    {
      "number": 24,
      "answers": [
        "B"
      ],
      "explanation": "The code compiles without issue, so options D and E are incorrect. A var can be used in a switch statement, provided the underlying type resolves to a supported switch type. Next, notice there are no break statements. Once the matching case statement, 30, is reached, all remaining case statements will be executed. The eaten variable is increased by 1, then 2, then reduced by 1, resulting in a final value of 2, making option B the correct answer."
    },
    {
      "number": 25,
      "answers": [
        "A", "D", "F"
      ],
      "explanation": "A while loop and do/while loop both require a boolean expression, making options A and D correct and options B and E incorrect. Option C is incorrect because a for-each statement requires an assignment type and an object to iterate on. Option F is correct and shows a traditional for loop with no arguments."
    },
    {
      "number": 26,
      "answers": [
        "C"
      ],
      "explanation": "Methods m() and n() do not compile because date is not in scope in the else block. Methods o() and q() do not compile due to the missing parentheses when negating instanceof. Methods p() and r() do compile, which makes option C the answer."
    },
    {
      "number": 27,
      "answers": [
        "C"
      ],
      "explanation": "Option A goes through five indexes on the iterations: 0, 1, 2, 3, and 4. Option B also goes through five indexes: 1, 2, 3, 4, and 5. Option D goes through five iterations as well, from 0 to 4. However, option C goes through six iterations since the loop condition is at the end of the loop. Therefore, it is not like the others, and option C is the correct answer."
    },
    {
      "number": 28,
      "answers": [
        "B"
      ],
      "explanation": "On the first iteration of the loop, stops[++count] evaluates to stops[1], while also setting count to 1. Since stops[1] is Monroe and it has six characters, the break is reached, and the loop stops. For this reason, 1 is printed, making option B correct."
    },
    {
      "number": 29,
      "answers": [
        "C"
      ],
      "explanation": "The statement if(jumps) evaluates to if(0), and since 0 is not a boolean value, the code does not compile. Java requires boolean expressions in if statements, making option C the correct answer."
    },
    {
      "number": 30,
      "answers": [
        "B"
      ],
      "explanation": "The initializer, which is alpha, runs first. Then Java checks the condition, which is beta, to see whether loop execution should start. Since beta returns false, the loop is never entered, and option B is correct."
    },
    {
      "number": 31,
      "answers": [
        "B"
      ],
      "explanation": "On the first iteration of the loop, the if statement executes and prints inflate-. Then the loop condition is checked. The balloonInflated variable is true, so the loop condition is false, and the loop completes and done is printed."
    },
    {
      "number": 32,
      "answers": [
        "B", "D", "E"
      ],
      "explanation": "A switch expression is more compact and does not allow fall through. This makes options D and E correct. The final answer is option B, because either can use multiple values."
    },
    {
      "number": 33,
      "answers": [
        "B"
      ],
      "explanation": "Options A and C print one line if numChipmunks is 1, 2, or 3. Option B does not behave the same way if numChipmunks is 1 or 2. There is no break statement, so the case statements fall through, and more than one statement will be printed."
    },
    {
      "number": 34,
      "answers": [
        "A","C", "D"
      ],
      "explanation": "A do/while loop requires a body, making option A correct. Options B and E are incorrect, as both types of while loops can be exited early with a return statement. Both also require a conditional expression, making option C correct. What distinguishes a do/while loop from a while loop is that it executes its body at least once, making option D correct and option F incorrect."
    },
    {
      "number": 35,
      "answers": [
        "B"
      ],
      "explanation": "Option B is correct since a comma is allowed to separate values in Java 17. Option A is incorrect because the enum type Season is not used within a case statement. If it were just case WINTER:, then it would compile. Option C does not compile because a pipe (|) is not valid syntax in a case statement. Option D is incorrect because -> is used instead of :. Option E is incorrect because FALL is not defined in the list of values for the enum Season."
    },
    {
      "number": 36,
      "answers": [
        "B"
      ],
      "explanation": "In a traditional for loop, only one initialization type is allowed to be specified. If more than one variable is supplied, then they are separated by a comma. Therefore, options A, C, and D do not compile. Options B and E both compile, although only option B prints a single line at runtime. Option E instead prints two lines since nycTour is of size 3 and times is of size 2."
    },
    {
      "number": 37,
      "answers": [
        "B", "D"
      ],
      "explanation": "The code does not compile because obj is never cast to a String. Since this is the only error, option B is one answer. Removing that line due to the compiler error also removes the println() statement, so option D is the other answer."
    },
    {
      "number": 38,
      "answers": [
        "C"
      ],
      "explanation": "The braces on lines 12 and 27 are required because they comprise the method body. The braces on lines 24 and 26 are required because a switch statement needs braces regardless of how many case statements are inside. Finally, the braces on lines 18 and 21 are required because the else has two statements inside.\nThe braces on lines 14 and 23, 15 and 22, and 16 and 18 are all optional because there is only one statement inside. Since there are three pairs, option C is correct."
    },
    {
      "number": 39,
      "answers": [
        "B"
      ],
      "explanation": "The method prints the elements of the list in the order in which they are defined. Option A is incorrect and prints the first element repeatedly. Option B is correct and prints the elements using a for-each loop. Options C and E are incorrect because the first element that's read results in an ArrayIndexOutOfBoundsException. Finally, option D is incorrect because the entire list is printed each time."
    },
    {
      "number": 40,
      "answers": [
        "D"
      ],
      "explanation": "The code snippet compiles, making options A, B, and C incorrect. Notice that the inner for-each loop does not use braces, {}, so the break statement applies to the outer loop only. On the first iteration of the outer loop, the inner loop prints 17_JDK and 17_Java. Then, the break statement is encountered, and the outer loop is terminated, making option D correct."
    }
  ]
}