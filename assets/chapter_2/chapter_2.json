{
  "questions": [
    {
      "number": 1,
      "question": "1. Which statements are true of the following code? (Choose two.)",
      "code": "public class Penguins {\n    public static void main(String[] args) {\n       var pen = new Penguins();\n       pen.length(\"penguins\");\n       pen.length(5);\n       pen.length(new Object());\n   }\n   public void length(Object obj) {\n     if (obj instanceof String x) \n        System.out.println(x.length());\n   } }",
      "choices": [
        "A. The code compiles as is.",
        "B. One line causes compiler errors.",
        "C. Two lines cause compiler errors.",
        "D. If any lines that do not compile are removed, this code does not print anything.",
        "E. If any lines that do not compile are removed, this code prints one line.",
        "F. If any lines that do not compile are removed, this code prints two lines."
      ]
    },
    {
      "number": 2,
      "question": "2. Variables declared as which of the following are never permitted in a switch statement? (Choose two.)",
      "choices": [
        "A. var",
        "B. double",
        "C. int",
        "D. String",
        "E. char",
        "F. Object"
      ]
    },
    {
      "number": 3,
      "question": "3. When can you omit the default condition in a switch expression? (Choose two.)",
      "choices": [
        "A. When all the values of an enum are covered",
        "B. When no value is returned",
        "C. When the type is a Boolean",
        "D. When the type is a Byte",
        "E. When the type is a Boolean or Byte"
      ]
    },
    {
      "number": 4,
      "question": "4. What happens when running the following code snippet?",
      "code": "var gas = true;\n do (\n    System.out.println(\"helium\");\n    gas = gas ^ gas;\n    gas = !gas;\n ) while (!gas);",
      "choices": [
        "A. It completes successfully without output.",
        "B. It outputs helium once.",
        "C. It outputs helium repeatedly.",
        "D. Line 6 does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 5,
      "question": "5. What is output by the following?",
      "code": "int m = 0, n = 0;\nwhile (m < 5) {\n   n++;\n   if (m == 3) \n      continue;\n  \n   switch (m) {\n      case 0:\n      case 1:\n         n++;\n      default:\n         n++;\n   }\n   m++;\n}\nSystem.out.println(m + \" \" + n);",
      "choices": [
        "A. 3 10",
        "B. 3 12",
        "C. 5 10",
        "D. 5 12",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 6,
      "question": "6. What is true of the following program?",
      "code": "enum Admission { ADULT, SENIOR, CHILD}\npublic class Movie {\n   public static void main(String[] args) {\n      var price = switch (Admission.CHILD) {\n         case ADULT -> 12.50;\n          case SENIOR, CHILD -> 10;\n      };\n      System.out.println(price);\n   } }",
      "choices": [
        "A. The code does not compile because the return types of the case branches are different.",
        "B. The code does not compile because one of the case branches has two values.",
        "C. The code does not compile because the value being evaluated in the switch is hard coded.",
        "D. The code does not compile because there are too many semicolons.",
        "E. The code compiles and prints 10.",
        "F. The code compiles and prints 10.0."
      ]
    },
    {
      "number": 7,
      "question": "7. Given the following, which can fill in the blank and allow the code to compile? (Choose three.)",
      "code": "var quest = _________________;\nfor(var zelda : quest) {\n   System.out.print(zelda);\n}",
      "choices": [
        "A. 3",
        "B. new int[] {3}",
        "C. new StringBuilder(\"3\")",
        "D. List.of(3)",
        "E. new String[3]",
        "F. \"Link\""
      ]
    },
    {
      "number": 8,
      "question": "8. Which of the following rules about adding a default branch to this switch statement are correct? (Choose two.)",
      "code": "switch (numPenguins) {\n   case 0 : System.out.println(\"no penguins\");\n   case 1 : System.out.println(\"one penguin\");\n}",
      "choices": [
        "A. This switch statement is required to declare a default statement.",
        "B. A default statement must be placed after all case statements.",
        "C. A default statement can be placed between any case statements.",
        "D. Unlike a case statement, a default statement does not take a parameter value.",
        "E. This switch statement can contain more than one default statement.",
        "F. A default statement can be used only when at least one case statement is present."
      ]
    },
    {
      "number": 9,
      "question": "9. What does the following method output?",
      "code": "void dance() {\n   var singer = 0;\n   while (singer)\n      System.out.print(singer++);\n}",
      "choices": [
        "A. The method does not compile.",
        "B. The method completes with no output.",
        "C. The method prints 0 and then terminates.",
        "D. The method enters an infinite loop.",
        "E. None of the above."
      ]
    },
    {
      "number": 10,
      "question": "10. How many lines contain compiler errors?",
      "code": "int magicNumber = 7;\n   var ok = switch (magicNumber) {\n      case 7 -> true;  break;\n      case 9 -> { yield true }\n      case 11 -> yield true;\n      case 13 : {yield true;}\n      default -> false;\n   }",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five"
      ]
    },
    {
      "number": 11,
      "question": "11. Which are true statements comparing for-each and traditional for loops? (Choose two.)",
      "choices": [
        "A. Both can iterate through an array starting with the first element.",
        "B. Only the for-each loop can iterate through an array starting with the first element.",
        "C. Only the traditional for loop can iterate through an array starting with the first element.",
        "D. Both can iterate through an array starting from the end.",
        "E. Only the for-each loop can iterate through an array starting from the end.",
        "F. Only the traditional for loop can iterate through an array starting from the end."
      ]
    },
    {
      "number": 12,
      "question": "12. What statements are true about filling in the blank and calling with zero(0)? (Choose two.)",
      "code": "public void zero(Object number) {\n   if (number instanceof _________________ Math.abs(n) == 0)\n      System.out.println(\"zero\");\n   else\n      System.out.println(\"non-zero\");\n}",
      "choices": [
        "A. When filling in the blank with Integer n ||, the code does not compile.",
        "B. When filling in the blank with Integer n ||, the output is zero.",
        "C. When filling in the blank with Integer n ||, the output is non-zero.",
        "D. When filling in the blank with int n &&, the code does not compile.",
        "E. When filling in the blank with int n &&, the output is zero.",
        "F. When filling in the blank with int n &&, the output is non-zero."
      ]
    },
    {
      "number": 13,
      "question": "13. What is the output of the following application?",
      "code": "package planning;\npublic class ThePlan {\n   public static void main(String[] input) {\n      var plan = 1;\n      plan = plan++ + --plan;\n      if(plan==1) {\n         System.out.print(\"Plan A\");\n      } else { if(plan==2) System.out.print(\"Plan B\"); }\n      } else System.out.print(\"Plan C\");\n      }\n   }\n}",
      "choices": [
        "A. Plan A",
        "B. Plan B",
        "C. Plan C",
        "D. The class does not compile.",
        "E. None of the above."
      ]
    },
    {
      "number": 14,
      "question": "14. What is true about the following code? (Choose two.)",
      "code": "var race = \"\";\nloop:\ndo {\n   race += \"x\";\n   break loop;\n} while (true);\nSystem.out.println(race);",
      "choices": [
        "A. It outputs x.",
        "B. It does not compile.",
        "C. It is an infinite loop.",
        "D. With lines 25 and 28 removed, it outputs x.",
        "E. With lines 25 and 28 removed, it does not compile.",
        "F. With lines 25 and 28 removed, it is an infinite loop."
      ]
    },
    {
      "number": 15,
      "question": "15. What does the following code output?",
      "code": "int count = 0;\nchar letter = 'A';\nswitch (letter) {\n   case 'A' -> count++;\n   case 'B' -> count++;\n}\nSystem.out.println(count);",
      "choices": [
        "A. 0",
        "B. 1",
        "C. 2",
        "D. The code does not compile."
      ]
    },
    {
      "number": 16,
      "question": "16. Which of the following can replace the body of the perform() method to produce the same output on any nonempty input? (Choose two.)",
      "code": "public void perform(String[] circus) {\n   for (int i=circus.length-1; i>=0; i--)\n      System.out.print(circus[i]);\n}",
      "choices": [
        "A. \nfor (int i=circus.length; i>0; i--)\n   System.out.print(circus[i-1]);",
        "B. \nfor-reversed (String c = circus)\n   System.out.print(c);",
        "C. \nfor (var c : circus)\n   System.out.print(c);",
        "D. \nfor (var i=0; i<circus.length; i++) \n   System.out.print(circus[circus.length-i-1]);",
        "E. \nfor (int i=circus.length; i>0; i--)\n   System.out.print(circus[i+1]);",
        "F. \nfor-each (String c circus)\n   System.out.print(c);"
      ]
    },
    {
      "number": 17,
      "question": "17. What does the following code snippet output?",
      "code": "var bottles = List.of(\"glass\", \"plastic\", \"can\");\nfor (int type = 1; type < bottles.size();) {\n   System.out.print(bottles.get(type) + \"-\");\n   if(type < bottles.size()) break;\n}\nSystem.out.print(\"end\");",
      "choices": [
        "A. glass-end",
        "B. glass-plastic-can-end",
        "C. plastic-end",
        "D. plastic-can-end",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 18,
      "question": "18. What is the result of executing the following code snippet?",
      "code": "final var GOOD = 100;\nvar score = 10;\nswitch (score) {\n   default:\n   1 : System.out.print(\"1-\");\n   -1 : System.out.print(\"2-\"); break;\n   4,5 : System.out.print(\"3-\");\n   6 : System.out.print(\"4-\");\n   9 : System.out.print(\"5-\");\n}",
      "choices": [
        "A. 1-",
        "B. 1-2-",
        "C. 2-",
        "D. 3-",
        "E. 4-",
        "F. None of the above"
      ]
    },
    {
      "number": 19,
      "question": "19. What is the output of the following application?",
      "code": "package dinosaur;\npublic class Park {\n   public final static void main(String... arguments) {\n      int pterodactyl = 8;\n      long triceratops = 3;\n      if(pterodactyl % 3> 1 + 1)\n         triceratops++;\n         triceratops--;\n      System.out.print(triceratops);\n   } }",
      "choices": [
        "A. 2",
        "B. 3",
        "C. 4",
        "D. The code does not compile.",
        "E. The code compiles but throws an exception at runtime."
      ]
    },
    {
      "number": 20,
      "question": "20. What variable type of red allows the following application to compile?",
      "code": "package tornado;\npublic class Kansas {\n   public static void main(String[] args) {\n      int colorOfRainbow = 10;\n      _________________ red = 5;\n      switch(colorOfRainbow) {\n         default:\n            System.out.print(\"Home\");\n            break;\n         case red:\n            System.out.print(\"Away\");\n      } } }",
      "choices": [
        "A. long",
        "B. double",
        "C. int",
        "D. var",
        "E. String",
        "F. None of the above"
      ]
    },
    {
      "number": 21,
      "question": "21. What is true about the following method when calling with an empty ArrayList? (Choose two.)",
      "code": "public void meow(Collection<String> kitties) {\n   if (kitties instanceof List c) {\n      System.out.println(\"L \" + c.size());\n   } else if (kitties instanceof Map c) {\n      c = new TreeMap<>();                  // x1\n      System.out.println(\"M \" + c.size());\n   } else {\n      System.out.println(\"E \" + c.size());\n   }\n}",
      "choices": [
        "A. The code compiles.",
        "B. The code does not compile due to line x1.",
        "C. The code does not compile for another reason.",
        "D. If any lines that do not compile are removed, the output is L0.",
        "E. If any lines that do not compile are removed, the output is E0.",
        "F. If any lines that do not compile are removed, the output is another value."
      ]
    },
    {
      "number": 22,
      "question": "22. How many lines of the magic() method contain compilation errors?",
      "code": "public void magic() {\n   do {\n      int trick = 0;\n      LOOP: do {\n         trick++;\n      } while (trick < 2--);\n      continue LOOP;\n   } while (1> 2);\n   System.out.println(trick);\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four"
      ]
    },
    {
      "number": 23,
      "question": "23. How many of these statements can be inserted after the println to have the code flow follow the arrow in this diagram?",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. Five",
        "F. None of above"
      ]
    },
    {
      "number": 24,
      "question": "24. What is the output of the following application?",
      "code": "package dessert;\npublic class IceCream {\n   public final static void main(String… args) {\n      var flavors = 30;\n      int eaten = 0;\n      switch(flavors) {\n         case 30: eaten++;\n         case 40: eaten+=2;\n          default: eaten--;\n      }\n      System.out.print(eaten);\n   } }",
      "choices": [
        "A. 1",
        "B. 2",
        "C. 3",
        "D. The code does not compile because var cannot be used in a switch statement.",
        "E. The code does not compile for another reason.",
        "F. None of the above."
      ]
    },
    {
      "number": 25,
      "question": "25. Which of the following statements compile and create infinite loops at runtime? (Choose three.)",
      "choices": [
        "A. while (!false) {}",
        "B. do {}",
        "C. for( : ) {}",
        "D. do {} while (true);",
        "E. while {}",
        "F. for( ; ; ) {}"
      ]
    },
    {
      "number": 26,
      "question": "26. How many of these methods compile?",
      "code": "public void m(Object obj) {\n   if (obj instanceof LocalDate date)\n      System.out.println(date);\n   else\n      System.out.println(date);\n}\npublic void n(Object obj) {\n   if (obj instanceof LocalDate date)\n      return;\n   else\n     System.out.println(date);\n}\npublic void o(Object obj) {\n   if (!obj instanceof LocalDate date)\n      return;\n   else\n      System.out.println(date);\n}\npublic void p(Object obj) {\n   if (!(obj instanceof LocalDate date))\n      return;\n   else\n      System.out.println(date);\n}\npublic void q(Object obj) {\n   if (!obj instanceof LocalDate date)\n      return;\n   System.out.println(date);\n}\npublic void r(Object obj) {\n   if (!(obj instanceof LocalDate date))\n      return;\n   System.out.println(date);\n}",
      "choices": [
        "A. Zero",
        "B. One",
        "C. Two",
        "D. Three",
        "E. Four",
        "F. Five",
        "G. Six"
      ]
    },
    {
      "number": 27,
      "question": "27. Which of the following iterates a different number of times than the others?",
      "choices": [
        "A. for (int k=0; k < 5; k++) {}",
        "B. for (int k=1; k <= 5; k++) {}",
        "C. int k=0; do { } while(k++ < 5);",
        "D. int k=0; while (k++ < 5) {}",
        "E. All of these iterate the same number of times."
      ]
    },
    {
      "number": 28,
      "question": "28. What is the output of the following code snippet?",
      "code": "int count = 0;\nvar stops = new String[] { \"Washington\", \"Monroe\",\n   \"Jackson\", \"LaSalle\" };\nwhile (count < stops.length)\n   if (stops[++count].length() < 8)\n      break;\n   else continue;\nSystem.out.println(count);",
      "choices": [
        "A. 0",
        "B. 1",
        "C. 2",
        "D. 3",
        "E. The code does not compile.",
        "F. None of the above."
      ]
    },
    {
      "number": 29,
      "question": "29. What is the output of the following code snippet?",
      "code": "int hops = 0;\nint jumps = 0;\njumps = hops++;\nif(jumps)\n   System.out.print(\"Jump!\");\nelse\n   System.out.print(\"Hop!\");",
      "choices": [
        "A. Jump!",
        "B. Hop!",
        "C. The code does not compile.",
        "D. The code compiles but throws an exception at runtime.",
        "E. None of the above."
      ]
    },
    {
      "number": 30,
      "question": "30. Which of the following best describes the flow of execution in this for loop if beta always returns false?",
      "code": "for (alpha; beta; gamma) {\n  delta;\n}",
      "choices": [
        "A. alpha",
        "B. alpha, beta",
        "C. alpha, beta, gamma",
        "D. alpha, gamma",
        "E. alpha, gamma, beta",
        "F. None of the above"
      ]
    },
    {
      "number": 31,
      "question": "31. What is the output of the following code snippet?",
      "code": "boolean balloonInflated = false;\ndo {\n   if (!balloonInflated) {\n      balloonInflated = true;\n      System.out.print(\"inflate-\");\n   }\n} while (!balloonInflated);\nSystem.out.println(\"done\");",
      "choices": [
        "A. done",
        "B. inflate-done",
        "C. The code does not compile.",
        "D. This is an infinite loop.",
        "E. None of the above."
      ]
    },
    {
      "number": 32,
      "question": "32. Which are true about switch expressions and switch statements? (Choose three.)",
      "choices": [
        "A. Both allow assigning the result to a variable.",
        "B. Both allow multiple values in the same case.",
        "C. Only a switch expression supports break.",
        "D. Only a switch statement supports break.",
        "E. A switch expression is more compact.",
        "F. A switch statement is more compact."
      ]
    },
    {
      "number": 33,
      "question": "33. Which of these code snippets behaves differently from the others?",
      "choices": [
        "A. if (numChipmunks == 1)\n   System.out.println(\"One chipmunk\");\nif (numChipmunks == 2)\n   System.out.println(\"Two chipmunks\");\nif (numChipmunks == 3)\n   System.out.println(\"Three chipmunks\");",
        "B. switch (numChipmunks) {\n   case 1:  System.out.println(\"One chipmunk\");\n   case 2:  System.out.println(\"Two chipmunks\");\n   case 3:  System.out.println(\"Three chipmunks\");\n}",
        "C. if (numChipmunks == 1)\n   System.out.println(\"One chipmunk\");\nelse if (numChipmunks == 2)\n   System.out.println(\"Two chipmunks\");\nelse if (numChipmunks == 3)\n   System.out.println(\"Three chipmunks\");",
        "D. All three code snippets do the same thing."
      ]
    },
    {
      "number": 34,
      "question": "34. Which statements about loops are correct? (Choose three.)",
      "choices": [
        "A. A do/while loop requires a body.",
        "B. A while loop cannot be exited early with a return statement.",
        "C. A while loop requires a conditional expression.",
        "D. A do/while loop executes the body (if present) at least once.",
        "E. A do/while loop cannot be exited early with a return statement.",
        "F. A while loop executes the body (if present) at least once."
      ]
    },
    {
      "number": 35,
      "question": "35. Given the following enum and class, which option fills in the blank and allows the code to compile?",
      "code": "enum Season { SPRING, SUMMER, WINTER }\npublic class Weather {\n   public int getAverageTemperate(Season s) {\n      switch (s) {\n         default:\n         _________________ return 30;\n      } } }",
      "choices": [
        "A. case Season.WINTER:",
        "B. case WINTER, SPRING:",
        "C. case SUMMER | WINTER:",
        "D. case SUMMER ->",
        "E. case FALL:",
        "F. None of the above"
      ]
    },
    {
      "number": 36,
      "question": "36. Fill in the blank with the line of code that causes the application to compile and print exactly one line at runtime.",
      "code": "package nyc;\npublic class TourBus {\n   public static void main(String… args) {\n      var nycTour = new String[] { \"Downtown\", \"Uptown\",\n         \"Brooklyn\" };\n      var times = new String[] { \"Day\", \"Night\" };\n      for (_________________ i<nycTour.length && j<times.length;\n            i++, j++)\n         System.out.println(nycTour[i] + \"-\" + times[j]);\n   } }",
      "choices": [
        "A. int i=1; j=1;",
        "B. int i=0, j=1;",
        "C. int i=1; int j=0;",
        "D. int i=1, int j=0;",
        "E. int i=1, j=0;",
        "F. None of the above"
      ]
    },
    {
      "number": 37,
      "question": "37. What statements are true of the following code? (Choose two.)",
      "code": "public class Penguins {\n    public static void main(String[] args) {\n       var pen = new Penguins();\n       pen.length(\"penguins\");\n       pen.length(5);\n       pen.length(new Object());\n   }\n   public void length(Object obj) {\n      if (obj instanceof String) {\n         System.out.println(obj.length());\n     } } }",
      "choices": [
        "A. The code compiles as is.",
        "B. One line causes compiler errors.",
        "C. Two lines cause compiler errors.",
        "D. If any lines that do not compile are removed, this code does not print anything.",
        "E. If any lines that do not compile are removed, this code prints one line.",
        "F. If any lines that do not compile are removed, this code prints two lines."
      ]
    },
    {
      "number": 38,
      "question": "38. The following code contains six pairs of curly braces. How many pairs can be removed without changing the behavior?",
      "code": "public static void main(String[] args) {\n   int secret = 0;\n   for (int i = 0; i < 10; i++) {\n      while (i < 10) {\n         if (i == 5) {\n            System.out.println(\"if\");\n         } else {\n            System.out.println(\"in\");\n            System.out.println(\"else\");\n         }\n      }\n   }\n   switch (secret) {\n      case 0:  System.out.println(\"zero\");\n   }\n}",
      "choices": [
        "A. One",
        "B. Two",
        "C. Three",
        "D. Four",
        "E. Five",
        "F. Six"
      ]
    },
    {
      "number": 39,
      "question": "39. Which of the following can replace the body of the travel() method to produce the same output on any nonempty input?",
      "code": "public void travel(List<Integer> roads) {\n   for (int w = 1; w <= roads.size(); w++)\n      System.out.print(roads.get(w-1));\n}",
      "choices": [
        "A. for (int r = 0; r < roads.size(); r += 1)\n   System.out.print(roads.get(0));",
        "B. for(var z : roads)\n   System.out.print(z);",
        "C. for (int t = roads.size(); t> 0; t--)\n   System.out.print(roads.get(t));",
        "D. for (var var : roads)\n   System.out.print(roads);",
        "E. for (int q = roads.size(); q>= 0; q++)\n   System.out.print(roads.get(q));",
        "F. None of the above"
      ]
    },
    {
      "number": 40,
      "question": "40. Which statement about the following code snippet is correct?",
      "code": "final var javaVersions = List.of(17,11,8);\nvar names = List.of(\"JDK\", \"Java\");\nV: for (var e1 : javaVersions) {\n   E: for (String e2 : names)\n      System.out.println(e1 + \"_\" + e2);\n      break;\n}",
      "choices": [
        "A. One line does not compile.",
        "B. Two lines do not compile.",
        "C. Three lines do not compile.",
        "D. It compiles and prints two lines at runtime.",
        "E. It compiles and prints three lines at runtime.",
        "F. None of the above."
      ]
    }
  ]
}