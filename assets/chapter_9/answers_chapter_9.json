{
  "answers": [
    {
      "number": 1,
      "answers": ["D"],
      "explanation": "The code does not compile because Path.get() is not a valid NIO.2 method, making option D correct. Either Paths.get() or Path.of() should be used instead."
    },
    {
      "number": 2,
      "answers": ["A"],
      "explanation": "The constructor for Console is private. Therefore, attempting to call new Console() outside the class results in a compilation error, making option A the correct answer. The correct way to obtain a Console instance is to call System.console()."
    },
    {
      "number": 3,
      "answers": ["D", "F"],
      "explanation": "BufferedWriter is a wrapper class that requires an instance of Writer to operate on. Since FileOutputStream does not inherit Writer, the code does not compile, and option D is correct. If FileWriter was used instead of FileOutputStream, then the code would compile without issue and print 1. The try-with-resources statement closes System.out before the catch and finally blocks are called. When the finally block is executed, the output has nowhere to go to, which means the last value of 3 is not printed, making option F correct."
    },
    {
      "number": 4,
      "answers": ["F"],
      "explanation": "The code does not compile. There are no createDirectory(), createDirectories(), and delete() methods defined on the Path interface. Instead, the NIO.2 Files class should be used. Since four lines of code do not compile, option F is the correct answer. If the lines were corrected to use the Files class, then the application would print an exception at line k1, as the directory already exists."
    },
    {
      "number": 5,
      "answers": ["A", "C"],
      "explanation": "Generally speaking, classes should be marked with the Serializable interface if they contain data that we might want to save and retrieve later. Options B, D, E, and F describe the type of data that we would want to store over a long period of time. Options A and C, though, define classes that manage transient or short-lived data. Application processes change quite frequently, and trying to reconstruct a process is often considered a bad idea."
    },
    {
      "number": 6,
      "answers": ["D"],
      "explanation": "First, p2 is an absolute path, which means that p1.resolve(p2) just returns p2. For this reason, options B and C are incorrect. Since p1 is a relative path, it is appended onto p2, making option D correct and option A incorrect. Option A would be correct if normalize() were applied."
    },
    {
      "number": 7,
      "answers": ["B"],
      "explanation": "Writer is an abstract class, so options A, D, and E are incorrect. Classes extend abstract classes; they do not implement them, making option B correct. Note that InputStream, OutputStream, and Reader are also abstract classes."
    },
    {
      "number": 8,
      "answers": ["D"],
      "explanation": "After calling createDirectories(), the directory /home is guaranteed to exist if it does not already. The second argument of the copy() method should be the location of the new file, not the folder the new file is placed in. Therefore, the program attempts to write the file to the path /home. Since there is already a directory at that location, a FileAlreadyExistsException is thrown at runtime, making option D correct."
    },
    {
      "number": 9,
      "answers": ["E"],
      "explanation": "The code does not compile because readAllLines() returns a List<String>, not a stream, making option E the answer. If the correct method lines() was used instead, then five lines would be printed at runtime."
    },
    {
      "number": 10,
      "answers": ["E"],
      "explanation": "The size variable is properly serialized with a value of 4. Upon deserialization, none of the class elements that assign a value to an instance variable are run, leading to size being deserialized as 4. Since the name variable is marked transient, this value is deserialized as null. For these reasons, option E is correct."
    },
    {
      "number": 11,
      "answers": ["B"],
      "explanation": "The readPassword() returns a char array for security reasons. If the data was stored as a String, it would enter the shared JVM string pool, potentially allowing a malicious user to access it, especially if there is a memory dump. By using a char array, the data can be immediately cleared after it is written and removed from memory. For this reason, option B is the correct answer."
    },
    {
      "number": 12,
      "answers": ["A"],
      "explanation": "While you might not be familiar with FilterOutputStream, the diagram shows that the two classes must inherit from OutputStream. Options B, C, and E can be eliminated as choices since PrintOutputStream and Stream are not the name of any java.io classes. Option D can also be eliminated because OutputStream is already in the diagram, and you cannot have a circular class dependency. That leaves us with the correct answer, option A, because BufferedOutputStream and PrintStream both extend FilterOutputStream."
    },
    {
      "number": 13,
      "answers": ["D"],
      "explanation": "Line 15 is the first line to not compile, as relativize() is an instance method, not a static method. Line 16 also does not compile, as size(), not length(), should be used to retrieve a file size. Finally, line 17 does not compile because view is an attribute class, not an attribute view. The rest of the lines do not contain any compiler errors, making option D correct."
    },
    {
      "number": 14,
      "answers": ["C"],
      "explanation": "The code compiles and runs without issue. The first two values of the ByteArrayInputStream are read. Next, the markSupported() value is tested. Since -1 is not one of the possible options, we assume that ByteArrayInputStream does support marks. Two values are read and three are skipped, but then reset() is called, putting the stream back in the state before mark() was called. In other words, everything between mark() and reset() can be ignored. The last value read is 3, making option C the correct answer."
    },
    {
      "number": 15,
      "answers": ["B"],
      "explanation": "The class compiles and runs without issue, so option F is incorrect. The class defines three variables, only one of which is serializable. The first variable, chambers, is serializable, with the value 2 being written to disk and then read from disk. Remember, the constructors and instance initializers are not executed when a class is deserialized. The next variable, size, is transient. It is discarded when it is written to disk, so it has the default object value of null when read from disk. Finally, the color variable is static, which means it is shared by all instances of the class. Even though the value was RED when the instance was serialized, this value was not written to disk, since it was not part of the instance. The constructor call new Valve() between the two try-with-resources blocks sets this value to BLUE, which is the value printed later in the application. For these reasons, the class prints 2,null,BLUE, making option B the correct answer."
    },
    {
      "number": 16,
      "answers": ["A", "D"],
      "explanation": "Simplifying the path symbols, options B, C, and F become /objC/forward/Sort.java, which applying the symbolic link becomes /java/Sort.java. Option E just becomes /java/Sort.java, without any path symbols involved. Option A is correct, as the resolve() method concatenates the path to be /objC/bin/objC/forward/Sort.java. Option D is also correct, as the simplified path is /objC/java/forward/Sort.java. In both of these cases, the symbolic link /objC/forward cannot be applied."
    },
    {
      "number": 17,
      "answers": ["D"],
      "explanation": "The skip(1) method just reads a single byte and discards the value. The read() method can be used for a similar purpose, making option D the correct answer. Option A is incorrect because there is no jump() method defined in Reader. Options B, C, and E are incorrect because they cannot be used to skip data, only to mark a location and return to it later."
    },
    {
      "number": 18,
      "answers": ["F"],
      "explanation": "Trick question! The code does not compile; therefore, option F is correct. The toRealPath() interacts with the file system, and therefore throws a checked IOException. Since this checked exception is not handled inside the lambda expression, the class does not compile. If the lambda expression was fixed to handle the IOException, then the expected number of Path values printed would be six, and option C would be the correct answer. A maxDepth value of 1 causes the walk() method to visit two total levelsâ€”the original /flower and the files it contains."
    },
    {
      "number": 19,
      "answers": ["D"],
      "explanation": "The statements in options A, B, and C are each correct, making option D correct. If System.console() is available, then the program will ask the user a question and print the response to the error stream. On the other hand, if System.console() is not available, then the program will exit with a NullPointerException. It is strongly recommended to always check whether System.console() is null after requesting it. Finally, the user may choose not to respond to the program's request for input, resulting in the program hanging indefinitely."
    },
    {
      "number": 20,
      "answers": ["E"],
      "explanation": "The code compiles, so option C is incorrect. Not all InputStream classes support the mark() operation. If mark() is supported, then 7 is printed at runtime. Alternatively, if mark() is not supported, then an IOException will be printed at runtime. For this reason, option E is correct. Always remember to call markSupported() before using a mark() operation on an InputStream."
    },
    {
      "number": 21,
      "answers": ["A"],
      "explanation": "The code compiles and runs without issue, so option G is incorrect. If you simplify the redundant path symbols, then p1 and p2 represent the same path, /tea/hot.txt. Therefore, isSameFile() returns true. The second output is also true because the path values have been normalized. Finally, mismatch() sees the contents are the same, returning -1. For these reasons, option A is correct."
    },
    {
      "number": 22,
      "answers": ["F"],
      "explanation": "Serializable is a marker interface, which means it does not contain any abstract methods that require implementation, making option F correct. The interface is only meant to indicate the object is capable of serialization."
    },
    {
      "number": 23,
      "answers": ["B"],
      "explanation": "First, the class compiles without issue. The Files.isSameFile() method call on line j1 first does a quick check to verify if the Path values are equivalent in terms of equals(). One is absolute, and the other is relative, so this initial test will fail. The isSameFile() method then moves on to verify that the two Path values reference the same file system object. Since we know the directory does not exist, the call to isSameFile() on line j1 will produce a NoSuchFileException at runtime, making option B the correct answer."
    },
    {
      "number": 24,
      "answers": ["D"],
      "explanation": "Both stream statements compile without issue, making options A, B, and C incorrect. The two statements are equivalent to one another and print the same values at runtime. For this reason, option D is correct. There are some subtle differences between the two methods calls. The walk() call does not include a depth limit, but since Integer.MAX_VALUE is the default value, the two calls are equivalent. Furthermore, the walk() statement prints a stream of absolute paths stored as String values, while the find() statement prints a stream of Path values. If the input p was a relative path, then these two calls would have very different results, but since we are told p is an absolute path, the application of toAbsolutePath() does not change the results."
    },
    {
      "number": 25,
      "answers": ["A", "E"],
      "explanation": "An attribute view has the advantage of reading all of the file information on a single trip, rather than multiple trips to the file system, making option A correct. Option B is incorrect because nothing guarantees it will perform faster, especially if the Files method is only being used to read a single attribute. Option C is also incorrect because both sets of methods have built-in support for symbolic links. Options D and F are incorrect because memory and resource leaks are not related to reading file attribute views. Finally, option E is correct, as NIO.2 supports file systemâ€“dependent attribute view classes."
    },
    {
      "number": 26,
      "answers": ["C", "E", "F"],
      "explanation": "Since you need to read primitives and String values, the InputStream classes are appropriate. Therefore, you can eliminate options A and B since they use Reader classes. Option D is incorrect, as this is not a java.io class. The data should be read from the file using a FileInputStream class, buffered with a BufferedInputStream class for performance, and deserialized into Java-accessible data types with an ObjectInputStream class, making options C, E, and F correct."
    },
    {
      "number": 27,
      "answers": ["B"],
      "explanation": "The method compiles, so option A is incorrect. The method reads all of the elements of a directory tree, keeping only directories. The forEach() method does not print anything, though, making option B correct. If the lambda in the forEach() method was modified to print something, such as s -> System.out.println(Files.isDirectory(s)), then it would print true at least once for the coffee directory. It would then print true for each directory within the directory tree."
    },
    {
      "number": 28,
      "answers": ["B", "F"],
      "explanation": "The code compiles but the Student record does not implement Serializable. For this reason, an exception is thrown at runtime, and option B is correct. If the purpose is to verify all records have been read, then line p1 contains an error. The problem with the implementation is that checking if ios.readObject() is null is not the recommended way of iterating over an entire file. For example, the file could have been written with writeObject(null) in between two non-null records. In this case, the reading of the file would stop on this null value, before the end of the file has been reached. For this reason, option F is also correct."
    },
    {
      "number": 29,
      "answers": ["A", "C"],
      "explanation": "The Console class contains readLine() and readPassword() methods, but not a read() method, making option A one of the correct answers, and options D and E incorrect. It also contains a reader() method that returns a Reader object. The Reader class defines a read() method, but not a readLine() method. For this reason, option C is the other correct answer, and option B is incorrect. Recall that a BufferedReader is required to call the readLine() method."
    },
    {
      "number": 30,
      "answers": ["F"],
      "explanation": "The relativize() method requires that both path values be absolute or relative. Based on the details provided, p1 is a relative path, while p2 is an absolute path. For this reason, the code snippet produces an exception at runtime, making option F the correct answer. If the first path was modified to be absolute by dropping the leading dot (.) in the path expression, then the output would match the values in option A."
    },
    {
      "number": 31,
      "answers": ["E"],
      "explanation": "The code compiles without issue. Even though tricks would be dropped in the normalized path /bag/of/disappear.txt, there is no normalize() call, so path.subpath(2,3) returns tricks on line 5. On line 6, the call to getName() throws an IllegalArgumentException at runtime. Since getName() is zero-indexed and contains only one element, the call on line 6 throws an IllegalArgumentException, making option E the correct answer. If getName(0) had been used instead of getName(1), then the program would run without issue and print /home/tricks."
    },
    {
      "number": 32,
      "answers": ["A", "F"],
      "explanation": "The lines() method returns Stream<String>, while the readAllLines() method returns List<String>, making option A correct and option D incorrect. Neither method is guaranteed to be faster or slower than the other, making options B and E incorrect. The lines() method lazily reads the file as the stream is processed, while the readAllLines() method reads the entire file into memory at once. For this reason, the readAllLines() method may require more memory to hold a large file, making option F correct and option C incorrect."
    },
    {
      "number": 33,
      "answers": ["A"],
      "explanation": "First, the code compiles. The format of the String on line v1 is valid, making option D incorrect. While System.console() throws a NullPointerException if it is not available, System.in does not, making option E incorrect. The first part of the code runs without issue, printing a message such as bone fetched in 1.8 seconds. The I/O stream System.in is closed at the end of the try-with-resources block. That means calling readLine() again results in an operation on a closed stream, which would print an exception at runtime and make option C correct, except System.err is already closed due to the try-with-resources block! Therefore, only one message is printed, and option A is correct."
    },
    {
      "number": 34,
      "answers": ["D"],
      "explanation": "The Files.delete() and Files.list() declare a checked IOException that must be handled or declared. For this reason, the code does not compile, and option D is correct."
    },
    {
      "number": 35,
      "answers": ["B", "F"],
      "explanation": "All of the options compile except option E, since FileInputStream does not have a readLine() method. A BufferedReader should be used instead. Options A and C suffer from the same problem. If the file is not exactly a multiple of 123 bytes, then extra information will be written to the file from the end of the data array. Option D is incorrect because the second argument should be an offset and the third argument should be the number of bytes to read from the data array. Option B is correct and uses an array to read a fixed number of bytes and then writes that exact number of bytes to the output file. Option F is also correct, although it does not use an array. Instead, a single byte is read and written on each iteration of the loop."
    },
    {
      "number": 36,
      "answers": ["F"],
      "explanation": "The Bowl record does not implement the Serializable interface; therefore, attempting to write the instance to disk, or calling readObject() using ObjectInputStream, will result in a NotSerializableException at runtime. Remember, all instance members of a class must be serializable or marked transient for the class to properly implement the Serializable interface and be used with Java serialization. For this reason, option F is the correct answer."
    },
    {
      "number": 37,
      "answers": ["B"],
      "explanation": "The program compiles and runs without issue, making options C and D incorrect. The first variable, halleysComet, is created with subpath(1,5) and normalize() being applied right away, leading to halleysComet being assigned a value of m1.meteor. The second variable, lexellsComet, is assigned a value on line 14, but lines 15â€“16 do not include an assignment operation. Since Path instances are immutable, the changes are lost. For this reason, the two objects are not equivalent on lines 18â€“19, and option B is correct."
    },
    {
      "number": 38,
      "answers": ["F"],
      "explanation": "When data is deserialized, none of variable initializers, instance initializers, or constructors is called. The class can have static initializers, but they are not called as part of deserialization. Finally, there is no restoreObject() method that is used in standard deserialization. For these reasons, option F is correct."
    },
    {
      "number": 39,
      "answers": ["A", "B", "E"],
      "explanation": "The code moves a file from /nursery/sapling.seed to the new location of /forest. For this reason, options C and D are incorrect. If there is no file or directory at /forest, then the program completes successfully. If a file already exists at that location, then an exception is thrown since the REPLACE_EXISTING option is not set. For these reasons, options A and B are correct. Since the ATOMIC_MOVE flag is set, option E is correct, and option F is incorrect."
    },
    {
      "number": 40,
      "answers": ["C"],
      "explanation": "The program compiles and runs without issue, making options A, D, and E incorrect. The program uses Files.list() to iterate over all files within a single directory. For each file, it then iterates over the lines of the file and sums them. For this reason, option C is the correct answer. If the count() method had used Files.walk() instead of Files.lines(), then the class would still compile and run, and option B would be the correct answer."
    }
  ]
}