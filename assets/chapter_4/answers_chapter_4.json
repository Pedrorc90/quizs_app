{
  "answers": [
    {
      "number": 1,
      "answers": [
        "B"
      ],
      "explanation": "The throws keyword is used in method declarations, whereas the throw keyword is used to send an exception to the surrounding process, making option B the correct answer. The catch keyword is used to handle exceptions. There is no throwing keyword in Java."
    },
    {
      "number": 2,
      "answers": [
        "C"
      ],
      "explanation": "The class does not compile because in line r2, curly braces, {}, are used instead of parentheses, (), in the try-with-resources statement, making option C the correct answer. If this line was fixed to use parentheses, (), then the rest of the class would compile without issue and print This just in! at runtime."
    },
    {
      "number": 3,
      "answers": [
        "E"
      ],
      "explanation": "To throw an exception with the throw keyword, an existing or new exception must be provided. In this case, the new keyword is missing in front of Exception() in the think() method. It is treated as a method call that does not exist, and this line does not compile, making option E correct. If the new keyword were added, though, the line would still not compile, as the checked exception is not handled or declared within the think() method."
    },
    {
      "number": 4,
      "answers": [
        "A", "C"
      ],
      "explanation": "The correct order of blocks is try, catch, and finally. For a traditional try/catch block at least one catch or finally must be used. In addition, multiple catch blocks are allowed, although at most one finally block is allowed. For these reasons, options A and C are correct and the rest are incorrect."
    },
    {
      "number": 5,
      "answers": [
        "C"
      ],
      "explanation": "With a helpful NullPointerException, the program will print the variable that triggered the exception. In this case, the first exception is when lumiere is unboxed to an int on line 16, making option C correct. Note that only one NullPointerException can be thrown at a time, making option E incorrect."
    },
    {
      "number": 6,
      "answers": [
        "B"
      ],
      "explanation": "The code compiles just fine. The toss() method creates an array with one element, but tries to read the second element. This triggers an ArrayIndexOutOfBoundsException, which is caught by the catch block in the main() method. At runtime, Caught! is printed, making option B correct."
    },
    {
      "number": 7,
      "answers": [
        "E"
      ],
      "explanation": "The code does not compile because s is defined within the try-with-resources block. It is out of scope by the time it reaches the catch and finally blocks, making option E correct."
    },
    {
      "number": 8,
      "answers": [
        "D"
      ],
      "explanation": "The Exception class contains multiple constructors, including one that takes Throwable, one that takes String, and a no-argument constructor. The first WhaleSharkException constructor compiles, using the Exception constructor that takes a String. The second WhaleSharkException constructor also compiles. The two statements, super() and new Exception(), actually call the same constructor in the Exception class, one after another. The last WhaleSharkException compiles, with the compiler inserting the default no-argument constructor super(), because it exists in the Exception class. For these reasons, all of the constructors compile, and option D is the correct answer."
    },
    {
      "number": 9,
      "answers": [
        "D"
      ],
      "explanation": "The application first enters the try block and prints W. It then throws an ArrayIndexOutOfBoundsException, which is caught by the first catch block since ArrayIndexOutOfBoundsException is a subclass of RuntimeException, printing X. The exception is then rethrown, but since there isn't a separate try/catch block around it, it does not get caught by the second catch block. Before printing the stack trace, though, the finally block is called, and Z is printed. For these reasons, option D is correct."
    },
    {
      "number": 10,
      "answers": [
        "C", "F"
      ],
      "explanation": "While Exception and RuntimeException are commonly caught in Java applications, it is not recommended that Error and Throwable (which includes Error) be caught. An Error often indicates a failure of the JVM, which cannot be recovered from. For these reasons, options C and F are correct, and options A and D are incorrect. Options B and E are class names that are not part of the standard Java API."
    },
    {
      "number": 11,
      "answers": [
        "E"
      ],
      "explanation": "A variable declared before the start of a try-with-resources statement may be used if it is final or effectively final. Since g is modified after it is set, it is neither; therefore, the class does not compile, and option E is correct. If the last line of the main() method were removed, then the code would compile and print 2459 at runtime."
    },
    {
      "number": 12,
      "answers": [
        "C"
      ],
      "explanation": "Since IOException and Exception are checked exceptions, ColoringException and WritingException are checked exceptions. Further, CursiveException is also checked since it extends a checked exception. By contrast, IllegalStateException is an unchecked exception. This means that DrawingException and SketchingException are also unchecked, and option C is the answer."
    },
    {
      "number": 13,
      "answers": [
        "C"
      ],
      "explanation": "The code does not compile because the variable v is used twice in the main() method, both in the method declaration and in the catch block, making option C the correct answer. If a different variable name were used in one of the locations, the program would compile and print complete. Note that while an exception is created inside the turnOn() method, it is not thrown."
    },
    {
      "number": 14,
      "answers": [
        "B",
        "C",
        "D"
      ],
      "explanation": "When more than one resource is used in a try-with-resources statement, they are closed in the reverse order in which they are declared, making option A incorrect. Option B is correct and describes how resources are listed. Option C is also correct and describes how suppressed exceptions are handled. Option D is the third correct answer, as final or effectively final resources may be used in try-with-resources statements. Option E is incorrect, as resources are separated by semicolons, not commas. Option F is also incorrect, as catch blocks are optional for try-with-resources statements."
    },
    {
      "number": 15,
      "answers": [
        "A"
      ],
      "explanation": "The program compiles without issue, so option D is incorrect. The narrower SpellingException and NullPointerException, which inherit from Exception, are correctly presented in the first catch block, with the broader Exception being in the second catch block. The if statement evaluates to true, and a new SpellingException instance is created, but it is not thrown because it is missing the throw keyword. For this reason, the try block ends without any of the catch blocks being executed. The finally block is then called, making Done! the only line printed. For this reason, option A is the correct answer."
    },
    {
      "number": 16,
      "answers": [
        "A",
        "D",
        "F"
      ],
      "explanation": "Any class that inherits Exception but not RuntimeException is a checked exception and must be handled or declared. For this reason, option F is trivially correct. Options A and D are also checked exceptions. Options B and E are incorrect since they inherit RuntimeException. Finally, option C is incorrect as Error inherits Throwable but not Exception."
    },
    {
      "number": 17,
      "answers": [
        "D"
      ],
      "explanation": "The finally block of the snore() method throws a new checked exception on line x2, but there is no try-catch block around it to handle it, nor does the snore() method declare any checked exceptions. For these reasons, line x2 does not compile, and option D is the correct answer. Note that line x1 compiles because it is rethrowing an unchecked exception."
    },
    {
      "number": 18,
      "answers": [
        "E"
      ],
      "explanation": "The ProblemException class compiles without error. However, the MajorProblemException class has, well, a major problem. The constructor attempts to call a superclass constructor with a String parameter, but the ProblemException class only has a constructor with an Exception parameter. This causes a compiler error, making option E correct."
    },
    {
      "number": 19,
      "answers": [
        "B",
        "D"
      ],
      "explanation": "First, option A is an incorrect statement, because the AutoCloseable interface does not define a default implementation of close(). Next, the close() method should be idempotent, which means it is able to be run multiple times without triggering any side effects. For this reason, option B is correct. After being run once, future calls to close() should not change any data. Option D is correct, and option C is incorrect because the close() method is fully capable of throwing exceptions if there is a problem. In fact, the signature of the method in AutoCloseable throws a checked Exception. Option E is incorrect because the return type of close() is void, which means no return value can be returned."
    },
    {
      "number": 20,
      "answers": [
        "D"
      ],
      "explanation": "Option D is the correct model. The class RuntimeException extends Exception, and both Exception and Error extend Throwable. Finally, like all Java classes, they all inherit from Object. Notice that Error does not extend Exception, even though we often refer to these generally as exceptions."
    },
    {
      "number": 21,
      "answers": [
        "F"
      ],
      "explanation": "The classes MissingMoneyException and MissingFoodException do not extend any exception classes; therefore, they cannot be used in a method declaration. The code does not compile regardless of what is placed in the blank, making option F correct."
    },
    {
      "number": 22,
      "answers": [
        "B",
        "D"
      ],
      "explanation": "Closeable extends AutoCloseable, making option B correct and option A incorrect. The close() method in AutoCloseable throws Exception, while the close() method in Closeable throws IOException, making option E incorrect. Since IOException is a subclass of Exception, both close() methods can throw an IOException, making option C incorrect. On the other hand, Exception is not a subclass of IOException. For this reason, the close() method in a class that implements Closeable cannot throw an instance of the Exception class, because it is an invalid override using a broader exception type. This makes option D the correct answer. Finally, the return type for both is void, making option F incorrect."
    },
    {
      "number": 23,
      "answers": [
        "B",
        "F"
      ],
      "explanation": "Option A does not compile because a multi-catch expression uses a single variable, not two variables. Since the TideException is handled and neither exception class is a subtype of the other, option B is correct. Option C does not compile because the compiler notices that it is not possible to throw a checked IOException in this try block. Option D does not compile because multi-catch blocks cannot contain two exceptions in which one is a subclass of the other. If it did, one of the two exceptions would be redundant. Option E does not compile because the checked TideException is not handled or declared by the surf() method. Remember, Error and Exception are not subclasses of each other, although they both inherit Throwable. Option F is correct because TideException is a subclass of Exception, so both are handled by Exception."
    },
    {
      "number": 24,
      "answers": [
        "B",
        "C"
      ],
      "explanation": "Option A is incorrect. You should probably seek help if the computer is on fire! Options B and C are correct answers, as invalid or missing data/resources should be expected of most programs. Option D is incorrect because code that does not compile cannot run and therefore cannot throw any exceptions. Option E is incorrect; finishing sooner is rarely considered a problem. Option F is incorrect because an Error is thrown in this situation, and it should not be caught, as the JVM cannot usually recover from this scenario. Option G is also incorrect. While it is possible to throw an exception if a search fails, it is not recommended and options B and C are better options."
    },
    {
      "number": 25,
      "answers": [
        "A"
      ],
      "explanation": "The program compiles, making options D and E incorrect. At runtime, line 12 is executed, calling the play() method. Line 5 then throws an exception that is immediately caught on line 6. Line 7 throws a new unchecked exception that is not caught by the program, with this exception being thrown to the caller, and making option A correct. In this case, line 13 is never executed. Even though the stack trace for the exception may include information about the cause, only one exception is actually thrown to the caller."
    },
    {
      "number": 26,
      "answers": [
        "D"
      ],
      "explanation": "The code does not compile due to an invalid override of the operate() method. An overridden method must not throw any new or broader checked exceptions than the method it inherits. While both IOException and Exception are checked exceptions, Exception is broader than IOException. For this reason, the declaration of operate() in Heart does not compile, and option D is correct."
    },
    {
      "number": 27,
      "answers": [
        "A",
        "B"
      ],
      "explanation": "Option A is correct and is one of the primary motivations for using a try-with-resources statement. Option B is also correct, although it is recommended that you let the try-with-resources statement automatically close the resource. The catch blocks are run after the declared resources have been closed, making option C incorrect. Options D and E are both incorrect, as a try-with-resources statement is compatible with Closeable or AutoCloseable. A try-with-resources statement can be used with a finally block, making option F incorrect."
    },
    {
      "number": 28,
      "answers": [
        "A"
      ],
      "explanation": "The application compiles and runs, printing Meow at runtime and making option A correct. The override in Lion is valid, as overridden methods are free to declare new unchecked exceptions."
    },
    {
      "number": 29,
      "answers": [
        "D"
      ],
      "explanation": "The code compiles without issue. It first prints Tracking from the try block. Upon the completion of the try block, the close() method is called, and Thunder is printed. No exception is thrown so the catch block is skipped. In the finally block, Storm gone is printed, followed by Thunder. Since four lines were printed, option D is correct. Although it is not recommended to close a resource twice, it is allowed."
    },
    {
      "number": 30,
      "answers": [
        "C"
      ],
      "explanation": "Error is a terrible name for an exception since it is a built-in class. However, it is legal. Next, _X is also a bad choice, but it is a valid exception, as Java identifiers can begin with underscores. By contrast, 2BeOrNot2Be does not compile because identifiers are not allowed to begin with a number. NumberException is not a valid exception, because it uses generics and the parent class does not. Finally, Worry is not an exception, because it is an interface. Since only two are valid exceptions, option C is the answer."
    },
    {
      "number": 31,
      "answers": ["C"],
      "explanation": "ClassCastException is a subclass of RuntimeException, so it must appear first in any related catch blocks. For this reason, option C is correct."
    },
    {
      "number": 32,
      "answers": ["D"],
      "explanation": "The openDrawbridge() method declares a checked exception that is not handled or declared in the main() method where it is called. For this reason, line p3 does not compile, and option D is correct. The rest of the lines do not contain any compiler errors. If the main() method were changed to declare Exception, then the class would compile and print Opening!Walls at runtime."
    },
    {
      "number": 33,
      "answers": ["B"],
      "explanation": "The code compiles and runs without issues. The try block throws a ClassCastException. Since ClassCastException is not a subclass of ArrayIndexOutOfBoundsException, the first catch block is skipped. For the second catch block, ClassCastException is a subclass of Throwable so that block is executed. Afterward, the finally block is executed, and then control returns to the main() method with no exception being thrown. The result is that 1345 is printed, making option B the correct answer."
    },
    {
      "number": 34,
      "answers": ["E"],
      "explanation": "With a helpful NullPointerException, the program will print the variable that triggered the exception. In this case, the first exception is on line 42. The Integer value of null is unboxed to an int, but since this fails, a NullPointerException is thrown at runtime. Since the exception happens on the right side of the assignment, the name of the variable printed is null, making option E correct."
    },
    {
      "number": 35,
      "answers": ["A"],
      "explanation": "The application compiles without issue and prints Hello, making option A the correct answer. The ReadSign and MakeSign classes are both correctly implemented, with both overridden versions of close() dropping the checked exceptions. The try-with-resources statement is also correctly implemented for two resources and does not cause any compilation errors or runtime exceptions. Note that the semicolon (;) after the second resource declaration is optional."
    },
    {
      "number": 36,
      "answers": ["E"],
      "explanation": "The try block is entered and 2 is printed, followed by an exception. Upon completion of the try block, the resources are closed in the reverse order in which they are declared, printing 8 followed by 1. Next, the catch block executes, printing 3, followed by the finally block printing 4. For these reasons, option E is correct."
    },
    {
      "number": 37,
      "answers": ["D"],
      "explanation": "A multi-catch block cannot contain two exception types in which one inherits from the other. Since RuntimeException inherits Exception, RuntimeException is redundant. For this reason, the code does not compile, and option D is correct."
    },
    {
      "number": 38,
      "answers": ["D"],
      "explanation": "In the try block, the code prints 1 and throws an exception. The catch block successfully handles it by printing 2 and throwing another exception. Both the inner and outer finally blocks run printing 3 and 4, respectively. Then the stack trace for the exception thrown by the inner try block is printed. For this reason, option D is correct."
    },
    {
      "number": 39,
      "answers": ["C"],
      "explanation": "The code compiles without issue. Line 8 calls the compute() method, which throws a NullPointerException on line 4. This is caught in the main() method on line 9, since NullPointerException is a subclass of RuntimeException, printing zero followed by rethrowing to the caller and making option C correct."
    },
    {
      "number": 40,
      "answers": ["F"],
      "explanation": "The UnsupportedOperationException class is an unchecked exception that is a direct child of RuntimeException. For this reason, we can eliminate any answer that does not inherit from RuntimeException, including options A and E. Options C and D are close, but UnsupportedOperationException is a direct subclass of RuntimeException. Option B is incorrect because RuntimeException is a subclass, not a superclass, of Exception. The correct diagram would be to reverse option B and put RuntimeException at position 1 and Exception at position 2. Since this is not available, option F is correct."
    },
    {
      "number": 41,
      "answers": ["E"],
      "explanation": "The close() method in each of the resources throws an Exception, which must be handled or declared in the main() method. The catch block supports TimeException, but it is too narrow to catch Exception. Since there are no other catch blocks present and the main() method does not declare Exception, the try-with-resources statement does not compile, and option E is the correct answer. If the catch block were modified to handle Exception instead of TimeException, the code would compile without issue and print 3215 at runtime, closing the resources in the reverse order in which they were declared."
    },
    {
      "number": 42,
      "answers": ["B", "D", "E"],
      "explanation": "Checked exceptions are commonly used to notify or force a caller to deal with an expected type of problem, such as the inability to write a file to the file system and give them the opportunity to recover without terminating the program. For these reasons, options B, D, and E are correct. Option A is incorrect as a corrupted JVM is likely an Error that cannot be recovered from. Option C is also incorrect, as some problems should result in the application terminating. Finally, option F is incorrect and is ideally never the motivation for adding a checked exception to a method signature!"
    },
    {
      "number": 43,
      "answers": ["D"],
      "explanation": "First off, lines w1 and w2 compile without issue. On line w3, the multi-catch block can contain two exceptions, provided they are not subtypes of each other. Since one is a checked Exception and the other is an Error, line w3 compiles without issue. Line w4 contains a compilation error. Since FileNotFoundException is a subclass of the already caught IOException, it is not reachable on line w4, making option D correct."
    },
    {
      "number": 44,
      "answers": ["A", "B", "F"],
      "explanation": "Since IOException and SQLException are checked exceptions, Happy and Grumpy are checked exceptions, respectively, making options A and F correct. Since Dopey inherits Grumpy, option B is also a checked exception. Options C and D are unchecked exceptions because those classes inherit RuntimeException. Option E is also an unchecked exception because all Error classes are unchecked."
    },
    {
      "number": 45,
      "answers": ["E"],
      "explanation": "The code compiles without issue, so option D is incorrect. First off, the override of getDuckies() in Ducklings is valid, as checked exceptions can be dropped (but not added). The key here is noticing that count, an instance variable, is initialized with a value of 0. The getDuckies() method ends up computing 5/0, which leads to an unchecked ArithmeticException at runtime, making option E the correct answer."
    },
    {
      "number": 46,
      "answers": ["B", "D", "F"],
      "explanation": "An IllegalArgumentException is an unchecked exception. It can be handled or declared in the method in which it is defined, although it is optional and not required. For this reason, options B, D, and F are correct, and options A and C are incorrect. Option E is incorrect, as there is no requirement where in a method this exception can be thrown."
    },
    {
      "number": 47,
      "answers": ["D"],
      "explanation": "While a catch block is permitted to include an embedded try-catch block, the issue here is that the variable name e is already used by the first catch block. In the second catch block, it is equivalent to declaring a variable e twice. For this reason, line z2 does not compile, and option D is the correct answer. If a different variable name was used for either catch block, then the code would compile without issue, printing Failed at runtime."
    },
    {
      "number": 48,
      "answers": ["D"],
      "explanation": "The declaration of IncidentReportException does not provide any constructors, which means only the default constructor is available. Since the code attempts to pass an IOException as a parameter, the main() method does not compile, so the correct answer is option D."
    },
    {
      "number": 49,
      "answers": ["A", "E"],
      "explanation": "The try-catch block already catches Exception, so the correct answer would be the one that is not a subtype of Exception. In this case, Error and Throwable are the only choices that allow the code to compile, making options A and E correct."
    },
    {
      "number": 50,
      "answers": ["D"],
      "explanation": "The MissedCallException is a checked exception since it extends Exception and does not inherit RuntimeException. For this reason, the first catch block fails to compile, since the compiler detects that it is not possible to throw this checked exception inside the try block, making option D the correct answer. Note that if MissedCallException was changed to extend the unchecked RuntimeException class, then the code would compile and the RuntimeException from the finally block would replace the ArrayIndexOutOfBoundsException from the try block and Text would be in the message to the caller."
    },
    {
      "number": 51,
      "answers": ["A"],
      "explanation": "Both IllegalArgumentException and NullPointerException inherit RuntimeException, but neither inherits from each other. For this reason, they can be listed in catch blocks in either order, making option A the correct statement."
    },
    {
      "number": 52,
      "answers": ["C"],
      "explanation": "While RuntimeException is broader than IllegalArgumentException, the restriction on overriding methods applies only to checked exceptions, not unchecked exceptions. In other words, the code would not compile if both of the exceptions were checked. Since they are unchecked, though, the method override is valid. The program compiles and prints thud? at runtime, making option C correct."
    },
    {
      "number": 53,
      "answers": ["C"],
      "explanation": "The Closeable interface defines a close() method that throws IOException. The overridden implementation of MyDatabase, which implements Closeable, declares a SQLException. This is a new checked exception not found in the inherited method signature. Therefore, the method override is invalid, and the close() method in MyDatabase does not compile, making option C the correct answer."
    },
    {
      "number": 54,
      "answers": ["C"],
      "explanation": "Custom exception classes may simply use the default constructor. It is also common to override the constructors that take a single Exception or a single String, making option C correct."
    },
    {
      "number": 55,
      "answers": ["A"],
      "explanation": "While this code looks a bit strange, it does compile. An exception can be passed to a method or set as the return type of a method. In this case, the exception passed to the order() method is thrown and caught on line h4. The output is just the name of the class, making option A correct."
    },
    {
      "number": 56,
      "answers": ["C", "F"],
      "explanation": "A Java application tends to only throw an Error when the application has encountered an unrecoverable error. Failure of a user to sign in or register are common occurrences, making options A, B, and E incorrect. On the other hand, calling a method infinitely can lead to an unrecoverable StackOverflowError, making option C correct. Option D uses the word temporarily, meaning the network connection could come back up allowing the application to recover. Option F is the other correct answer. Over time, failing to release database connections could result in the application running out of available database connections or worse, out of memory, and being unable to recover."
    },
    {
      "number": 57,
      "answers": ["E"],
      "explanation": "The code does not compile because john is declared in the try-with-resources statement and not in scope in the finally block. For this reason, option E is correct."
    },
    {
      "number": 58,
      "answers": ["B"],
      "explanation": "The code does compile, making options C and D incorrect. The catch block successfully catches the OfficeException and prints the IOException passed to its constructor, making option B the correct answer."
    },
    {
      "number": 59,
      "answers": ["A"],
      "explanation": "The code compiles without issue, making option C incorrect. In the climb() method, two exceptions are thrown. The RuntimeException thrown in the try block is considered the primary exception, while the FallenException thrown by the close() method is suppressed. For this reason, java.lang.RuntimeException is reported to the caller in the main() method, and option A is the correct answer."
    },
    {
      "number": 60,
      "answers": ["D"],
      "explanation": "For this question, notice that all the exceptions thrown or caught are unchecked exceptions. First, the ClassCastException is thrown in the try block and caught by the second catch block since it inherits from RuntimeException, not IllegalArgumentException. Next, a NullPointerException is thrown, but before it can be returned the finally block is executed and a RuntimeException replaces it. The application exits, and the caller sees the RuntimeException in the stack trace, making option D the correct answer. If the finally block did not throw any exceptions, then NullPointerException would be printed at runtime."
    }
  ]
}