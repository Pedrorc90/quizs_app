{
    "answers": [
        {
            "number": 1,
            "answers": [
                "A"
            ],
            "explanation": "The Duration class is used to reflect an amount of time using small units like minutes. Since it just uses units of time it does not involve time zones. The LocalTime class contains units of hours, minutes, seconds, and fractional seconds. The LocalDateTime class contains all the data in a LocalTime and adds on a year, month, and date. Since none of the three classes listed includes a time zone, option A is correct."
        },
        {
            "number": 2,
            "answers": [
                "B"
            ],
            "explanation": "This is a valid text block. Since the closing triple quotes (\"\"\") are on a new line, the code prints the three lines of text followed by a blank line and option B is the answer."
        },
        {
            "number": 3,
            "answers": [
                "A",
                "C"
            ],
            "explanation": "An identifier name must begin with a letter, currency symbol (such as $), or underscore (_). Numbers are permitted only for subsequent characters. Therefore, option C is not a valid variable name. Additionally, an identifier may not be a single underscore, making option A an invalid variable name."
        },
        {
            "number": 4,
            "answers": [
                "A"
            ],
            "explanation": "A Period is measured in days, weeks, months, or years. A Duration is measured in smaller units like minutes or seconds. Only Duration has a getSeconds() method, making option A correct."
        },
        {
            "number": 5,
            "answers": [
                "C"
            ],
            "explanation": "On a normal night, adding three hours to 1 a.m. makes it 4 a.m. However, this date begins daylight saving time. This means we add an extra hour to skip the 2 a.m. hour. This makes later contain 05:00 instead of 04:00 and the offset changes. Therefore, the code prints 5 false, and option C is correct."
        },
        {
            "number": 6,
            "answers": [
                "A"
            ],
            "explanation": "In a ternary expression, only one of the two right-most expressions is evaluated. Since meal>6 is false, tip-- is evaluated, and tip++ is skipped. The result is that tip is changed from 2 to 1, making option A the correct answer. The value of total is 7, since the post-decrement operator was used on tip, although you did not need to know this to solve the question."
        },
        {
            "number": 7,
            "answers": [
                "C"
            ],
            "explanation": "LocalDate allows passing the month as an int or Month enum parameter. However, Month.MARCH is an enum. It cannot be assigned to an int variable, so the declaration of month does not compile, and option C is correct."
        },
        {
            "number": 8,
            "answers": [
                "E"
            ],
            "explanation": "Trick question. There is no reverse method on the String class. There is one on the StringBuilder class. Therefore, the code does not compile, and option E is correct."
        },
        {
            "number": 9,
            "answers": [
                "D"
            ],
            "explanation": "A StringBuilder is mutable, so the length is 2 after line 6 completes. The StringBuilder methods return a reference to the same object, so you can chain method calls. Therefore, line and anotherLine refer to the same object. This means that line 7 prints true. Then on line 9, both references point to the same object of length 2, and option D is correct."
        },
        {
            "number": 10,
            "answers": [
                "C"
            ],
            "explanation": "While there is no 2 a.m. on the clock that night, Java adjusts the time to 3 a.m. automatically and changes the time zone. It does not throw an exception, so option D is incorrect. Option B is a valid time, since any value after the time adjustment is just a normal time on the clock. Since both options A and B are valid times, option C is the correct answer."
        },
        {
            "number": 11,
            "answers": [
                "A"
            ],
            "explanation": "Since the closing triple quotes (\"\"\") are at the beginning of the line, there is no incidental whitespace. By contrast, there is essential whitespace before both green and yellow, making option A correct."
        },
        {
            "number": 12,
            "answers": [
                "B"
            ],
            "explanation": "This code is tricky because only int values are passed in. However, the parameters passed to ceil() and pow() are implicitly cast to double since those two methods take double parameters and return a double result. The max() method returns an int, giving us option B."
        },
        {
            "number": 13,
            "answers": [
                "B"
            ],
            "explanation": "Line 12 creates a Period representing a year, six months, and three days. Adding this to waffleDay gives us the year 2023, the month of September, and a day of 28. This new date is stored in later on line 13 and represents September 28, 2023. Line 14 has no effect, as the return value is ignored. Line 17 checks that you know that isBefore() returns false if the value is an exact match. Since thisOne is an exact match but thatOne is a whole day before, the output is false true, making option B correct."
        },
        {
            "number": 14,
            "answers": [
                "A",
                "C",
                "E"
            ],
            "explanation": "Options A, C, and E are correct because they all operate on boolean values. Options B and D operate on numbers. Option F is not an operator, although it is used to indicate an annotation."
        },
        {
            "number": 15,
            "answers": [
                "D"
            ],
            "explanation": "Duration is supposed to be used with objects that contain times. While it has an ofDays() method, this is a convenience method to represent a large number of seconds. This means that calling Duration.ofDays(1) is fine. However, this code throws an UnsupportedTemporalTypeException when you try to pass it to the minus() method on LocalDate, making option D correct. Note that the question asks about a possible result rather than the definitive result because the format of dates varies by region."
        },
        {
            "number": 16,
            "answers": [
                "A"
            ],
            "explanation": "A String is immutable, so a different object is returned on line 6. The object anotherLine points to is of length 2 after line 6 completes. However, the original line reference still points to an object of length 1. Therefore, option A is correct."
        },
        {
            "number": 17,
            "answers": [
                "D"
            ],
            "explanation": "Since both byte and short cannot store values with decimal points, the only one that compiles is double. The number 3.14 is automatically considered as a double. Therefore, only double compiles, making option D the correct answer."
        },
        {
            "number": 18,
            "answers": [
                "G"
            ],
            "explanation": "The result of z.plusHours(1) is never stored in a variable or used. Since ZonedDateTime is immutable, the time remains at 01:00. The code prints out 1 true, making none of the given options correct. Therefore, option G is the answer."
        },
        {
            "number": 19,
            "answers": [
                "C"
            ],
            "explanation": "The bitwise complement operator (~) inverts all bits in the number. You can calculate this by negating the number and subtracting one, which is -9 in this case. Applying the bitwise complement operator twice gives you the original number, which is 8. Therefore, option C is the answer."
        },
        {
            "number": 20,
            "answers": [
                "B"
            ],
            "explanation": "The charAt() and length() methods are declared on both String and StringBuilder. However, the insert() method is declared only on a StringBuilder and not a String. Therefore, option B is correct."
        },
        {
            "number": 21,
            "answers": [
                "D"
            ],
            "explanation": "There are three overloads for LocalTime.of(). Options A, B, and C are all valid overloads. Option D is not because Java only allows passing one fractional second parameter. Java supports nanoseconds, but not the further granularity of picoseconds."
        },
        {
            "number": 22,
            "answers": [
                "A",
                "E",
                "F"
            ],
            "explanation": "The triple quotes (\"\"\") are the text block syntax. Option A is correct, as only the two quotes around \"kitten\" are output. The \\n gives a blank line since it is at the end of the line. The last line is also blank, making option E correct. Finally, option F is correct, as \\s preserves trailing whitespace."
        },
        {
            "number": 23,
            "answers": [
                "A",
                "B"
            ],
            "explanation": "Option A is correct and lists the operators in the same or increasing level of operator precedence. In option B, the three operators actually have the same operator precedence, so it is correct. Option C is incorrect, as division (/) has a lower precedence than the decrement operator (--). Option D is incorrect because the logical complement operator (!) has a higher order of precedence than the other two operators. Option E lists the operators in the correct order, but they don't fit within not equals (!=) and the increment operator (++) as listed in the question. In particular, the compound addition operator (+=) and the short-circuit logical operator (&&) have a lower precedence than the not equals operator (!=). Finally, option F is incorrect because the relational operator (<) does not fit between the multiplication operator (*) and the division operator (/) in order of precedence."
        },
        {
            "number": 24,
            "answers": [
                "C"
            ],
            "explanation": "The LocalDate class represents a date using year, month, and day fields. There is a getYear() method to get the year. The Period class holds units of years, months, and days. It has a getYears() method. There is not a date/time class called ZonedDate. There is a class called ZonedDateTime, which does have a getYear() method. Since only LocalDate and Period have a method to get the year, option C is correct."
        },
        {
            "number": 25,
            "answers": [
                "E"
            ],
            "explanation": "The diagram represents all cases where apples or oranges is true, but bananas is false, making option E correct. Option A is close but is correct only if the top overlapping portion of apples and oranges was filled in. For fun, you should try to draw the diagrams that would represent the other answers."
        },
        {
            "number": 26,
            "answers": [
                "B"
            ],
            "explanation": "The first thing to notice is that this is a LocalTime object. Since there is no date component, options C and D are incorrect. Four parameters are passed to this LocalTime method. The first three are the hour, minute, and second. The fourth is nanoseconds, which are fractions of a second. While you aren't expected to do calculations with nanoseconds, you should know that a fraction of a second is at the end of the output. Option A is incorrect because .4 is 40 percent of a second. That's far larger than 4 nanoseconds. Therefore, option B is correct."
        },
        {
            "number": 27,
            "answers": [
                "B"
            ],
            "explanation": "Since StringBuilder is mutable, each call to append adds to the value. When calling print, toString() is automatically called, and 333 806 1601 is output. Therefore, option B is correct."
        },
        {
            "number": 28,
            "answers": [
                "A"
            ],
            "explanation": "Option A does not compile because Java does not allow declaring different types as part of the same declaration. The other three options show various legal combinations of combining multiple variables in the same declarations with optional default values."
        },
        {
            "number": 29,
            "answers": [
                "A"
            ],
            "explanation": "The ChronoUnit enum contains values for various measures of time, including HOURS, so option A is correct."
        },
        {
            "number": 30,
            "answers": [
                "D",
                "F"
            ],
            "explanation": "Options D and F are correct since only the stripIndent() and stripTrailing() methods exist."
        },
        {
            "number": 31,
            "answers": [
                "D"
            ],
            "explanation": "Adding three hours to 13:00 makes it 16:00. While this date happens to be the start of daylight saving time, the change occurs at 2 a.m. This code uses 13:00, which is 1 p.m. Since the calculation does not cross 2 a.m., the fact that it is the date that starts daylight saving time is irrelevant. Option D is correct because the hour is 16 and there is no offset."
        },
        {
            "number": 32,
            "answers": [
                "C"
            ],
            "explanation": "The trim() method returns a String with all leading and trailing white space removed. In this question, that's the seven-character String: \":) - (:\". Options A and B are incorrect because they do not remove the first blank space in happy. Option D is incorrect because it does not remove the last character in happy. Therefore, option C is correct."
        },
        {
            "number": 33,
            "answers": [
                "C"
            ],
            "explanation": "Underscores are allowed between any two digits in a numeric literal, causing num4 to fail to compile. Additionally, underscores are not allowed adjacent to a decimal point, causing a compiler error in num2. Since two lines have errors, option C is the correct answer."
        },
        {
            "number": 34,
            "answers": [
                "B"
            ],
            "explanation": "This code correctly subtracts a day from montyPythonDay. It then outputs a LocalDateTime value. Option A is incorrect because it omits the time. Option B is correct because it represents one day earlier than the original date and includes a time in the output."
        },
        {
            "number": 35,
            "answers": [
                "A",
                "F"
            ],
            "explanation": "The parseLong() method returns a long. Since this is a primitive, we cannot call a method on it. Therefore, it does not compile, and option A is one answer. By contrast, valueOf() returns a Long wrapper class and gives the desired output, which is option F."
        },
        {
            "number": 36,
            "answers": [
                "A"
            ],
            "explanation": "The code compiles, so option D is incorrect. The input to the constructor is ignored, making the assignment of end to be 4. Since start is 2, the subtraction of 2 from 4 results in the application printing 2, followed by 5, making option A the correct answer."
        },
        {
            "number": 37,
            "answers": [
                "D"
            ],
            "explanation": "February has 28 or 29 days, depending on the year. There is never a February 31. Java throws a DateTimeException when you try to create an invalid date, making option D correct."
        },
        {
            "number": 38,
            "answers": [
                "A"
            ],
            "explanation": "This is a valid text block. Since the closing triple quotes (\"\"\") are on the same line as the text, the code prints the three lines of text without adding a blank line and option A is the answer."
        },
        {
            "number": 39,
            "answers": [
                "E"
            ],
            "explanation": "Line 4 creates a String of length 5. Since String is immutable, line 5 creates a new String with the value 1 and assigns it to builder. Remember that indexes in Java begin with 0, so the substring() method is taking the values from the fifth element through the end. Since the first element is the last element, there's only one character in there. Then line 6 tries to retrieve the second indexed element. Since there is only one element, this gives a StringIndexOutOfBoundsException, and option E is correct."
        },
        {
            "number": 40,
            "answers": [
                "E"
            ],
            "explanation": "In the first time change of the year, clocks “spring ahead” and skip the 02:00–03:00 hour entirely. This means 1:59 is followed by 03:00 on March 13, 2022. By contrast, July 4 is a normal day and 01:59 is followed by 02:00. In the second time change of the year, clocks “fall back” and repeat an hour, so 01:59 is followed by 01:00. Granted, you can't tell whether this is the first or second 01:59 from the image. If this information is relevant to a question's context, the question will specify this fact. In this case, 03:00, 02:00, 02:00 is not a choice. Option E is the answer."
        },
        {
            "number": 41,
            "answers": [
                "E"
            ],
            "explanation": "The bitwise complement operator (~) works on numeric types, not a boolean. Since the code does not compile, option E is correct."
        },
        {
            "number": 42,
            "answers": [
                "F"
            ],
            "explanation": "An Instant represents a specific moment in time using GMT. Since there are no time zones included, options A and C are incorrect. This code correctly adds one day to the instant. It includes the date, making option F correct."
        },
        {
            "number": 43,
            "answers": [
                "D"
            ],
            "explanation": "The code compiles and runs without issue. In this example, partA is the integer division of the two numbers. Since 3 does not divide 11 evenly, the result is rounded down to 3. The variable partB is the remainder from the first expression, which is 2. The results are added together, resulting in the expression 3 * 5, or 15, and making option D correct."
        },
        {
            "number": 44,
            "answers": [
                "G"
            ],
            "explanation": "The methods on Math are static. Since the class cannot be instantiated, the code does not compile, and the answer is option G."
        },
        {
            "number": 45,
            "answers": [
                "E"
            ],
            "explanation": "Make sure to pay attention to date types. This code attempts to add a month to a LocalTime value. There is no plusMonths() method on LocalTime, so option E is correct."
        },
        {
            "number": 46,
            "answers": [
                "B",
                "F"
            ],
            "explanation": "The original sample prints false, followed by george likes bananas with a trailing space. Options B and F are correct because isBlank() and strip() work the same way as the originals. The key difference is that the replacements can handle an extended range of whitespace characters."
        },
        {
            "number": 47,
            "answers": [
                "D"
            ],
            "explanation": "Calling the constructor and then insert() is an example of method chaining. However, the sb.length() call is a problem. The sb reference doesn't exist until after the chained calls complete. Just because it happens to be on a separate line doesn't change when the reference is created. Since the code does not compile, option D is correct."
        },
        {
            "number": 48,
            "answers": [
                "C"
            ],
            "explanation": "While parentheses are recommended for ternary operations, especially embedded ones, they are not required, so option D is incorrect. The first expression evaluates to 10 >= 10, so the first branch of the ternary operation is selected, and 'Leftovers' can be eliminated. The expression in the second ternary operation evaluates to 3 <= 2, which is false, so 'Salad' is selected, and option C is correct."
        },
        {
            "number": 49,
            "answers": [
                "C"
            ],
            "explanation": "Line 12 creates a Period representing three days. Period objects do not chain, so only the last method call, which is ofDays(3), is used in determining the value. Adding three days sets later to March 28, 2022. Line 14 has no effect, as the return value is not assigned. March 28, 2022 is before both thisOne and thatOne, so option C is correct."
        },
        {
            "number": 50,
            "answers": [
                "D"
            ],
            "explanation": "The simplest way of writing the numbers to be evaluated is (1+1)*(1+2). These two pairs of parentheses must remain so that the addition gets done before the multiplication and the answer remains 6. The two pairs around the numbers and the additional pair around the whole expression are redundant, giving us option D. Remember, the println() method call still requires a set of parentheses."
        },
        {
            "number": 51,
            "answers": [
                "A"
            ],
            "explanation": "Since String is immutable, each call to concat() returns a new object with the new value. However, that return value is ignored, and the teams variable never changes in value. Therefore, it stays as 694, and option A is correct."
        },
        {
            "number": 52,
            "answers": [
                "B"
            ],
            "explanation": "While char has a wrapper class, it is Character rather than Char. Therefore, option B is the answer."
        },
        {
            "number": 53,
            "answers": [
                "B"
            ],
            "explanation": "This code begins by correctly creating four objects. It then adds a month to date. Since these classes are immutable, this does not affect the value of iceCreamDay. Therefore, iceCreamDay remains in July. Since months count from one, option B is correct."
        },
        {
            "number": 54,
            "answers": [
                "C"
            ],
            "explanation": "Line 7 prints 18 due to the 16 letters, one blank space, and one newline character. Line 8 prints 21 since it indents each of the two lines by a single character and normalizes the output by adding a line break to the end. Line 9 prints 19 because it does not change the indentation, but still adds the normalizing line break. Line 10 requests decreasing the indentation by 1. Since there isn't any indentation in the original value, this behaves the same way as line 9, printing 19. Option C is correct because lines 9 and 10 print the same number."
        },
        {
            "number": 55,
            "answers": [
                "C"
            ],
            "explanation": "First, bool and Bool are not valid Java types. They should be boolean and Boolean, respectively. Next, objects are allowed to have a null reference while primitives cannot. Since Integer and String are objects, those lines compile. Finally, the line with int is a primitive, so assigning null to it does not compile. Therefore, option C is correct."
        },
        {
            "number": 56,
            "answers": [
                "D"
            ],
            "explanation": "This is not a valid text block, as the text starts on the same line as the opening triple quotes (\"\"\"). Therefore, option D is correct."
        },
        {
            "number": 57,
            "answers": [
                "A"
            ],
            "explanation": "These classes are immutable. They use a static factory method to get the object reference rather than a constructor. This makes options B and D incorrect. Further, there is not a ZonedDate class. There is a ZonedDateTime class. As a result, option C is incorrect, and option A is the answer."
        },
        {
            "number": 58,
            "answers": [
                "D"
            ],
            "explanation": "Lines 18 and 20 treat the \\n as a newline and print two lines. By contrast, line 19 sees \\n as literal text and prints a single line. Line 21 also prints two lines since translateEscapes() turns \\n into the newline escape character. Since three of these print two lines, option D is the answer."
        },
        {
            "number": 59,
            "answers": [
                "A"
            ],
            "explanation": "In the first expression, height > 1 is true. Since it uses the logical operator (|), which evaluates both sides, the right side is still executed, resulting in length being assigned a value of 2 and w assigned a value of true. In the second expression, only the right-hand side of the expression is evaluated, so x is assigned a value of 2, and length is unchanged. The last expression evaluates to 2 % 2, which is 0, so z is assigned a value of true and option A is correct."
        },
        {
            "number": 60,
            "answers": [
                "E"
            ],
            "explanation": "Both backslashes on line 13 can be removed since this is a text block. Additionally, the second and third backslashes on line 14 can be removed. The first one must be retained since there are three quotes in a row. Since four backslashes can be removed, option E is correct."
        },
        {
            "number": 61,
            "answers": [
                "B"
            ],
            "explanation": "The first line of code correctly creates a LocalDate object representing March 3, 2022. The second line adds two days to it, making it March 5. It then subtracts a day, making it March 4. Finally, it subtracts yet another day, ending at March 3. The outcome of all this is that we have two dates that have the same value, and option B is correct."
        },
        {
            "number": 62,
            "answers": [
                "A"
            ],
            "explanation": "Line 3 creates an empty StringBuilder. Line 4 adds three characters to it. Line 5 removes the first character, resulting in ed. Line 6 deletes the characters starting at position 1 and ending right before position 2, which removes the character at index 1, which is d. The only character left is e, so option A is correct."
        },
        {
            "number": 63,
            "answers": [
                "D"
            ],
            "explanation": "Line 36 does not compile because Character is not a numeric type and therefore doesn't supply a byteValue() method. All the other lines compile, making option D the answer. Note that line 37 throws an exception since this is not a valid double value, but it does compile. Additionally, line 35 runs successfully and evaluates to false, since Boolean is accommodating."
        },
        {
            "number": 64,
            "answers": [
                "D"
            ],
            "explanation": "Options A and B are not true if the String is \"deabc\". Option C is not true if the String is \"abcde\". Option D is true in all cases."
        },
        {
            "number": 65,
            "answers": [
                "C"
            ],
            "explanation": "An Instant represents a specific moment in time using GMT. Since LocalDateTime does not have a time zone, it cannot be converted to a specific moment in time. Therefore, the toInstant() call does not compile, and option C is correct."
        },
        {
            "number": 66,
            "answers": [
                "C"
            ],
            "explanation": "The whitespace to the left of the closing triple quotes (\"\"\") is incidental whitespace. Additionally, there is essential whitespace before yellow, making option C correct."
        },
        {
            "number": 67,
            "answers": [
                "E"
            ],
            "explanation": "The code compiles, so option F is incorrect. The first expression evaluates to true & false, which sets carrot to false. The next expression resolves to true ? true : false, which results in broccoli being set to true. The last expression reduces to false ^ false, which sets potato to false. Therefore, option E is the correct output."
        },
        {
            "number": 68,
            "answers": [
                "C"
            ],
            "explanation": "Normally, adding an hour would result in 02:00 in the same time zone offset of -05:00. Since the hour is repeated, it is 01:00 again. However, the time zone offset changes instead. Therefore, option C is correct."
        },
        {
            "number": 69,
            "answers": [
                "D"
            ],
            "explanation": "Line 4 creates a StringBuilder of length 5. Pay attention to the substring() method in StringBuilder. It returns a String with the value 321. It does not change the StringBuilder itself. Then line 6 retrieves the element at index 1 from that unchanged value, which is 4. Therefore, option D is correct."
        },
        {
            "number": 70,
            "answers": [
                "D"
            ],
            "explanation": "Since sum is a double, we can rule out options A, C, and E. Now tracking the code, min() returns 3. The floor() method finds the next lowest non-fractional number, which is 1.0, and turns sum into 4.0. Finally, the round() method rounds up, which is 6, and turns sum into 10.0. Therefore, option D is correct."
        }
    ]
}