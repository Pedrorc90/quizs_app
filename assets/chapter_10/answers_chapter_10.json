{
  "answers" : [
    {
      "number": 1,
      "answers": [
        "E"
      ],
      "explanation": "Connection is a JDK interface for communicating with the database. PreparedStatement and ResultSet are typically used to write queries and are also in the JDK. Driver is tricky because you don't write code that references it directly. However, you are still required to know it is a JDBC interface. DriverManager is used in JDBC code to get a Connection. However, it is a concrete class rather than an interface. Since only four out of the five are JDBC interfaces, option E is correct."
    },
    {
      "number": 2,
      "answers": [
        "C"
      ],
      "explanation": "The setNull() method requires you to pass the data type in the database. This makes option C the answer."
    },
    {
      "number": 3,
      "answers": [
        "D"
      ],
      "explanation": "All JDBC URLs begin with the protocol jdbc followed by a colon as a delimiter. Option D is the only one that does both of these, making it the correct answer."
    },
    {
      "number": 4,
      "answers": [
        "A"
      ],
      "explanation": "The Driver interface is responsible for getting a connection to the database, making option A the answer. The Connection interface is responsible for communication with the database but not making the initial connection. The Statement interface knows how to run the SQL query, and the ResultSet interface knows what was returned by a SELECT query."
    },
    {
      "number": 5,
      "answers": [
        "C"
      ],
      "explanation": "Connection is an interface. Since interfaces do not have constructors, option D is incorrect. The Connection class doesn't have a static method to get a Connection either, making option A incorrect. The Driver class is also an interface without static methods, making option B incorrect. Option C is the answer because DriverManager is the class used in JDBC to get a Connection."
    },
    {
      "number": 6,
      "answers": [
        "F"
      ],
      "explanation": "The DriverManager.getConnection() method can be called with just a URL. It is also overloaded to take the URL, username, and password. Since this is not one of the options, the answer is option F."
    },
    {
      "number": 7,
      "answers": [
        "D"
      ],
      "explanation": "This code is missing a call to rs.next(). As a result, rs.getInt(1) throws a SQLException with the message invalid cursor state. Therefore, option D is the answer."
    },
    {
      "number": 8,
      "answers": [
        "E"
      ],
      "explanation": "The execute() method is allowed to run any type of SQL statements. The executeUpdate() method is allowed to run any type of the SQL statement that returns a row count rather than a ResultSet. Both DELETE and UPDATE SQL statements are allowed to be run with either execute() or executeUpdate(). They are not allowed to be run with executeQuery() because they do not return a ResultSet. Therefore, option E is the answer."
    },
    {
      "number": 9,
      "answers": [
        "A"
      ],
      "explanation": "This code uses a PreparedStatement without bind variables (?). While it would be better to use bind variables, this code does run. The ResultSet has one value and does print Mei Xiang successfully. Therefore, option A is the answer."
    },
    {
      "number": 10,
      "answers": [
        "F"
      ],
      "explanation": "While the table has two columns, the SQL query has only one bind variable (?). Therefore, the code throws an exception when attempting to set the second bind variable, and option F is correct."
    },
    {
      "number": 11,
      "answers": [
        "B"
      ],
      "explanation": "This code is correct. It executes the first update to add the first row and then sets the parameters for the second. When it updates the second time, it adds the second row. Therefore, option B is the answer."
    },
    {
      "number": 12,
      "answers": [
        "D"
      ],
      "explanation": "Since conn.setAutoCommit(false) is not called, each update is automatically committed. Therefore, there is nothing to roll back and option D is the answer."
    },
    {
      "number": 13,
      "answers": [
        "B"
      ],
      "explanation": "Unlike arrays, JDBC uses one-based indexes. Since num_pages is in the second column, the parameter needs to be 2, ruling out options A and C. Further, there is not a method named getInteger() on the ResultSet interface, ruling out option D. Because the proper method is getInt(), option B is the answer."
    },
    {
      "number": 14,
      "answers": [
        "B",
        "D"
      ],
      "explanation": "Since JDBC does not begin indexes with 0, option A is incorrect and option B is correct. Similarly, the second parameter is at index 2, so option C is incorrect and option D is the other answer. Note that setObject() can be called instead of a more specific type."
    },
    {
      "number": 15,
      "answers": [
        "D"
      ],
      "explanation": "Option A does not compile because you have to pass a column index or column name to the method. Options B and C compile. However, there are no columns named 0 or 1. Since these column names don't exist, the code would throw a SQLException at runtime. Option D is correct as it uses the proper column name."
    },
    {
      "number": 16,
      "answers": [
        "A"
      ],
      "explanation": "Stored procedures use the registerOutParameter() method. Since this stored procedure returns a value, we need to call execute(), making option A the answer."
    },
    {
      "number": 17,
      "answers": [
        "B"
      ],
      "explanation": "The Kitty insert is before the SavePoint so it is remembered. The rollback() method prevents the Beverly commit. When the code calls commit(), only Kitty is committed and option B is correct."
    },
    {
      "number": 18,
      "answers": [
        "B"
      ],
      "explanation": "Connection is an interface rather than a concrete class. Therefore, it does not have a constructor and line s1 does not compile. As a result, option B is the answer."
    },
    {
      "number": 19,
      "answers": [
        "E"
      ],
      "explanation": "Database resources should be manually closed in the reverse order from which they were opened. This means the ResultSet object is closed before the Statement object and the Statement object is closed before the Connection object. This makes option E the answer."
    },
    {
      "number": 20,
      "answers": [
        "A"
      ],
      "explanation": "This code correctly obtains a Connection and PreparedStatement. It then runs a query, getting back a ResultSet without any rows. The rs.next() call returns false, so nothing is printed, making option A correct."
    },
    {
      "number": 21,
      "answers": [
        "F"
      ],
      "explanation": "The SQL query has two bind variables, but the code sets only one. This causes a SQLException when executeQuery() is called, making option F the answer."
    },
    {
      "number": 22,
      "answers": [
        "A"
      ],
      "explanation": "This code uses a PreparedStatement and properly sets a bind variable (?). The ResultSet has one value and does print Mei Xiang successfully. Therefore, option A is the answer."
    },
    {
      "number": 23,
      "answers": [
        "C",
        "D"
      ],
      "explanation": "Input parameters are set in the same way as in a PreparedStatement, making setInt() correct for the first blank and option D correct. For the second blank, stored procedures use registerOutParameter() for output, making option C the other correct answer."
    },
    {
      "number": 24,
      "answers": [
        "A"
      ],
      "explanation": "The count(*) function in SQL always returns a number. In this case, it is the number 0. This means line r1 executes successfully because it positions the cursor at that row. Line r2 also executes successfully and prints 0, which is the value in the row. Since the code runs successfully, option A is the answer."
    },
    {
      "number": 25,
      "answers": [
        "B"
      ],
      "explanation": "This code is correct. It executes the first update to add the first row and then sets the parameters for the second. For the second update, only one parameter is set. The other is reused since it was set earlier. Therefore, option B is the answer."
    },
    {
      "number": 26,
      "answers": [
        "B"
      ],
      "explanation": "The Kitty insert is rolled back even though there is a savepoint since the savepoint is not referenced. The Beverly insert is retained, making option B correct."
    },
    {
      "number": 27,
      "answers": [
        "E"
      ],
      "explanation": "In JDBC, the bind variable is always a question mark (?), making option A incorrect. A PreparedStatement is not limited to specific types of SQL, making options B and C incorrect as well. This makes option E the correct answer."
    },
    {
      "number": 28,
      "answers": [
        "F"
      ],
      "explanation": "While this code compiles, it isn't right. Since we have a SELECT statement, we should be calling execute() or executeQuery(). Option F is the answer because the code throws an exception when attempting to call executeUpdate()."
    },
    {
      "number": 29,
      "answers": [
        "B",
        "C"
      ],
      "explanation": "When in autocommit mode, statements are immediately committed. Since there is nothing to roll back, option B is one of the answers. Additionally, enabling autocommit mode triggers an immediate commit, giving us option C."
    },
    {
      "number": 30,
      "answers": [
        "C"
      ],
      "explanation": "This question is trickier if you know more JDBC than is on the exam. If you know only what is on the exam, you would assume the createStatement() method doesn't exist. However, it does, and stmt is a Statement object. Since setString() does not exist on Statement, the code does not compile. This means the answer is option C regardless of your level of knowledge of JDBC."
    }
  ]
}